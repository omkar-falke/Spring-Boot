--  Generate SQL 
--  Version:                   	V5R3M0 040528 
--  Generated on:              	16/05/07 09:17:26 
--  Relational Database:       	SPLWS01 
--  Standards Option:          	DB2 UDB iSeries 
  
SET PATH "QSYS","QSYS2","FIMS" ; 

DROP  PROCEDURE SPLDATA.UPDPLTRN_PMR  ;
commit;

CREATE PROCEDURE SPLDATA.UPDPLTRN_PMR ( 
	IN LP_CMPCD CHAR(2) , 
	IN LP_MKTTP CHAR(2) , 
	IN LP_DOCNO CHAR(8) ) 
	LANGUAGE SQL 
	SPECIFIC SPLDATA.UPDPLTRN_PMR 
	NOT DETERMINISTIC 
	MODIFIES SQL DATA 
	CALLED ON NULL INPUT 
	P1 : 
	BEGIN 
	DECLARE L_PRTTP CHAR ( 1 ) ; 
	DECLARE L_PRTCD CHAR ( 5 ) ; 
	DECLARE L_DOCTP CHAR ( 2 ) ; 
	DECLARE L_DOCDT DATE ; 
	DECLARE L_SEQNO DECIMAL ( 10 ) ; 
	DECLARE L_DOCVL DECIMAL ( 12 , 2 ) ; 
	DECLARE L_BALVL DECIMAL ( 12 , 2 ) ; 
	DECLARE L_BALFL CHAR ( 2 ) ; 
	DECLARE L_BALVL1 DECIMAL ( 12 , 2 ) ; 
	DECLARE L_BALFL1 CHAR ( 2 ) ; 
	DECLARE L_ADJVL DECIMAL ( 12 , 2 ) ; 
	DECLARE L_ACCRF CHAR ( 8 ) ; 
	DECLARE L_ACCDT DATE ; 
	DECLARE L_BYRCD CHAR ( 5 ) ; 
	DECLARE L_GRPCD CHAR ( 5 ) ; 
	DECLARE L_CNSCD CHAR ( 6 ) ; 
	DECLARE L_SBSCD CHAR ( 6 ) ; 
	DECLARE L_TRNFL CHAR ( 1 ) ; 
	DECLARE L_STSFL CHAR ( 1 ) ; 
	DECLARE L_LUSBY CHAR ( 5 ) ; 
	DECLARE L_LUPDT DATE ; 
	DECLARE L_PLTRN_PUSH CHAR ( 1 ) ; 
	  
	DECLARE L_DBTTP CHAR ( 2 ) ; 
	DECLARE L_DBTNO CHAR ( 8 ) ; 
	DECLARE L_PAYDT DATE ; 
	  
	  
	DECLARE L_RECCT INT DEFAULT 0 ; 
	  
	DECLARE END_TABLE INT DEFAULT 0 ; 
	  
	DECLARE C_PMR CURSOR FOR SELECT PR_PRTTP , PR_PRTCD , PR_DOCTP , PR_DOCDT , PR_SBSCD , PR_GRPCD , PR_CNSCD , SUM ( PR_RCTVL ) PR_RCTVL FROM SPLDATA . MR_PRTRN WHERE PR_MKTTP = LP_MKTTP AND PR_DOCNO = LP_DOCNO AND PR_DOCTP IN ( '11' , '12' , '13' , '19' ) GROUP BY PR_PRTTP , PR_PRTCD , PR_DOCTP , PR_DOCNO , PR_DOCDT , PR_SBSCD , PR_GRPCD , PR_CNSCD ; 
	  
	DECLARE C_PAD CURSOR FOR SELECT PA_PRTTP , PA_PRTCD , PA_DBTTP , PA_DBTNO FROM SPLDATA . MR_PATRN WHERE PA_CMPCD = LP_CMPCD AND PA_MKTTP = LP_MKTTP AND PA_CRDNO = LP_DOCNO ORDER BY PA_CMPCD , PA_PRTTP , PA_PRTCD , PA_DBTTP , PA_DBTNO ; 
	  
	DECLARE CONTINUE HANDLER FOR NOT FOUND 
	SET END_TABLE = 1 ; 
	  
	OPEN C_PMR ; 
	FETCH C_PMR INTO L_PRTTP , L_PRTCD , L_DOCTP , L_DOCDT , L_SBSCD , L_GRPCD , L_CNSCD , L_DOCVL ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'START ' ) ; 
	  
	WHILE END_TABLE = 0 DO 
	  
	  
	SET L_SEQNO = 0 ; 
	SET L_BALVL = 0.00 ; 
	SET L_BALFL = 'CR' ; 
	SET L_BALVL1 = 0.00 ; 
	SET L_BALFL1 = 'CR' ; 
	SET L_ADJVL = 0.00 ; 
	SET L_ACCRF = '    ' ; 
	SET L_ACCDT = NULL ; 
	SET L_TRNFL = '0' ; 
	SET L_STSFL = '1' ; 
	SET L_LUSBY = 'SYS' ; 
	SET L_LUPDT = CURRENT_DATE ; 
	  
	  
	SELECT isnull ( PL_SEQNO , 0 ) PL_SEQNO INTO L_SEQNO FROM SPLDATA . MR_PLTRN WHERE PL_CMPCD = LP_CMPCD AND PL_PRTTP = L_PRTTP AND PL_PRTCD = L_PRTCD AND PL_DOCTP = L_DOCTP AND PL_DOCNO = LP_DOCNO ; 
	-- If the Payment Receipt Record exists in Party ledger, only Payment Receipt value is over written and closing balance for subsequent transactions is reworked 
	 IF L_SEQNO > 0 THEN 
		-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'part 1 receipt present ' ) ; 
	UPDATE SPLDATA . MR_PLTRN SET PL_DOCVL = ROUND ( L_DOCVL , 0 ) WHERE PL_CMPCD = LP_CMPCD AND PL_PRTTP = L_PRTTP AND PL_PRTCD = L_PRTCD AND PL_DOCTP = L_DOCTP AND PL_DOCNO = LP_DOCNO ; 
		-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'part 1 before rework ' ) ; 
	--call spldata.rwkPLTRN_TRN(LP_CMPCD, L_PRTTP, L_PRTCD, L_DOCTP, LP_DOCNO, L_SEQNO); 
		-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'part 1 after rework bypassed' ) ; 
	END IF ; 
	--insert into spldata.temp_chk values('L_SEQNO : ' + char(L_SEQNO)); 
	IF L_SEQNO = 0 THEN 
		-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'part 2 receipt not present ' ) ; 
	SELECT DISTINCT PR_DOCDT INTO L_DOCDT FROM SPLDATA . MR_PRTRN WHERE PR_CMPCD = LP_CMPCD AND PR_PRTTP = L_PRTTP AND PR_PRTCD = L_PRTCD AND PR_DOCNO = LP_DOCNO ;	
CALL SPLDATA . RWKPLTRN_SRL ( LP_CMPCD , L_PRTTP , L_PRTCD , L_DOCDT , L_DOCTP , LP_DOCNO , L_SEQNO ) ; 
	SET L_PLTRN_PUSH = '0' ; 
	IF L_SEQNO > 0 THEN 
	SET L_PLTRN_PUSH = '1' ; 
	END IF ; 
	--insert into spldata.temp_chk values ('Received Seq.No. : ' + char(L_SEQNO)); 
	IF L_PLTRN_PUSH = '0' THEN 
	SELECT MAX ( isnull ( PL_SEQNO , 0 ) ) INTO L_SEQNO FROM SPLDATA . MR_PLTRN WHERE PL_CMPCD = LP_CMPCD AND PL_PRTTP = L_PRTTP AND PL_PRTCD = L_PRTCD ; 
	SET L_SEQNO = isnull ( L_SEQNO , 0 ) + 1 ; 
	END IF ; 
	  
	  
	IF L_SEQNO > 1 THEN 
	SELECT isnull ( PL_BALVL , 0 ) , isnull ( PL_BALFL , 'DB' ) INTO L_BALVL , L_BALFL FROM SPLDATA . MR_PLTRN WHERE PL_CMPCD = LP_CMPCD AND PL_PRTTP = L_PRTTP AND PL_PRTCD = L_PRTCD AND PL_SEQNO = L_SEQNO - 1 ; 
	ELSE 
	SELECT isnull ( PT_YOPVL , 0 ) PT_YOPVL , isnull ( PT_YOPFL , 'DB' ) PT_YOPFL INTO L_BALVL , L_BALFL FROM SPLDATA . CO_PTMST WHERE PT_PRTTP = L_PRTTP AND PT_PRTCD = L_PRTCD ; 
	END IF ; 
	  
	INSERT INTO SPLDATA . TEMP_CHK VALUES ( CHAR ( L_SEQNO )  +  '   '  +  CHAR ( L_BALVL )  +  '    '  +  CHAR ( L_BALFL )  +  '     '  +  L_PRTCD ) ; 
	  
	IF L_BALFL = 'CR' THEN 
	SET L_BALVL1 = isnull ( L_BALVL , 0 ) + isnull ( L_DOCVL , 0 ) ; 
	SET L_BALFL1 = 'CR' ; 
	ELSE 
	SET L_BALVL1 = isnull ( L_BALVL , 0 ) - isnull ( L_DOCVL , 0 ) ; 
	SET L_BALFL1 = 'DB' ; 
	END IF ; 
	  
	-- After deducting credit amount, if the balance goes negative,  Then it is a Credit Balancde 
	IF L_BALVL1 < 0 THEN 
	SET L_BALVL1 = isnull ( L_BALVL1 , 0 ) * ( - 1 ) ; 
	SET L_BALFL1 = 'CR' ; 
	END IF ; 
	  
	INSERT INTO SPLDATA . MR_PLTRN ( PL_CMPCD , PL_PRTTP , PL_PRTCD , PL_DOCTP , PL_DOCNO , PL_SEQNO , PL_DOCDT , PL_DOCVL , PL_BALVL , PL_BALFL , PL_ADJVL , PL_ACCRF , PL_ACCDT , PL_MKTTP , PL_GRPCD , PL_CNSCD , PL_SBSCD , PL_TRNFL , PL_STSFL , PL_LUSBY , PL_LUPDT ) VALUES ( LP_CMPCD , L_PRTTP , L_PRTCD , L_DOCTP , LP_DOCNO , L_SEQNO , L_DOCDT , ROUND ( L_DOCVL , 0 ) , ROUND ( L_BALVL1 , 0 ) , L_BALFL1 , ROUND ( L_ADJVL , 0 ) , L_ACCRF , L_ACCDT , LP_MKTTP , L_GRPCD , L_CNSCD , L_SBSCD , L_TRNFL , L_STSFL , L_LUSBY , L_LUPDT ) ; 
	UPDATE SPLDATA . CO_PTMST SET PT_YTDVL = ROUND ( L_BALVL1 , 0 ) , PT_YTDFL = L_BALFL1 WHERE PT_PRTTP = L_PRTTP AND PT_PRTCD = L_PRTCD ; 
	  
	--IF L_PLTRN_PUSH = '1' THEN 
	--CALL SPLDATA . RWKPLTRN_TRN ( LP_CMPCD , L_PRTTP , L_PRTCD , L_DOCTP , LP_DOCNO , L_SEQNO ) ; 
	--END IF ; 
  	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'end if part 2 receipt not present ' ) ; 
	  
	END IF ; 
	SET END_TABLE = 0 ; 
	FETCH C_PMR INTO L_PRTTP , L_PRTCD , L_DOCTP , L_DOCDT , L_SBSCD , L_GRPCD , L_DOCVL ; 
	END WHILE ; 
	CLOSE C_PMR ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'cursor closed' ) ; 
	  
	OPEN C_PAD ; 
	FETCH C_PAD INTO L_PRTTP , L_PRTCD , L_DBTTP , L_DBTNO ; 
	SET END_TABLE = 0 ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'payment adjustment' ) ; 
	WHILE END_TABLE = 0 DO 
		-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'select max date' ) ; 
	SELECT MAX ( PL_DOCDT ) PL_DOCDT INTO L_PAYDT FROM SPLDATA . MR_PLTRN WHERE PL_CMPCD = LP_CMPCD AND PL_PRTTP = L_PRTTP AND PL_PRTCD = L_PRTCD AND PL_DOCNO IN ( SELECT PA_CRDNO FROM SPLDATA . MR_PATRN WHERE PA_CMPCD = LP_CMPCD AND PA_PRTTP = L_PRTTP AND PA_PRTCD = L_PRTCD AND PA_DBTTP = L_DBTTP AND PA_DBTNO = L_DBTNO ) ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'update max date' ) ; 
	UPDATE SPLDATA . MR_PLTRN SET PL_PAYDT = L_PAYDT WHERE PL_CMPCD = LP_CMPCD AND PL_PRTTP = L_PRTTP AND PL_PRTCD = L_PRTCD AND PL_DOCTP = L_DBTTP AND PL_DOCNO = L_DBTNO ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'end update max date' ) ; 
	SET END_TABLE = 0 ; 
	FETCH C_PAD INTO L_PRTTP , L_PRTCD , L_DBTTP , L_DBTNO ; 
	END WHILE ; 
	CLOSE C_PAD ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'update adjusted value' ) ; 
	SELECT SUM ( isnull ( PA_ADJVL , 0 ) ) INTO L_ADJVL FROM SPLDATA . MR_PATRN WHERE PA_CMPCD = LP_CMPCD AND PA_CRDNO = LP_DOCNO ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'end select adjusted value' ) ; 
	UPDATE SPLDATA . MR_PLTRN SET PL_ADJVL = L_ADJVL WHERE PL_CMPCD = LP_CMPCD AND PL_DOCNO = LP_DOCNO ; 
	-- INSERT INTO SPLDATA . TEMP_CHK VALUES ( 'end update adjusted value' ) ; 
	  
	--commit; 
	END P1  ;

COMMIT;
