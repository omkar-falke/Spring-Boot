/*
System Name			: Marketing Management System
Program Name		: Grade Wise Booking status
Author				: AAP

Modified Date		: 
Documentation Date  : 
Version				: v2.0.0
*/

import java.io.IOException;import java.io.File;import java.io.FileOutputStream;
import java.io.DataOutputStream;
import javax.swing.JPanel;import javax.swing.JComponent;import javax.swing.JRadioButton;
import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.JComboBox;
import java.awt.event.FocusEvent;import java.awt.event.ActionEvent;import java.awt.event.KeyEvent;
import java.util.Enumeration;import java.util.StringTokenizer;import java.util.Vector;
import java.util.Hashtable;import java.util.Calendar;import java.util.Arrays;
import java.awt.Color; import java.sql.ResultSet;import javax.swing.*;
import java.text.SimpleDateFormat;

/**<BODY><P><FONT size=4><STRONG>Program Description :</STRONG></FONT>  </P><P><FONT color=purple><STRONG>Program Details :</STRONG></FONT></P><TABLE border=1 cellPadding=1 cellSpacing=1 style="HEIGHT: 89px; WIDTH: 767px" width="75%" borderColorDark=darkslateblue borderColorLight=white>    <TR>    <TD>System Name</TD>    <TD>Marketing Management System </TD></TR>  <TR>    <TD>Program Name</TD>    <TD>    Grade&nbsp;Wise&nbsp;Booking Status Report.</TD></TR>  <TR>    <TD>Program Desc</TD>    <TD>                                                                         Gives&nbsp;summary report of Grade                  and Package type wise       Booking&nbsp; for the day or the month. </TD></TR>  <TR>    <TD>Basis Document</TD>    <TD>      123 report generated by      Mr. PDP      </TD></TR>  <TR>    <TD>Executable path</TD>    <TD>f:\exec\splerp2\mr_rpgrd.class</TD></TR>  <TR>    <TD>Source path</TD>    <TD>g:\splerp2\mr_rpgrd.java</TD></TR>  <TR>    <TD>Author </TD>    <TD>AAP </TD></TR>  <TR>    <TD>Date</TD>    <TD>30/04/2004&nbsp; </TD></TR>  <TR>    <TD>Version </TD>    <TD>2.0.0</TD></TR>  <TR>    <TD><STRONG>Revision : 1 </STRONG></TD>    <TD>&nbsp;&nbsp;        </TD></TR>  <TR>    <TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       By</TD>    <TD>&nbsp;</TD></TR>  <TR>    <TD>      <P align=left>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       Date</P>       </TD>    <TD>      <P align=left>&nbsp;</P>  </TD></TR>  <TR>    <TD>      <P align=left>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version</P>         </TD>    <TD>&nbsp;</TD></TR></TABLE><P><FONT color=purple><STRONG>   </STRONG></FONT>&nbsp;</P><P><FONT color=purple><STRONG>Tables Used : </STRONG></FONT></P><TABLE border=1 cellPadding=1 cellSpacing=1 style="LEFT: 11px; TOP:  373px; WIDTH: 100%" width="100%" background="" borderColorDark=white borderColorLight=darkslateblue borderColor=black>    <TR>    <TD>      <P align=center>Table Name</P></TD>    <TD>      <P align=center> Columns</P></TD>    <TD>      <P align=center>Add</P></TD>    <TD>      <P align=center>Mod</P></TD>    <TD>      <P align=center>Del</P></TD>    <TD>      <P align=center>Enq</P></TD></TR>  <TR>    <TD>MR_INMST</TD>    <TD>&nbsp;IN_BKGDT,IN_ZONCD,IN_MKTTP,IN_SALTP</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR>  <TR>    <TD>MR_INTRN</TD>    <TD>&nbsp;INT_INDNO,INT_PRDDS,INT_PKGWT,INT_INDQT</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR>  <TR>    <TD>CO_CDTRN</TD>    <TD>CMT_CGSTP = 'MR00ZON',       'MR00SAL','MRXXRGN','FGXXPKG','COXXPGR'</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR>  <TR>    <TD>CO_PRMST</TD>    <TD>&nbsp; PR_PRDCD,PR_PRDDS </TD>    <TD>      <P align=center>&nbsp;</P></TD>    <TD>      <P align=center>&nbsp;</P></TD>    <TD>      <P align=center>&nbsp;</P></TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR></TABLE><P>&nbsp;</P><P><FONT color=purple><STRONG>Report is Available in following Catagories : </STRONG></FONT></P><UL>  <LI>PS - Prime&nbsp;  <LI>  PS - Non Prime   <LI> SPS - All catagories   <LI>Articles of PS</LI></UL><UL>  <LI>For the day</LI>  <LI>For the month</LI></UL><UL>  <LI>For all regions</LI>  <LI>For all zones in a region</LI>  <LI>For a specific zone</LI></UL><P>This Report makes use of HTML format. Methods in cl_rbase are overridden for the same</P><P>Product catagory wise seggregation is done dynamically using 'COXXPGR' series in CO_CDTRN.</P></BODY> */
class mr_rprsn extends cl_rbase
{
	private Vector<String> vtrPS1DS;
	private Vector<String> vtrPS1CD;
	private Vector<String> vtrPS2DS;
	private Vector<String> vtrPS2CD;
	private Vector<String> vtrPS3DS;
	private Vector<String> vtrPS3CD;
	private Vector<String> vtrPS4DS;
	private Vector<String> vtrPS4CD;
	private Vector<String> vtrSALDS;
	private Vector<String> vtrSALCD;
	private String strTXCLR="<font Color=black>";/**Global string for page break in HTML	 */
	private String strPGBRK="<P CLASS = \"breakhere\"></PRE>";/** String array for report column headers */
	private boolean flgTBLDT;
	private DataOutputStream dosREPORT;
	private	Hashtable	L_hstINDAY_RG=new Hashtable(20,0.75f),
					L_hstINMTH_RG=new Hashtable(20,0.75f),
					L_hstIVDAY_RG=new Hashtable(20,0.75f),
					L_hstIVMTH_RG=new Hashtable(20,0.75f);
	private	Hashtable	L_hstINDAY_AI=new Hashtable(20,0.75f),
					L_hstINMTH_AI=new Hashtable(20,0.75f),
					L_hstIVDAY_AI=new Hashtable(20,0.75f),
					L_hstIVMTH_AI=new Hashtable(20,0.75f);
	private	Hashtable	L_hstINDAY_XP=new Hashtable(20,0.75f),
					L_hstINMTH_XP=new Hashtable(20,0.75f),
					L_hstIVDAY_XP=new Hashtable(20,0.75f),
					L_hstIVMTH_XP=new Hashtable(20,0.75f);
	private String strSALRF;
	//private JCheckBox chkSELFML;
	//private float[] flaGPTOT;
	//private float[] flaHITOT;
	private final int intCOLCT_fn=8;
	float[] L_flaTOTAL=new float[intCOLCT_fn];
	float[] L_flaTEMP=new float[intCOLCT_fn];
	float[] L_flaTOTAL1=new float[intCOLCT_fn];
	float[] L_flaTOTAL2=new float[intCOLCT_fn];
	float[] L_flaGRTOT=new float[intCOLCT_fn];
	float[] L_flaPSTOT=new float[intCOLCT_fn];
	float[] L_flaSPTOT=new float[intCOLCT_fn];
	float[] L_flaDMTOT=new float[intCOLCT_fn];
	float[] L_flaDETOT=new float[intCOLCT_fn];
	float[] flaGPTOT=new float[intCOLCT_fn];
	float[] flaHITOT=new float[intCOLCT_fn];
	private String strBLANK="&nbsp&nbsp&nbsp";
	 mr_rprsn()
	{
		super(2);
		try
		{
			//chkSELFML = new JCheckBox("Self Mail");
			//add(chkSELFML,5,8,1,1,this,'L');
			M_pnlRPFMT.setVisible(true);
			M_rstRSSET=cl_dat.exeSQLQRY0("Select  CMT_CODCD,CMT_CODDS from CO_CDTRN where CMT_CGMTP='SYS' and CMT_CGSTP='MR00SAL' and CMT_CODCD not in('04','05','12','16','21') order by CMT_CODCD");
			if(M_rstRSSET!=null)
			{
				vtrSALDS=new Vector<String>(10,2);
				vtrSALCD=new Vector<String>(10,2);
					while(M_rstRSSET.next())
				{
					vtrSALDS.addElement(M_rstRSSET.getString("CMT_CODDS"));
					vtrSALCD.addElement(M_rstRSSET.getString("CMT_CODCD"));
				}
				M_rstRSSET.close();
			}
			//RETRIEVING DETAILS OF PRODUCT CODE GROUPING AND PUTTING IN RESP Vector<String>S
			M_rstRSSET=cl_dat.exeSQLQRY0("Select substr(CMT_CODCD,1,4) CMT_CODCD,CMT_SHRDS,CMT_CHP01 from CO_CDTRN where CMT_CGMTP='MST' and CMT_CGSTP='COXXPGR' order by CMT_CODCD");
			if(M_rstRSSET!=null)
			{
				 vtrPS1DS=new Vector<String>(10,2);
				 vtrPS1CD=new Vector<String>(10,2);
				 vtrPS2DS=new Vector<String>(10,2);
				 vtrPS2CD=new Vector<String>(10,2);
				 vtrPS3DS=new Vector<String>(10,2);
				 vtrPS3CD=new Vector<String>(10,2);
				 vtrPS4DS=new Vector<String>(10,2);
				 vtrPS4CD=new Vector<String>(10,2);

				 while(M_rstRSSET.next())
				{
					if(M_rstRSSET.getString("CMT_CHP01").equals("01"))
					{
						vtrPS1DS.addElement(M_rstRSSET.getString("CMT_SHRDS"));
						vtrPS1CD.addElement(M_rstRSSET.getString("CMT_CODCD"));
					}
					else if(M_rstRSSET.getString("CMT_CHP01").equals("02"))
					{
						vtrPS2DS.addElement(M_rstRSSET.getString("CMT_SHRDS"));
						vtrPS2CD.addElement(M_rstRSSET.getString("CMT_CODCD"));
					}
					else if(M_rstRSSET.getString("CMT_CHP01").equals("05"))
					{
						vtrPS3DS.addElement(M_rstRSSET.getString("CMT_SHRDS"));
						vtrPS3CD.addElement(M_rstRSSET.getString("CMT_CODCD"));
					}
					else if(M_rstRSSET.getString("CMT_CHP01").equals("04"))
					{
						vtrPS4DS.addElement(M_rstRSSET.getString("CMT_SHRDS"));
						vtrPS4CD.addElement(M_rstRSSET.getString("CMT_CODCD"));
					}
				}
			}
			//chkSELFML.setSelected(false);
			M_rdbHTML.setSelected(true);
		}catch(Exception e)
		{setMSG(e,"Child.Constructor");}
	}
	
	public void actionPerformed(ActionEvent P_AE)
	{
		super.actionPerformed(P_AE);
		try
		{
			if(M_objSOURC == cl_dat.M_cmbOPTN_pbst && cl_dat.M_cmbOPTN_pbst.getSelectedIndex()>0)
			{
				M_calLOCAL.setTime(M_fmtLCDAT.parse(cl_dat.M_strLOGDT_pbst));
				M_calLOCAL.add(Calendar.DATE,-1);
				M_txtTODAT.setText(M_fmtLCDAT.format(M_calLOCAL.getTime()));
				M_calLOCAL.set(Calendar.DATE,1);
				M_txtFMDAT.setText(M_fmtLCDAT.format(M_calLOCAL.getTime()));
				M_txtFMDAT.requestFocus();
			}
		}catch(Exception e)
		{setMSG(e,"Child.actionPerformed");}
	}
	
	@SuppressWarnings("unchecked") void exePRINT()
	{
		//System.out.println(this.getClass());
		M_intLINNO=1;M_intPAGNO=0;
		ResultSet L_rstINDAY=null,L_rstINMTH=null,L_rstIVDAY=null,L_rstIVMTH=null,L_rstCRFQT=null;
		L_hstINDAY_RG=new Hashtable(20,0.75f);
		L_hstINMTH_RG=new Hashtable(20,0.75f);
		L_hstIVDAY_RG=new Hashtable(20,0.75f);
		L_hstIVMTH_RG=new Hashtable(20,0.75f);

		L_hstINDAY_AI=new Hashtable(20,0.75f);
		L_hstINMTH_AI=new Hashtable(20,0.75f);
		L_hstIVDAY_AI=new Hashtable(20,0.75f);
		L_hstIVMTH_AI=new Hashtable(20,0.75f);

		L_hstINDAY_XP=new Hashtable(20,0.75f);
		L_hstINMTH_XP=new Hashtable(20,0.75f);
		L_hstIVDAY_XP=new Hashtable(20,0.75f);
		L_hstIVMTH_XP=new Hashtable(20,0.75f);
		
		try
		{
			String L_strSBSCD=""; //STRING FOR SUBSYSTEM FILTER
			for(int i=0;i<M_staUSRRT.length;i++)
				L_strSBSCD+="'"+M_staUSRRT[i][0].substring(2)+"',";
			L_strSBSCD=L_strSBSCD.substring(0,L_strSBSCD.length()-1);
			//System.out.println(L_strSBSCD);

			//System.out.println("001");
			M_strSQLQRY="Select INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum((ifnull(int_indqt,0)-ifnull(int_fcmqt,0))) INDQT,sum(INT_RSNVL) RSNVL from MR_INTRN,MR_INMST,CO_CDTRN where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT='"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and CMT_CGMTP='SYS' and CMT_CGSTP='MR00ZON' and CMT_CODCD=IN_ZONCD group by INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4) order by CMT_CHP02,substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstINDAY=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstINDAY!=null)
			{
				while(L_rstINDAY.next())
					L_hstINDAY_RG.put(L_rstINDAY.getString("CMT_CHP02")+"|"+L_rstINDAY.getString("IN_SALTP")+"|"+L_rstINDAY.getString("PRDCD"),new float[]{L_rstINDAY.getFloat("INDQT"),L_rstINDAY.getFloat("RSNVL")});
				L_rstINDAY.close();
			}

			M_strSQLQRY="Select INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum((ifnull(int_indqt,0)-ifnull(int_fcmqt,0))) INDQT,sum(INT_RSNVL) RSNVL from MR_INTRN,MR_INMST where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT='"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') group by INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4) order by substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstINDAY=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstINDAY!=null)
			{
				while(L_rstINDAY.next())
					L_hstINDAY_AI.put(L_rstINDAY.getString("IN_SALTP")+"|"+L_rstINDAY.getString("PRDCD"),new float[]{L_rstINDAY.getFloat("INDQT"),L_rstINDAY.getFloat("RSNVL")});
				L_rstINDAY.close();
			}
			

			M_strSQLQRY="Select INT_MKTTP,substr(INT_PRDCD,1,4) PRDCD,sum((ifnull(int_indqt,0)-ifnull(int_fcmqt,0))) INDQT,sum(INT_RSNVL) RSNVL from MR_INTRN,MR_INMST where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP = '12' and IN_SBSCD in "+M_strSBSLS+" and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT='"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and INT_STSFL not in ('X','0') group by INT_MKTTP,substr(INT_PRDCD,1,4) order by substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstINDAY=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstINDAY!=null)
			{
				while(L_rstINDAY.next())
					L_hstINDAY_XP.put(L_rstINDAY.getString("PRDCD"),new float[]{L_rstINDAY.getFloat("INDQT"),L_rstINDAY.getFloat("RSNVL")});
				L_rstINDAY.close();
			}
			
			
			//System.out.println("002");
			M_strSQLQRY="Select INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum((ifnull(int_indqt,0)-ifnull(int_fcmqt,0))) INDQT,sum(INT_RSNVL) RSNVL from MR_INTRN,MR_INMST,CO_CDTRN  where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT between '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and INT_STSFL not in ('X','0') and CMT_CGMTP='SYS' and CMT_CGSTP='MR00ZON' and CMT_CODCD=IN_ZONCD group by INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4) order by CMT_CHP02,substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstINMTH=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstINMTH!=null)
			{
				while(L_rstINMTH.next())
					L_hstINMTH_RG.put(L_rstINMTH.getString("CMT_CHP02")+"|"+L_rstINMTH.getString("IN_SALTP")+"|"+L_rstINMTH.getString("PRDCD"),new float[]{L_rstINMTH.getFloat("INDQT"),L_rstINMTH.getFloat("RSNVL")});
				L_rstINMTH.close();
			}


			M_strSQLQRY="Select INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum((ifnull(int_indqt,0)-ifnull(int_fcmqt,0))) INDQT,sum(INT_RSNVL) RSNVL from MR_INTRN,MR_INMST  where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT between '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL  not in ('X','0')  group by INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4) order by substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstINMTH=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstINMTH!=null)
			{
				while(L_rstINMTH.next())
					L_hstINMTH_AI.put(L_rstINMTH.getString("IN_SALTP")+"|"+L_rstINMTH.getString("PRDCD"),new float[]{L_rstINMTH.getFloat("INDQT"),L_rstINMTH.getFloat("RSNVL")});
				L_rstINMTH.close();
			}
			

			M_strSQLQRY="Select INT_MKTTP,substr(INT_PRDCD,1,4) PRDCD,sum((ifnull(int_indqt,0)-ifnull(int_fcmqt,0))) INDQT,sum(INT_RSNVL) RSNVL from MR_INTRN,MR_INMST  where  IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP = '12' and IN_SBSCD in "+M_strSBSLS+" and INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT between '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0')  group by INT_MKTTP,substr(INT_PRDCD,1,4) order by substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstINMTH=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstINMTH!=null)
			{
				while(L_rstINMTH.next())
					L_hstINMTH_XP.put(L_rstINMTH.getString("PRDCD"),new float[]{L_rstINMTH.getFloat("INDQT"),L_rstINMTH.getFloat("RSNVL")});
				L_rstINMTH.close();
			}
			
			
			
			//System.out.println("003");
			//M_strSQLQRY="Select INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum(ifnull(INT_CFWQT,0)) CRFQT,sum((ifnull(INT_RSNVL,0)/(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)))*ifnull(INT_CFWQT,0)) RSNVL ,(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)) INT_INDQT from MR_INTRN,MR_INMST,CO_CDTRN  where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT < '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and ifnull(INT_CFWQT,0)>0 and CMT_CGMTP='SYS' and CMT_CGSTP='MR00ZON' and CMT_CODCD=IN_ZONCD group by INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4),INT_INDQT order by CMT_CHP02,substr(INT_PRDCD,1,4)";
			M_strSQLQRY="Select INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum(ifnull(INT_CFWQT,0)) CRFQT,sum((ifnull(INT_RSNVL,0)/(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)))*ifnull(INT_CFWQT,0)) RSNVL ,ifnull(int_indqt,0) INT_INDQT,ifnull(int_fcmqt,0) INT_FCMQT from MR_INTRN,MR_INMST,CO_CDTRN  where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT < '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and ifnull(INT_CFWQT,0)>0 and CMT_CGMTP='SYS' and CMT_CGSTP='MR00ZON' and CMT_CODCD=IN_ZONCD group by INT_MKTTP,CMT_CHP02,IN_SALTP,substr(INT_PRDCD,1,4),INT_INDQT,INT_FCMQT order by CMT_CHP02,substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			
			L_rstCRFQT=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstCRFQT!=null)
			{
				float [] L_flaTEMP=null;
				while(L_rstCRFQT.next())
				{
					if(L_hstINMTH_RG.containsKey(L_rstCRFQT.getString("CMT_CHP02")+"|"+L_rstCRFQT.getString("IN_SALTP")+"|"+L_rstCRFQT.getString("PRDCD")))
					{
						L_flaTEMP=(float[])L_hstINMTH_RG.get(L_rstCRFQT.getString("CMT_CHP02")+"|"+L_rstCRFQT.getString("IN_SALTP")+"|"+L_rstCRFQT.getString("PRDCD"));
					}
					else
						L_flaTEMP=new float[2];
					L_flaTEMP[0]+=L_rstCRFQT.getFloat("CRFQT");
					L_flaTEMP[1]+=L_rstCRFQT.getFloat("RSNVL");
					L_hstINMTH_RG.put(L_rstCRFQT.getString("CMT_CHP02")+"|"+L_rstCRFQT.getString("IN_SALTP")+"|"+L_rstCRFQT.getString("PRDCD"),L_flaTEMP);
				}
				L_rstCRFQT.close();
			}

			
			
			//System.out.println("004");
			//M_strSQLQRY="Select INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum(ifnull(INT_CFWQT,0)) CRFQT,sum((ifnull(INT_RSNVL,0)/(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)))*ifnull(INT_CFWQT,0)) RSNVL ,ifnull(int_indqt,0) int_indqt,ifnull(int_fcmqt,0) INT_FCMQT from MR_INTRN,MR_INMST  where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_SBSCD in "+M_strSBSLS+" and IN_CMPCD=INT_CMPCD and IN_MKTTP=INT_MKTTP and IN_INDNO=INT_INDNO and IN_BKGDT < '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and ifnull(INT_CFWQT,0)>0 group by INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4),(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)) INT_INDQT order by substr(INT_PRDCD,1,4)";
			M_strSQLQRY="Select INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4) PRDCD,sum(ifnull(INT_CFWQT,0)) CRFQT,sum((ifnull(INT_RSNVL,0)/(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)))*ifnull(INT_CFWQT,0)) RSNVL ,ifnull(int_indqt,0) int_indqt,ifnull(int_fcmqt,0) INT_FCMQT from MR_INTRN,MR_INMST  where IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP  not in ('04','05','12','16','21') and IN_SBSCD in "+M_strSBSLS+" and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_SBSCD in "+M_strSBSLS+" and IN_CMPCD=INT_CMPCD and IN_MKTTP=INT_MKTTP and IN_INDNO=INT_INDNO and IN_BKGDT < '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and ifnull(INT_CFWQT,0)>0 group by INT_MKTTP,IN_SALTP,substr(INT_PRDCD,1,4),int_indqt,INT_FCMQT order by substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			
			L_rstCRFQT=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstCRFQT!=null)
			{
				float [] L_flaTEMP=null;
				while(L_rstCRFQT.next())
				{
					if(L_hstINMTH_AI.containsKey(L_rstCRFQT.getString("IN_SALTP")+"|"+L_rstCRFQT.getString("PRDCD")))
					{
						L_flaTEMP=(float[])L_hstINMTH_AI.get(L_rstCRFQT.getString("IN_SALTP")+"|"+L_rstCRFQT.getString("PRDCD"));
					}
					else
						L_flaTEMP=new float[2];
					L_flaTEMP[0]+=L_rstCRFQT.getFloat("CRFQT");
					L_flaTEMP[1]+=L_rstCRFQT.getFloat("RSNVL");
					L_hstINMTH_AI.put(L_rstCRFQT.getString("IN_SALTP")+"|"+L_rstCRFQT.getString("PRDCD"),L_flaTEMP);
				}
				L_rstCRFQT.close();
			}

			
			//M_strSQLQRY="Select INT_MKTTP,substr(INT_PRDCD,1,4) PRDCD,sum(ifnull(INT_CFWQT,0)) CRFQT,sum((ifnull(INT_RSNVL,0)/(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)))*ifnull(INT_CFWQT,0)) RSNVL ,(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)) INT_INDQT from MR_INTRN,MR_INMST  where  IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP = '12' and IN_SBSCD in "+M_strSBSLS+" and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT < '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and ifnull(INT_CFWQT,0)>0 group by INT_MKTTP,substr(INT_PRDCD,1,4),INT_INDQT order by substr(INT_PRDCD,1,4)";
			M_strSQLQRY="Select INT_MKTTP,substr(INT_PRDCD,1,4) PRDCD,sum(ifnull(INT_CFWQT,0)) CRFQT,sum((ifnull(INT_RSNVL,0)/(ifnull(int_indqt,0)-ifnull(int_fcmqt,0)))*ifnull(INT_CFWQT,0)) RSNVL ,ifnull(int_indqt,0) INT_INDQT,ifnull(int_fcmqt,0) INT_FCMQT from MR_INTRN,MR_INMST  where  IN_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IN_SALTP = '12' and IN_SBSCD in "+M_strSBSLS+" and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_SBSCD in "+M_strSBSLS+" and IN_MKTTP=INT_MKTTP and IN_CMPCD=INT_CMPCD and IN_INDNO=INT_INDNO and IN_BKGDT < '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and INT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND INT_STSFL not in ('X','0') and ifnull(INT_CFWQT,0)>0 group by INT_MKTTP,substr(INT_PRDCD,1,4),INT_INDQT,INT_FCMQT order by substr(INT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			
			L_rstCRFQT=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstCRFQT!=null)
			{
				float [] L_flaTEMP=null;
				while(L_rstCRFQT.next())
				{
					if(L_hstINMTH_XP.containsKey(L_rstCRFQT.getString("PRDCD")))
					{
						L_flaTEMP=(float[])L_hstINMTH_XP.get(L_rstCRFQT.getString("PRDCD"));
					}
					else
						L_flaTEMP=new float[2];
					L_flaTEMP[0]+=L_rstCRFQT.getFloat("CRFQT");
					L_flaTEMP[1]+=L_rstCRFQT.getFloat("RSNVL");
					L_hstINMTH_XP.put(L_rstCRFQT.getString("PRDCD"),L_flaTEMP);
				}
				L_rstCRFQT.close();
			}
			
			
			//System.out.println("005");
			M_strSQLQRY="Select IVT_MKTTP,CMT_CHP02,IVT_SALTP,substr(IVT_PRDCD,1,4) PRDCD,sum(IVT_INVQT) INVQT,sum(IVT_RSNVL) RSNVL from MR_IVTRN,CO_CDTRN  where IVT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IVT_SALTP  not in ('04','05','12','16','21') and IVT_SBSCD in "+M_strSBSLS+" and date(IVT_INVDT)='"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and IVT_STSFL = 'D' and CMT_CGMTP='SYS' and CMT_CGSTP='MR00ZON' and CMT_CODCD=IVT_ZONCD group by IVT_MKTTP,CMT_CHP02,IVT_SALTP,substr(IVT_PRDCD,1,4) order by CMT_CHP02,substr(IVT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstIVDAY=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstIVDAY!=null)
			{
				while(L_rstIVDAY.next())
				{
					L_hstIVDAY_RG.put(L_rstIVDAY.getString("CMT_CHP02")+"|"+L_rstIVDAY.getString("IVT_SALTP")+"|"+L_rstIVDAY.getString("PRDCD"),new float[]{L_rstIVDAY.getFloat("INVQT"),L_rstIVDAY.getFloat("RSNVL")});
				}
				L_rstIVDAY.close();
			}


			//System.out.println("006");
			M_strSQLQRY="Select IVT_MKTTP,IVT_SALTP,substr(IVT_PRDCD,1,4) PRDCD,sum(IVT_INVQT) INVQT,sum(IVT_RSNVL) RSNVL from MR_IVTRN  where IVT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IVT_SALTP  not in ('04','05','12','16','21') and IVT_SBSCD in "+M_strSBSLS+" and date(IVT_INVDT)='"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and IVT_STSFL = 'D' group by IVT_MKTTP,IVT_SALTP,substr(IVT_PRDCD,1,4) order by substr(IVT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstIVDAY=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstIVDAY!=null)
			{
				while(L_rstIVDAY.next())
				{
					L_hstIVDAY_AI.put(L_rstIVDAY.getString("IVT_SALTP")+"|"+L_rstIVDAY.getString("PRDCD"),new float[]{L_rstIVDAY.getFloat("INVQT"),L_rstIVDAY.getFloat("RSNVL")});
				}
				L_rstIVDAY.close();
			}
			

			M_strSQLQRY="Select IVT_MKTTP,substr(IVT_PRDCD,1,4) PRDCD,sum(IVT_INVQT) INVQT,sum(IVT_RSNVL) RSNVL from MR_IVTRN  where  IVT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IVT_SALTP = '12' and IVT_SBSCD in "+M_strSBSLS+" and date(IVT_INVDT)='"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and IVT_STSFL = 'D' group by IVT_MKTTP,substr(IVT_PRDCD,1,4) order by substr(IVT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstIVDAY=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstIVDAY!=null)
			{
				while(L_rstIVDAY.next())
				{
					L_hstIVDAY_XP.put(L_rstIVDAY.getString("PRDCD"),new float[]{L_rstIVDAY.getFloat("INVQT"),L_rstIVDAY.getFloat("RSNVL")});
				}
				L_rstIVDAY.close();
			}
			
			
			//System.out.println("007");
			M_strSQLQRY="Select IVT_MKTTP,CMT_CHP02,IVT_SALTP,substr(IVT_PRDCD,1,4) PRDCD,sum(IVT_INVQT) INVQT,sum(IVT_RSNVL) RSNVL from MR_IVTRN,CO_CDTRN  where IVT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IVT_SALTP  not in ('04','05','12','16','21') and IVT_SBSCD in "+M_strSBSLS+" and date(IVT_INVDT) between '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and IVT_STSFL ='D' and CMT_CGMTP='SYS' and CMT_CGSTP='MR00ZON' and CMT_CODCD=IVT_ZONCD group by IVT_MKTTP,CMT_CHP02,IVT_SALTP,substr(IVT_PRDCD,1,4) order by CMT_CHP02,substr(IVT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstIVMTH=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstIVMTH!=null)
			{
				while(L_rstIVMTH.next())
					L_hstIVMTH_RG.put(L_rstIVMTH.getString("CMT_CHP02")+"|"+L_rstIVMTH.getString("IVT_SALTP")+"|"+L_rstIVMTH.getString("PRDCD"),new float[]{L_rstIVMTH.getFloat("INVQT"),L_rstIVMTH.getFloat("RSNVL")});
				L_rstIVMTH.close();
			}

			//System.out.println("008");
			M_strSQLQRY="Select IVT_MKTTP,IVT_SALTP,substr(IVT_PRDCD,1,4) PRDCD,sum(IVT_INVQT) INVQT,sum(IVT_RSNVL) RSNVL from MR_IVTRN  where IVT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IVT_SALTP  not in ('04','05','12','16','21') and IVT_SBSCD in "+M_strSBSLS+" and date(IVT_INVDT) between '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and IVT_STSFL ='D' group by IVT_MKTTP,IVT_SALTP,substr(IVT_PRDCD,1,4) order by substr(IVT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstIVMTH=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstIVMTH!=null)
			{
				while(L_rstIVMTH.next())
					L_hstIVMTH_AI.put(L_rstIVMTH.getString("IVT_SALTP")+"|"+L_rstIVMTH.getString("PRDCD"),new float[]{L_rstIVMTH.getFloat("INVQT"),L_rstIVMTH.getFloat("RSNVL")});
				L_rstIVMTH.close();
			}

			M_strSQLQRY="Select IVT_MKTTP,substr(IVT_PRDCD,1,4) PRDCD,sum(IVT_INVQT) INVQT,sum(IVT_RSNVL) RSNVL from MR_IVTRN  where IVT_CMPCD='"+cl_dat.M_strCMPCD_pbst+"' AND IVT_SALTP = '12' and IVT_SBSCD in "+M_strSBSLS+" and date(IVT_INVDT) between '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtFMDAT.getText()))+"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' and IVT_STSFL ='D' group by IVT_MKTTP,substr(IVT_PRDCD,1,4) order by substr(IVT_PRDCD,1,4)";
			//System.out.println(M_strSQLQRY);
			L_rstIVMTH=cl_dat.exeSQLQRY0(M_strSQLQRY);
			if(L_rstIVMTH!=null)
			{
				while(L_rstIVMTH.next())
					L_hstIVMTH_XP.put(L_rstIVMTH.getString("PRDCD"),new float[]{L_rstIVMTH.getFloat("INVQT"),L_rstIVMTH.getFloat("RSNVL")});
				L_rstIVMTH.close();
			}
			
			
			File L_filREPORT=new File(cl_dat.M_strREPSTR_pbst+"mr_rprsn."+(M_rdbTEXT.isSelected() ? "doc" : "htm"));
			FileOutputStream L_fosREPORT=new FileOutputStream(L_filREPORT);
			dosREPORT=new DataOutputStream(L_fosREPORT);
			//System.out.println("file created "+cl_dat.M_strREPSTR_pbst+"mr_rprsn."+(M_rdbTEXT.isSelected() ? "doc" : "htm"));
			prnFMTCHR(dosREPORT,"M_strCPI17");
			prnHEADR();
			for(int z=0;z<5;z++)
			{
				
				if(z==0)
				{
					setTXCLR(dosREPORT,Color.red);
					dosREPORT.writeBytes(padSTRING('R',"West/Central",50));
					setTXCLR(dosREPORT,Color.black);
					crtCELLS(dosREPORT,intCOLCT_fn+1);
					crtNWLIN(dosREPORT);
				}
				else if(z==1)
				{
					if(L_flaTOTAL1[0]>0||L_flaTOTAL1[1]>0||L_flaTOTAL1[2]>0||L_flaTOTAL1[3]>0||L_flaTOTAL1[4]>0||L_flaTOTAL1[5]>0||L_flaTOTAL1[6]>0||L_flaTOTAL1[7]>0)
					{
						setTXCLR(dosREPORT,Color.red);
						dosREPORT.writeBytes(padSTRING('R',"TOTAL W. & C.",26));
						dspTOTAL(L_flaTOTAL1);
						setTXCLR(dosREPORT,Color.black);
						L_flaTOTAL1=new float[intCOLCT_fn];
					}
					setTXCLR(dosREPORT,Color.red);
					dosREPORT.writeBytes(padSTRING('R',"North/South/East",50));
					setTXCLR(dosREPORT,Color.black);
					crtCELLS(dosREPORT,intCOLCT_fn+1);
					crtNWLIN(dosREPORT);
				}
				
				else if(z==2)
				{
					if(L_flaTOTAL1[0]>0||L_flaTOTAL1[1]>0||L_flaTOTAL1[2]>0||L_flaTOTAL1[3]>0||L_flaTOTAL1[4]>0||L_flaTOTAL1[5]>0||L_flaTOTAL1[6]>0||L_flaTOTAL1[7]>0)
					{
						setTXCLR(dosREPORT,Color.red);
						dosREPORT.writeBytes(padSTRING('R',"TOTAL N,S & E",26));
						dspTOTAL(L_flaTOTAL1);
						setTXCLR(dosREPORT,Color.black);
					}
					
				}

				dspSALTP_RG(z);				
				
			}
			prnFMTCHR(dosREPORT,M_strEJT);
			M_intLINNO=1;
			prnHEADR();

			L_flaTOTAL=new float[intCOLCT_fn];
			L_flaTEMP=new float[intCOLCT_fn];
			L_flaTOTAL1=new float[intCOLCT_fn];
			L_flaTOTAL2=new float[intCOLCT_fn];
			//flaGPTOT=new float[intCOLCT_fn];
			//flaHITOT=new float[intCOLCT_fn];
			setTXCLR(dosREPORT,Color.red);
			dosREPORT.writeBytes(padSTRING('R',"ALL INDIA",50));
			setTXCLR(dosREPORT,Color.black);
			crtCELLS(dosREPORT,intCOLCT_fn+1);
			crtNWLIN(dosREPORT);
			for(int z=0;z<2;z++)
			{
				dspSALTP_AI(z);
			}
			if(L_flaTOTAL1[0]>0||L_flaTOTAL1[1]>0||L_flaTOTAL1[2]>0||L_flaTOTAL1[3]>0||L_flaTOTAL1[4]>0||L_flaTOTAL1[5]>0||L_flaTOTAL1[6]>0||L_flaTOTAL1[7]>0)
			{
				setTXCLR(dosREPORT,Color.red);
				dosREPORT.writeBytes(padSTRING('R',"TOTAL ALL INDIA",26));
				dspTOTAL(L_flaTOTAL1);
				setTXCLR(dosREPORT,Color.black);
			}

			prnFMTCHR(dosREPORT,M_strEJT);
			M_intLINNO=1;
			prnHEADR();
			L_flaTOTAL=new float[intCOLCT_fn];
			L_flaTEMP=new float[intCOLCT_fn];
			L_flaTOTAL1=new float[intCOLCT_fn];
			L_flaTOTAL2=new float[intCOLCT_fn];
			setTXCLR(dosREPORT,Color.red);
			dosREPORT.writeBytes(padSTRING('R',"EXPORT",50));
			setTXCLR(dosREPORT,Color.black);
			crtCELLS(dosREPORT,intCOLCT_fn+1);
			crtNWLIN(dosREPORT);
			//for(int z=0;z<2;z++)
			//{
				dspSALTP_XP();
			//}
			if(L_flaTOTAL1[0]>0||L_flaTOTAL1[1]>0||L_flaTOTAL1[2]>0||L_flaTOTAL1[3]>0||L_flaTOTAL1[4]>0||L_flaTOTAL1[5]>0||L_flaTOTAL1[6]>0||L_flaTOTAL1[7]>0)
			{
				setTXCLR(dosREPORT,Color.red);
				dosREPORT.writeBytes(padSTRING('R',"TOTAL EXPORT",26));
				dspTOTAL(L_flaTOTAL1);
				setTXCLR(dosREPORT,Color.black);
			}

			dosREPORT.close();
			
			if(cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPSCN_pbst) || (M_rdbHTML.isSelected() && cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPPRN_pbst)))
			{//DISPLAY HTML REPORT IN BROWSER
					Runtime r = Runtime.getRuntime();
					Process p = null;
					String L_strDOCEXE = "c:\\windows\\wordpad.exe";
					String L_strDOCFIL = cl_dat.M_strREPSTR_pbst+"mr_rprsn.doc";
					if(M_rdbHTML.isSelected())
					{
						L_strDOCEXE = "c:\\program files\\internet explorer\\iexplore.exe";
						L_strDOCFIL = cl_dat.M_strREPSTR_pbst+"mr_rprsn.htm";
					}
					//if(chkSELFML.isSelected())
					//{
					//	String L_strEML = "";
					//	cl_eml ocl_eml = new cl_eml();
					//	M_strSQLQRY = "Select US_EMLRF from SA_USMST WHERE US_USRCD ='"+cl_dat.M_strUSRCD_pbst+"'";
					//	M_rstRSSET = cl_dat.exeSQLQRY(M_strSQLQRY);
					//	if(M_rstRSSET != null && M_rstRSSET.next())
					//	{
					//		L_strEML = M_rstRSSET.getString("US_EMLRF");
					//		if(L_strEML.length() >0)
					//			ocl_eml.sendfile(L_strEML,L_strDOCFIL,"Net sales realisation summary","Net sales realisation summary");
					//	}
					//}
 					
					p  = r.exec(L_strDOCEXE+" "+L_strDOCFIL); 
			}
		//PRINT TO PRINTER IN PRINT OPTION IN TEXT FORMAT
			else if(M_rdbTEXT.isSelected() && cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPPRN_pbst))
				doPRINT(cl_dat.M_strREPSTR_pbst+"mr_rprsn.doc");
			else if(cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPEML_pbst))
			//E_MAIL THE RESPECTIVE FILE TO RECEIPENTS, ONE BY ONE
				for(int i=0;i<M_cmbDESTN.getItemCount();i++)
					((cl_eml)Class.forName("cl_eml").newInstance()).sendfile(M_cmbDESTN.getItemAt(i).toString(),cl_dat.M_strREPSTR_pbst+"mr_rprsn."+(M_rdbTEXT.isSelected() ? "doc" : "htm"),"Net Sales Realisation for the period from "+M_txtFMDAT.getText()+" to "+M_txtTODAT.getText(),"");
			setMSG("Report Completed ..",'N');
			
		}catch(Exception e)
		{setMSG(e,"Child.exePRINT");}
	}
	
	//Displaying Sale Type + Product Group level records
	private void dspSALTP_RG(int z)
	{
		try
		{
			for(int i=0;i<vtrSALCD.size();i++)
			{
				// Region Level printing for Sale Type detail
				if(i>0 && z<2)//&&(L_flaTOTAL2[0]>0||L_flaTOTAL2[1]>0||L_flaTOTAL2[2]>0||L_flaTOTAL2[3]>0||L_flaTOTAL2[4]>0||L_flaTOTAL2[5]>0||L_flaTOTAL2[6]>0||L_flaTOTAL2[7]>0))
					dspSALTP_TOT();
						
			//TO AVOID DUPLICATION OFF HEADING EXPORT AS IT IS SALE TYPE AS WELL AS ZONE	
				if(z<2 && !vtrSALDS.elementAt(i).toString().equalsIgnoreCase("EXPORT"))
				{
					setTXCLR(dosREPORT,Color.blue);
					dosREPORT.writeBytes("   "+padSTRING('R',(M_rdbHTML.isSelected() ? " " : "")+vtrSALDS.elementAt(i).toString(),50));
					setTXCLR(dosREPORT,Color.black);
					crtCELLS(dosREPORT,intCOLCT_fn+1);
					crtNWLIN(dosREPORT);
							
				}
				strSALRF=vtrSALDS.elementAt(i).toString();
				L_flaTEMP=dspDATA("0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|",vtrPS1CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL PS : ",20));
					//System.out.println("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL PS : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
						L_flaPSTOT[j]+=L_flaTEMP[j];
					}
							
					dspTOTAL(L_flaTOTAL);
					setTXCLR(dosREPORT,Color.black);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
						
				L_flaTEMP=dspDATA("0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|",vtrPS2CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL SPS : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
						L_flaSPTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					setTXCLR(dosREPORT,Color.black);

					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
				//System.out.println("Calling "+"0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|");
				L_flaTEMP=dspDATA("0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|",vtrPS3CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL M.B.: ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
				L_flaTEMP=dspDATA("0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|",vtrPS4CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL WOOD PROFILE : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
						
			}
			if(z<2)
				dspSALTP_TOT();
		}catch(Exception e)
		{setMSG(e,"dspSALTP_RG");}
	}


	
	private void dspSALTP_TOT()
	{
		try
		{
				setTXCLR(dosREPORT,Color.blue);
				prnFMTCHR(dosREPORT,"M_strCPI17");
				dosREPORT.writeBytes("   "+padSTRING('R',(M_rdbHTML.isSelected() ? "" : "")+" TOTAL "+(strSALRF.equalsIgnoreCase("DEEMED EXPORT") ? "D. E." : strSALRF),23));
				//System.out.println("   "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL "+strSALRF,23));
				for(int j=1;j<L_flaTOTAL2.length;j=j+2)
				{
					if(strSALRF.equalsIgnoreCase("DOMESTIC"))
					{
						L_flaDMTOT[j-1]+=L_flaTOTAL2[j-1];
						L_flaDMTOT[j]+=L_flaTOTAL2[j];
					}
					else if(strSALRF.equalsIgnoreCase("DEEMED EXPORT"))
					{
						L_flaDETOT[j-1]+=L_flaTOTAL2[j-1];
						L_flaDETOT[j]+=L_flaTOTAL2[j];
					}
				}
				dspTOTAL(L_flaTOTAL2);
				setTXCLR(dosREPORT,Color.black);
				L_flaTOTAL2=new float[intCOLCT_fn];
		
		}catch(Exception e)
		{setMSG(e,"dspSALTP_TOT");}
	}
	
	
	//Displaying Sale Type + Product Group level records All India
	private void dspSALTP_AI(int z)
	{
		try
		{
			for(int i=0;i<vtrSALCD.size();i++)
			{
				if(i>0 && z<2)
				{
					dspSALTP_TOT();
					//setTXCLR(dosREPORT,Color.blue);
					//prnFMTCHR(dosREPORT,"M_strCPI17");
					//dosREPORT.writeBytes("   "+padSTRING('R',(M_rdbHTML.isSelected() ? "" : "")+" TOTAL "+(strSALRF.equalsIgnoreCase("DEEMED EXPORT") ? "D. E." : strSALRF),23));
					// //System.out.println("   "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL "+strSALRF,23));
					//for(int j=1;j<L_flaTOTAL2.length;j=j+2)
					//{
					//	if(strSALRF.equalsIgnoreCase("DOMESTIC"))
					//	{
					//		L_flaDMTOT[j-1]+=L_flaTOTAL2[j-1];
					//		L_flaDMTOT[j]+=L_flaTOTAL2[j];
					//	}
					//	else if(strSALRF.equalsIgnoreCase("DEEMED EXPORT"))
					//	{
					//		L_flaDETOT[j-1]+=L_flaTOTAL2[j-1];
					//		L_flaDETOT[j]+=L_flaTOTAL2[j];
					//	}
					//}
					//dspTOTAL(L_flaTOTAL2);
					//setTXCLR(dosREPORT,Color.black);
					//L_flaTOTAL2=new float[intCOLCT_fn];
				}
							
				//TO AVOID DUPLICATION OFF HEADING EXPORT AS IT IS SALE TYPE AS WELL AS ZONE	
				if(z<1 && !vtrSALDS.elementAt(i).toString().equalsIgnoreCase("EXPORT"))
				{
					setTXCLR(dosREPORT,Color.blue);
					dosREPORT.writeBytes("   "+padSTRING('R',(M_rdbHTML.isSelected() ? " " : "")+vtrSALDS.elementAt(i).toString(),50));
					setTXCLR(dosREPORT,Color.black);
					crtCELLS(dosREPORT,intCOLCT_fn+1);
					crtNWLIN(dosREPORT);
							
				}
				strSALRF=vtrSALDS.elementAt(i).toString();
				if(z>0)
					return;
				L_flaTEMP=dspDATA_AI(vtrSALCD.elementAt(i)+"|",vtrPS1CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL PS : ",20));
					//System.out.println("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL PS : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
						L_flaPSTOT[j]+=L_flaTEMP[j];
					}
							
					dspTOTAL(L_flaTOTAL);
					setTXCLR(dosREPORT,Color.black);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
						
				L_flaTEMP=dspDATA_AI(vtrSALCD.elementAt(i)+"|",vtrPS2CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL SPS : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
						L_flaSPTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					setTXCLR(dosREPORT,Color.black);

					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
				//System.out.println("Calling "+"0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|");
				L_flaTEMP=dspDATA_AI(vtrSALCD.elementAt(i)+"|",vtrPS3CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL M.B. : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
				L_flaTEMP=dspDATA_AI(vtrSALCD.elementAt(i)+"|",vtrPS4CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL WOOD PROFILE : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
						
			}
			if(z<2)
				dspSALTP_TOT();
		
		}catch(Exception e)
		{setMSG(e,"dspSALTP_AI");}
	}
	

	//Displaying  Product Group level detail for Export
	private void dspSALTP_XP()
	{
		try
		{
				L_flaTEMP=dspDATA_XP(vtrPS1CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL PS : ",20));
					//System.out.println("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL PS : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
						L_flaPSTOT[j]+=L_flaTEMP[j];
					}
							
					dspTOTAL(L_flaTOTAL);
					setTXCLR(dosREPORT,Color.black);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
						
				L_flaTEMP=dspDATA_XP(vtrPS2CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL SPS : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
						L_flaSPTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					setTXCLR(dosREPORT,Color.black);

					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
				//System.out.println("Calling "+"0"+Integer.toString(z+1)+"|"+vtrSALCD.elementAt(i)+"|");
				L_flaTEMP=dspDATA_XP(vtrPS3CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL M.B. : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
				L_flaTEMP=dspDATA_XP(vtrPS4CD);
				if(L_flaTEMP!=null)
				{
					setTXCLR(dosREPORT,Color.green);
					dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK : "")+" TOTAL WOOD PROFILE : ",20));
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						L_flaTOTAL[j]=L_flaTEMP[j]+L_flaTOTAL[j];
						L_flaTOTAL1[j]+=L_flaTEMP[j];
						L_flaTOTAL2[j]+=L_flaTEMP[j];
						L_flaGRTOT[j]+=L_flaTEMP[j];
					}
					dspTOTAL(L_flaTOTAL);
					L_flaTEMP=null;
					L_flaTOTAL=new float[intCOLCT_fn];
				}
		}catch(Exception e)
		{setMSG(e,"dspSALTP_XP");}
	}
	
	
	
	
	private float[] dspDATA(String P_strKEY, Vector<String> P_vtrPGRCD) throws Exception
	{
		float L_fltINDQT=0,L_fltINDVL=0,L_fltINMQT=0,L_fltINMVL=0,L_fltIVDQT=0,L_fltIVDVL=0,L_fltIVMQT=0,L_fltIVMVL=0;
		float[] L_flaTEMP=new float[2];
		float L_fltPDGQT=0;
		Vector<String> L_vtrTEMP=null;
		for(int i=0;i<P_vtrPGRCD.size();i++)
		{
			if(	L_hstINDAY_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i))||
				L_hstINMTH_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i))||
				L_hstIVDAY_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i))||
				L_hstIVMTH_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
			{
				
				if(P_vtrPGRCD==vtrPS1CD)
					L_vtrTEMP=vtrPS1DS;
				else if(P_vtrPGRCD==vtrPS2CD)
					L_vtrTEMP=vtrPS2DS;	
				else if(P_vtrPGRCD==vtrPS3CD)
					L_vtrTEMP=vtrPS3DS;	
				else if(P_vtrPGRCD==vtrPS4CD)
					L_vtrTEMP=vtrPS4DS;	
				dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK+" " : "")+L_vtrTEMP.elementAt(i).toString(),20));
				//System.out.println(L_vtrTEMP.elementAt(i));
				if(L_hstINDAY_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=(float[])L_hstINDAY_RG.get(P_strKEY+P_vtrPGRCD.elementAt(i));
					L_fltINDQT+=L_flaTEMP[0];
					L_fltINDVL+=L_flaTEMP[1];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
					if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("HIPS"))
					{
						flaHITOT[0]+=L_flaTEMP[0];
						flaHITOT[1]+=L_flaTEMP[1];
					}
					else if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("GPPS"))
					{
						flaGPTOT[0]+=L_flaTEMP[0];
						flaGPTOT[1]+=L_flaTEMP[1];
					}
//					System.out.println(setNumberFormat(L_flaTEMP[0],3)+" "+setNumberFormat(L_flaTEMP[1],3)+" "+setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],3));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
				
				if(L_hstIVDAY_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=(float[])L_hstIVDAY_RG.get(P_strKEY+P_vtrPGRCD.elementAt(i));
					L_fltIVDQT+=L_flaTEMP[0];
					L_fltIVDVL+=L_flaTEMP[1];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
					if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("HIPS"))
					{
						flaHITOT[2]+=L_flaTEMP[0];
						flaHITOT[3]+=L_flaTEMP[1];
					}
					else if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("GPPS"))
					{
						flaGPTOT[2]+=L_flaTEMP[0];
						flaGPTOT[3]+=L_flaTEMP[1];
					}
//					System.out.println(setNumberFormat(L_flaTEMP[0],3)+" "+setNumberFormat(L_flaTEMP[1],3)+" "+setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],3));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
				if(L_hstINMTH_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=((float[])L_hstINMTH_RG.get(P_strKEY+P_vtrPGRCD.elementAt(i)));
					L_fltINMQT+=L_flaTEMP[0];
					L_fltINMVL+=L_flaTEMP[1];
					L_fltPDGQT=L_flaTEMP[0];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
					if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("HIPS"))
					{
						flaHITOT[4]+=L_flaTEMP[0];
						flaHITOT[5]+=L_flaTEMP[1];
					}
					else if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("GPPS"))
					{
						flaGPTOT[4]+=L_flaTEMP[0];
						flaGPTOT[5]+=L_flaTEMP[1];
					}
//					System.out.println(setNumberFormat(L_flaTEMP[0],3)+" "+setNumberFormat(L_flaTEMP[1],3)+" "+setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],3));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}

				if(L_hstIVMTH_RG.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=((float[])L_hstIVMTH_RG.get(P_strKEY+P_vtrPGRCD.elementAt(i)));
					L_fltIVMQT+=L_flaTEMP[0];
					L_fltIVMVL+=L_flaTEMP[1];
					L_fltPDGQT-=L_flaTEMP[0];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
					if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("HIPS"))
					{
						flaHITOT[6]+=L_flaTEMP[0];
						flaHITOT[7]+=L_flaTEMP[1];
					}
					else if(L_vtrTEMP.elementAt(i).toString().equalsIgnoreCase("GPPS"))
					{
						flaGPTOT[6]+=L_flaTEMP[0];
						flaGPTOT[7]+=L_flaTEMP[1];
					}
//					System.out.println(setNumberFormat(L_flaTEMP[0],3)+" "+setNumberFormat(L_flaTEMP[1],3)+" "+setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],3));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
			//Writing PENDING QTY.
				dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_fltPDGQT,3),13));
				L_fltPDGQT=0;
				crtNWLIN(dosREPORT);
			}
		}
		if(L_fltINDQT>0||L_fltINDVL>0||L_fltINMQT>0||L_fltINMVL>0||L_fltIVDQT>0||L_fltIVDVL>0||L_fltIVMQT>0||L_fltIVMVL>0)
			return new float[]{L_fltINDQT,L_fltINDVL,L_fltIVDQT,L_fltIVDVL,L_fltINMQT,L_fltINMVL,L_fltIVMQT,L_fltIVMVL};
		else
			return null;
			
	}


	private float[] dspDATA_AI(String P_strKEY, Vector<String> P_vtrPGRCD) throws Exception
	{
		float L_fltINDQT=0,L_fltINDVL=0,L_fltINMQT=0,L_fltINMVL=0,L_fltIVDQT=0,L_fltIVDVL=0,L_fltIVMQT=0,L_fltIVMVL=0;
		float[] L_flaTEMP=new float[2];
		float L_fltPDGQT=0;
		Vector<String> L_vtrTEMP=null;
		for(int i=0;i<P_vtrPGRCD.size();i++)
		{
			if(	L_hstINDAY_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i))||
				L_hstINMTH_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i))||
				L_hstIVDAY_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i))||
				L_hstIVMTH_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
			{
				
				if(P_vtrPGRCD==vtrPS1CD)
					L_vtrTEMP=vtrPS1DS;
				else if(P_vtrPGRCD==vtrPS2CD)
					L_vtrTEMP=vtrPS2DS;	
				else if(P_vtrPGRCD==vtrPS3CD)
					L_vtrTEMP=vtrPS3DS;	
				else if(P_vtrPGRCD==vtrPS4CD)
					L_vtrTEMP=vtrPS4DS;	
				dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK+" " : "")+L_vtrTEMP.elementAt(i).toString(),20));
				//System.out.println(L_vtrTEMP.elementAt(i));
				if(L_hstINDAY_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=(float[])L_hstINDAY_AI.get(P_strKEY+P_vtrPGRCD.elementAt(i));
					L_fltINDQT+=L_flaTEMP[0];
					L_fltINDVL+=L_flaTEMP[1];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
				
				if(L_hstIVDAY_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=(float[])L_hstIVDAY_AI.get(P_strKEY+P_vtrPGRCD.elementAt(i));
					L_fltIVDQT+=L_flaTEMP[0];
					L_fltIVDVL+=L_flaTEMP[1];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
				if(L_hstINMTH_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=((float[])L_hstINMTH_AI.get(P_strKEY+P_vtrPGRCD.elementAt(i)));
					L_fltINMQT+=L_flaTEMP[0];
					L_fltINMVL+=L_flaTEMP[1];
					L_fltPDGQT=L_flaTEMP[0];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}

				if(L_hstIVMTH_AI.containsKey(P_strKEY+P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=((float[])L_hstIVMTH_AI.get(P_strKEY+P_vtrPGRCD.elementAt(i)));
					L_fltIVMQT+=L_flaTEMP[0];
					L_fltIVMVL+=L_flaTEMP[1];
					L_fltPDGQT-=L_flaTEMP[0];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
			//Writing PENDING QTY.
				dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_fltPDGQT,3),13));
				L_fltPDGQT=0;
				crtNWLIN(dosREPORT);
			}
		}
		if(L_fltINDQT>0||L_fltINDVL>0||L_fltINMQT>0||L_fltINMVL>0||L_fltIVDQT>0||L_fltIVDVL>0||L_fltIVMQT>0||L_fltIVMVL>0)
			return new float[]{L_fltINDQT,L_fltINDVL,L_fltIVDQT,L_fltIVDVL,L_fltINMQT,L_fltINMVL,L_fltIVMQT,L_fltIVMVL};
		else
			return null;
			
	}
	

	
	private float[] dspDATA_XP(Vector<String> P_vtrPGRCD) throws Exception
	{
		float L_fltINDQT=0,L_fltINDVL=0,L_fltINMQT=0,L_fltINMVL=0,L_fltIVDQT=0,L_fltIVDVL=0,L_fltIVMQT=0,L_fltIVMVL=0;
		float[] L_flaTEMP=new float[2];
		float L_fltPDGQT=0;
		Vector<String> L_vtrTEMP=null;
		for(int i=0;i<P_vtrPGRCD.size();i++)
		{
			if(	L_hstINDAY_XP.containsKey(P_vtrPGRCD.elementAt(i))||
				L_hstINMTH_XP.containsKey(P_vtrPGRCD.elementAt(i))||
				L_hstIVDAY_XP.containsKey(P_vtrPGRCD.elementAt(i))||
				L_hstIVMTH_XP.containsKey(P_vtrPGRCD.elementAt(i)))
			{
				
				if(P_vtrPGRCD==vtrPS1CD)
					L_vtrTEMP=vtrPS1DS;
				else if(P_vtrPGRCD==vtrPS2CD)
					L_vtrTEMP=vtrPS2DS;	
				else if(P_vtrPGRCD==vtrPS3CD)
					L_vtrTEMP=vtrPS3DS;	
				else if(P_vtrPGRCD==vtrPS4CD)
					L_vtrTEMP=vtrPS4DS;	
				dosREPORT.writeBytes("      "+padSTRING('R',(M_rdbHTML.isSelected() ? strBLANK+" " : "")+L_vtrTEMP.elementAt(i).toString(),20));
				//System.out.println(L_vtrTEMP.elementAt(i));
				if(L_hstINDAY_XP.containsKey(P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=(float[])L_hstINDAY_XP.get(P_vtrPGRCD.elementAt(i));
					L_fltINDQT+=L_flaTEMP[0];
					L_fltINDVL+=L_flaTEMP[1];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
				
				if(L_hstIVDAY_XP.containsKey(P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=(float[])L_hstIVDAY_XP.get(P_vtrPGRCD.elementAt(i));
					L_fltIVDQT+=L_flaTEMP[0];
					L_fltIVDVL+=L_flaTEMP[1];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
				if(L_hstINMTH_XP.containsKey(P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=((float[])L_hstINMTH_XP.get(P_vtrPGRCD.elementAt(i)));
					L_fltINMQT+=L_flaTEMP[0];
					L_fltINMVL+=L_flaTEMP[1];
					L_fltPDGQT=L_flaTEMP[0];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}

				if(L_hstIVMTH_XP.containsKey(P_vtrPGRCD.elementAt(i)))
				{
					L_flaTEMP=((float[])L_hstIVMTH_XP.get(P_vtrPGRCD.elementAt(i)));
					L_fltIVMQT+=L_flaTEMP[0];
					L_fltIVMVL+=L_flaTEMP[1];
					L_fltPDGQT-=L_flaTEMP[0];
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[0],3),13));
					dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_flaTEMP[1]/L_flaTEMP[0],2),13));
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('L',"-",13));
					dosREPORT.writeBytes(padSTRING('L',"-",13));
				}
			//Writing PENDING QTY.
				dosREPORT.writeBytes(padSTRING('L',setNumberFormat(L_fltPDGQT,3),13));
				L_fltPDGQT=0;
				crtNWLIN(dosREPORT);
			}
		}
		if(L_fltINDQT>0||L_fltINDVL>0||L_fltINMQT>0||L_fltINMVL>0||L_fltIVDQT>0||L_fltIVDVL>0||L_fltIVMQT>0||L_fltIVMVL>0)
			return new float[]{L_fltINDQT,L_fltINDVL,L_fltIVDQT,L_fltIVDVL,L_fltINMQT,L_fltINMVL,L_fltIVMQT,L_fltIVMVL};
		else
			return null;
			
	}
	
	
	
	private void dspTOTAL(float[] P_fltTOTAL) throws Exception
	{
		for(int j=1;j<P_fltTOTAL.length;j=j+2)
		{
			dosREPORT.writeBytes(padSTRING('L',setNumberFormat(P_fltTOTAL[j-1],3),13));
			dosREPORT.writeBytes(padSTRING('L',(P_fltTOTAL[j-1]>0 ? setNumberFormat(P_fltTOTAL[j]/P_fltTOTAL[j-1],2):"0.00"),13));
		}
		dosREPORT.writeBytes(padSTRING('L',setNumberFormat(P_fltTOTAL[4]-P_fltTOTAL[6],3),13));
		crtNWLIN(dosREPORT);
	}

	
	private void prnHEADR() throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			dosREPORT.writeBytes("<HTML><HEAD><STYLE TYPE=\"text/css\"> P.breakhere {page-break-before: always}</STYLE></HEAD>");
			dosREPORT.writeBytes("<BODY bgColor=ghostwhite><P><HR><TABLE border=0 cellPadding=0 cellSpacing=0  width=\"100%\"> <TR><TD><IMG src=\"spllogo_old.gif\" style=\"HEIGHT: 68px; LEFT: 0px; TOP: 0px; WIDTH: 68px\"></TD><TD><P align=left><STRONG><FONT face=Arial size=5>"+cl_dat.M_strCMPNM_pbst+"</FONT></STRONG></P><STRONG><FONT face=Arial size=4><p align=left> Region wise Net Sales Realisation </font><STRONG><FONT face=Arial size=3><p align=left> Period From "+M_txtFMDAT.getText()+" To "+M_txtTODAT.getText()+"</font> </TD><TD><p><FONT face=Arial size=2>Date : "+cl_dat.M_txtCLKDT_pbst.getText()+"</p><p><FONT face=Arial size=2>Page No. : "+Integer.toString(++M_intPAGNO)+"</P><TD> </TR></TABLE><HR><FONT face=\"Comic Sans MS\">");
		}
		else
		{
			prnFMTCHR(dosREPORT, M_strCPI10);
			prnFMTCHR(dosREPORT, M_strBOLD);	
			dosREPORT.writeBytes(padSTRING('R',cl_dat.M_strCMPNM_pbst,50));
			dosREPORT.writeBytes(padSTRING('R',"Date : "+cl_dat.M_txtCLKDT_pbst.getText(),30));
			crtNWLIN(dosREPORT);
			dosREPORT.writeBytes(padSTRING('R',"Regionwise Net Sales Realisation (Booking and Dispatchwise)",50));
			dosREPORT.writeBytes(padSTRING('R',"Date : "+Integer.toString(++M_intPAGNO),30));
			crtNWLIN(dosREPORT);
			crtHRLIN(dosREPORT,"-",80);
			prnFMTCHR(dosREPORT,M_strCPI17);
			
		}
		crtTBL(dosREPORT,true);
		setTXCLR(dosREPORT,Color.blue);
		dosREPORT.writeBytes(padSTRING('R',"Region/Sale Type/Product",26));
		dosREPORT.writeBytes(padSTRING('L',"Booking (Day)",13));
		dosREPORT.writeBytes(padSTRING('L',"N.B.R. (Day)",13));
		dosREPORT.writeBytes(padSTRING('L',"Dispatch (Day)",13));
		dosREPORT.writeBytes(padSTRING('L',"N.S.R. (Day)",13));
		dosREPORT.writeBytes(padSTRING('L',"Booking (Month)",13));
		dosREPORT.writeBytes(padSTRING('L',"N.B.R. (Month)",13));
		dosREPORT.writeBytes(padSTRING('L',"Dispatch (Month)",13));
		dosREPORT.writeBytes(padSTRING('L',"N.S.R. (Month)",13));
		dosREPORT.writeBytes(padSTRING('L',"Pending. Qty. (MT)",13));
		crtNWLIN(dosREPORT);
	}

	
	protected  void prnFMTCHR(DataOutputStream L_DOUT,String L_FMTSTR){		try{			if(L_FMTSTR.equals(M_strCPI10))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT Size = 6>");				else
				{					L_DOUT.writeChar(27);					L_DOUT.writeBytes("P");
				}			}			if(L_FMTSTR.equals(M_strCPI12))
			{
				intCOLCT=90;
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT  Size = 5>");				else
				{					L_DOUT.writeChar(27);					L_DOUT.writeBytes("M");
				}			}			if(L_FMTSTR.equals(M_strCPI17))			{				intCOLCT=145;
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT Size = 4>");				else
					L_DOUT.writeChar(15);
			}			if(L_FMTSTR.equals(M_strNOCPI17))			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("</FONT>");				else
					L_DOUT.writeChar(18);
			}			if(L_FMTSTR.equals(M_strBOLD))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<STRONG>");				else
				{					L_DOUT.writeChar(27);					L_DOUT.writeBytes("G");
				}			}			if(L_FMTSTR.equals(M_strNOBOLD))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("</STRONG>");				else
				{					L_DOUT.writeChar(27);					L_DOUT.writeBytes("H");
				}			}			if(L_FMTSTR.equals(M_strENH))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT Size = 5><STRONG>");				else
				{					L_DOUT.writeChar(27);					L_DOUT.writeBytes("W1");
				}			}			if(L_FMTSTR.equals(M_strNOENH))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("</STRONG></FONT >");				else
				{					L_DOUT.writeChar(27);					L_DOUT.writeBytes("W0");					L_DOUT.writeChar(27);					L_DOUT.writeBytes("F");
				}			}			if(L_FMTSTR.equals(M_strEJT))			{
				if(M_rdbHTML.isSelected())
				{					try{
							endTABLE(dosREPORT);
							dosREPORT.writeBytes(strPGBRK);
					}catch(Exception e)
					{setMSG(e,"Child.prnFMTCHR");}				}
				else
					L_DOUT.writeChar(12);
			}		}catch(IOException L_EX){			setMSG(L_EX,"prnFMTCHR");		}	}
	private void crtCELLS(DataOutputStream L_DOUT,int P_intCOLCT) throws Exception
	{
		if(M_rdbHTML.isSelected())
			L_DOUT.writeBytes("<td colspan="+Integer.toString(P_intCOLCT)+">&nbsp</td>");
	}
	private void crtTBL(DataOutputStream L_DOUT,boolean P_flgBORDR) throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			if(P_flgBORDR)
				L_DOUT.writeBytes("<p><TABLE border=1 borderColor=white borderColorDark=white borderColorLight=gray cellPadding=0 cellSpacing=0  width=\"100%\" align=center>");
			else
				L_DOUT.writeBytes("<p><TABLE border=0 borderColor=ghostwhite borderColorDark=ghostwhite borderColorLight=gostwhite cellPadding=0 cellSpacing=0 width=\"100%\"  align=center>");
			flgTBLDT=true;
		}
	}
	
	void crtNWLIN(DataOutputStream L_DOUT) throws Exception
	{
		if(M_rdbTEXT.isSelected())
		   L_DOUT.writeBytes("\n");
		else
		{
			if(flgTBLDT)
				L_DOUT.writeBytes("</TD></TR><TR>");
			else
				L_DOUT.writeBytes("</P><P>");
		}
		M_intLINNO++;
		if(M_intLINNO>40)
		{
			prnFMTCHR(dosREPORT,M_strEJT);
			M_intLINNO=1;
			prnHEADR();
//			prnRPFTR();
		}
	}
	
	private void endTABLE(DataOutputStream L_DOUT) throws Exception
	{
		if(M_rdbHTML.isSelected())
			L_DOUT.writeBytes("</TR></TABLE></P>");
		flgTBLDT=false;
	}
	
	protected  String padSTRING(char P_chrPADTP,String P_strSTRVL,int P_intPADLN)	{		String P_strTRNVL = "";		try		{			String L_STRSP = " ";			P_strSTRVL = P_strSTRVL.trim();			int L_STRLN = P_strSTRVL.length();			if(P_intPADLN <= L_STRLN && M_rdbTEXT.isSelected())			{				P_strSTRVL = P_strSTRVL.substring(0,P_intPADLN).trim();				L_STRLN = P_strSTRVL.length();				P_strTRNVL = P_strSTRVL;			}
			if(M_rdbHTML.isSelected())
			{
				if(P_chrPADTP=='C')
					P_strTRNVL="<p Align = center>"+strTXCLR+P_strSTRVL+"</font>"+"</P>";
				else if(P_chrPADTP=='R')
					P_strTRNVL="<p Align = left>"+strTXCLR+P_strSTRVL+"</font>"+"</P>";
				else if(P_chrPADTP=='L')
					P_strTRNVL="<p Align = right>"+strTXCLR+P_strSTRVL+"</font>"+"</P>";				if(flgTBLDT)					P_strTRNVL="<td>"+strTXCLR+P_strTRNVL+"</font>"+"</td>";
				return P_strTRNVL;
			}
			int L_STRDF = P_intPADLN - L_STRLN;			StringBuffer L_STRBUF;			switch(P_chrPADTP)			{				case 'C':
						L_STRDF = L_STRDF / 2;						L_STRBUF = new StringBuffer(L_STRDF);						for(int j = 0;j < L_STRBUF.capacity();j++)							L_STRBUF.insert(j,' ');						P_strTRNVL =  L_STRBUF+P_strSTRVL+L_STRBUF ;
					break;				case 'R':					L_STRBUF = new StringBuffer(L_STRDF);					for(int j = 0;j < L_STRBUF.capacity();j++)						L_STRBUF.insert(j,' ');					P_strTRNVL =  P_strSTRVL+L_STRBUF ;					break;				case 'L':					L_STRBUF = new StringBuffer(L_STRDF);					for(int j = 0;j < L_STRBUF.capacity();j++)						L_STRBUF.insert(j,' ');					P_strTRNVL =  L_STRBUF+P_strSTRVL ;					break;			}		}catch(Exception L_EX){			setMSG(L_EX,"padSTRING");		}		return P_strTRNVL;	}	/**Method to set Text color in HTML file<br>Has no effect in text format	 */
	void setTXCLR(DataOutputStream L_DOUT,Color P_clrCOLOR) throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			if(P_clrCOLOR.equals(Color.red))
				strTXCLR="<font Color=red>";
			else if(P_clrCOLOR.equals(Color.black))
				strTXCLR="<font Color=black>";
			else if(P_clrCOLOR.equals(Color.blue))
				strTXCLR="<font Color=blue>";
			else if(P_clrCOLOR.equals(Color.magenta))
				strTXCLR="<font Color=purple>";
			else if(P_clrCOLOR.equals(Color.green))
				strTXCLR="<font Color=green>";
		}
		else if(M_rdbTEXT.isSelected())
		{
			if(P_clrCOLOR.equals(Color.red))
				prnFMTCHR(L_DOUT,M_strBOLD);
			else if(P_clrCOLOR.equals(Color.black))
				prnFMTCHR(L_DOUT,M_strNOBOLD);
			else if(P_clrCOLOR.equals(Color.blue))
				prnFMTCHR(L_DOUT,M_strBOLD);
			else if(P_clrCOLOR.equals(Color.magenta))
				prnFMTCHR(L_DOUT,M_strBOLD);
			else if(P_clrCOLOR.equals(Color.green))
				prnFMTCHR(L_DOUT,M_strBOLD);
		}
	}
	
	void crtHRLIN(DataOutputStream L_DOUT,String P_strLNCHR,int P_intCHRCT) throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			if(!flgTBLDT)
				L_DOUT.writeBytes("<HR>");
		}
		else
			for(int i=0;i<P_intCHRCT;i++)
				L_DOUT.writeBytes(P_strLNCHR);
		crtNWLIN(L_DOUT);
	}
}