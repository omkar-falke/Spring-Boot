import java.awt.*;import java.awt.event.*;import java.sql.*;import java.util.Vector;import java.util.Date;//import cl_cust;import javax.swing.*;import javax.swing.table.*;import javax.swing.event.*;import java.io.*;import java.lang.*;import java.util.Properties;import java.util.*;public class mr_hkdfh extends cl_pbase{										/**	(txtCURDT) Current updation date */        private JTextField txtCURDT;  	/** (txtPRVDT) Previous updation date*/		private JTextField txtPRVDT;	/** (txtCURSS) Current Session*/		private JTextField txtCURSS;	/** (txtPRVSS) Previous session*/		private JTextField txtPRVSS;	/**(strCURDT) Current Updation Date*/        private String  strCURDT;		/**(strPRVDT) Previous updation date */		private String	strPRVDT;		/**(strCURSS) Current Updation session*/		private String	strCURSS;		/**(strPRVSS) Previous session*/		private String	strPRVSS;		/**(strFLSUFX) File Name suffix (wdXXXXXX)*/        private String  strFLSUFX;		/**(strKEYVL) Key value*/        private String  strKEYVL;		/**(strFLD01) */		private String	strFLD01;		/**(strFLD02) */		private String	strFLD02;		/**(strFLDTP) */		private String	strFLDTP;		/**(strINSSTR1) Inserion query string, Table columns*/        private String  strINSSTR1;		/**(strINSSTR2) Insertion query string, value part*/		private String	strINSSTR2;		/**(strUPDSTR)  Updation query string*/		private String	strUPDSTR;		/**(strWHRSTR)  Where string for Updation query*/		private String	strWHRSTR;		/**(strCNDSTR) Where Condition*/        private String  strCNDSTR;		/**(strCURFILE) Current File (transaction) under updation*/		private String  strCURFILE;		/**(strTRNTP)   Transaction type*/        private String  strTRNTP;		/**(strDOCNO)   Document No.*/		private String	strDOCNO;		/**(strREMDS)  Remark */		private String  strREMDS;		/**(strSTSFL)  Status*/		private String	strSTSFL;		/**(strLUSBY)  Last user*/		private String	strLUSBY;		/**(strLUPDT)  Last updation date*/		private String	strLUPDT;		/**(filWDFILE) WD file Name*/        private File	filWDFILE;		/**(intKEYSIZE) No.of array elements for Key Field*/        private int		intKEYSIZE;		/**(intVALSIZE) No. of elements for data fields*/		private int		intVALSIZE;		/**(intUPDCTR) Updation counter*/		private int		intUPDCTR;		/**(intRUNCTR) Running counter*/		private int		intRUNCTR;		/**(strPTHWD)  Path for WD file*/        private String strPTHWD = "c:\\reports\\";		/**(strEXEDIR)*/        //private String strEXEDIR = "w:\\asoft\\exec\\splerp\\";		/***/        String strEXEDIR = "W:\\asoft\\exec\\splerp2\\";		/**(strMKTTP)Market type*/        //String strEXEDIR = "f:\\data\\asoft\\exec\\splerp\\";		/**(strMKTTP)Market type*/        private String strMKTTP;		/**(strINDNO) Indent No.*/		private String strINDNO;		/**(strSBSCD) Sub-system code*/		private String strSBSCD;		/**(strSALTP) Sale type*/		private String strSALTP;		/**(strZONCD) Zone*/		private String strZONCD;		/**(strSALTP1) Sale type New version*/		private String strSALTP1;		/**(strDSRCD) Distributor code*/		private String strDSRCD;		/**(strCNSCD) Consignee code*/		private String strCNSCD;		/**(strZONCD1) Zone code New version*/		private String strZONCD1;		/**(strCGMTP) Code main group*/        private String strCGMTP;		/**(strCGSTP) Code sub-group*/		private String strCGSTP;		/**(strCODCD) Code*/		private String strCODCD;		/**(strCODDS) Code Description*/		private String strCODDS;		/**(strSHRDS) Short Description*/		private String strSHRDS;		/**(strCHP01) Char.para 01*/		private String strCHP01;		/**(strCHP02) Char.para 02*/		private String strCHP02;		/**(strNMP01) Numeric para 01*/		private String strNMP01;		/**(strNMP02) Numeric para 02*/		private String strNMP02;		/**(strCCSVL) Char.constant*/		private String strCCSVL;		/**(strNCSVL) Numeric constant*/		private String strNCSVL;		/**(strPRDCD) Product code*/        private String strPRDCD;		/**(strPRDDS) Product descr.*/		private String strPRDDS;		/**(strPKGTP) Package Type*/		private String strPKGTP;		/**(strCDCVL) Consinee credit discount*/		private String strCDCVL;		/**(strDDCVL) Distributor credit discount*/		private String strDDCVL;		/**(strTDCVL) Third party credit discount*/		private String strTDCVL;		/**(strTDCRF) Third party code*/		private String strTDCRF;		/**(strEXCRT) Excise rate*/		private String strEXCRT;		/**(strDORNO) D.O. No.*/        private String strDORNO;		/**(intPRMST_TOT) Total No. of elements in Prod.Master array*/        private int intPRMST_TOT = 1;			/**(intAE_PR_PRDCD) Product code element*/        private int intAE_PR_PRDCD = 0;			/**(intDOMST_TOT) No.of elements in DO Master array*/        private int intDOMST_TOT = 1;			/**(intAE_DO_INDNO) Ind.No. element*/        private int intAE_DO_INDNO = 0;			/**(intDOTRN_TOT) No. of elements in DOTRN */        private int intDOTRN_TOT = 1;			/**(intAE_DOT_PKGTP) Pkg.type element*/        private int intAE_DOT_PKGTP = 0;		/**(intINMST_TOT) Indent Master Elements*/        private int intINMST_TOT = 4;			/**(intAE_IN_SALTP) Sale Type element*/        private int intAE_IN_SALTP = 0;			/**(intAE_IN_ZONCD) Zone code element*/        private int intAE_IN_ZONCD = 1;			/**(intAE_IN_CNSCD) Cons.Code element*/        private int intAE_IN_CNSCD = 2;			/**(intAE_IN_DSRCD) Distr.code element*/        private int intAE_IN_DSRCD = 3;			/**(intINTRN_TOT) Indent Trans. Elements*/        private int intINTRN_TOT = 5;			/**(intAE_INT_CDCVL) Cons.Discount element*/        private int intAE_INT_CDCVL = 0;		/**(intAE_INT_DDCVL) Distr.Disc. element*/        private int intAE_INT_DDCVL = 1;		/**(intAE_INT_TDCVL) Third party Disc. element*/        private int intAE_INT_TDCVL = 2;		/**(intAE_INT_TDCRF) Third party code element*/        private int intAE_INT_TDCRF = 3;		/**(intAE_INT_EXCRT) Excise Rate*/        private int intAE_INT_EXCRT = 4;		/**(intCDTRN_TOT) Code Transaction Table Elements*/        private int intCDTRN_TOT = 8;			/**(intAE_CMT_CODDS) Code Description element*/        private int intAE_CMT_CODDS = 0;		/**(intAE_CMT_SHRDS) Short Description element*/        private int intAE_CMT_SHRDS = 1;		/**(intAE_CMT_CHP01) Char.para 01 element*/        private int intAE_CMT_CHP01 = 2;		/**(intAE_CMT_CHP02) Char.para 02 Element*/        private int intAE_CMT_CHP02 = 3;		/**(intAE_CMT_NMP01) Num.para 01 element*/        private int intAE_CMT_NMP01 = 4;		/**(intAE_CMT_NMP02) Num.para 02 element*/        private int intAE_CMT_NMP02 = 5;		/**(intAE_CMT_CCSVL) Char.const. element*/        private int intAE_CMT_CCSVL = 6;		/**(intAE_CMT_NCSVL) Num.const. element*/        private int intAE_CMT_NCSVL = 7;		/**(btnRUN1) Run button */        private JButton btnRUN1;				/**(rstL1RSLSET) additional result set*/        private ResultSet rstL1RSLSET;			/**(rstL3RSLSET) additional result set*/		private ResultSet rstL3RSLSET;			/**(stmSTBKA) Statement for Foxpro connection*/        private Statement stmSTBKA;				/**(stmSPBKQ) Statement for query*/		private Statement stmSPBKQ;				/**(stmSPBKQ1)Additional statement provision*/		private Statement stmSPBKQ1;		/**(conSPBKA) Connection for Foxpro*/        private Connection conSPBKA;		/**(oppOPTNPN) Option pane window*/		private JOptionPane oppOPTNPN;		/**(vtrKEY01) Key field vector for Target Table*/        private Vector<String> vtrKEY01;		/**(vtrKEY02) Key field vector for Source Table*/		private Vector<String> vtrKEY02;		/**(vtrKEYTP) Data type vector for Key fields*/		private Vector<String> vtrKEYTP;		/**(vtrVAL01) Data fields vector for Target Table*/        private Vector<String> vtrVAL01;		/**(vtrVAL02) Data fields vector for Source Table*/		private Vector<String> vtrVAL02;		/**(vtrVALTP) Data type vector for Data fields*/		private Vector<String> vtrVALTP;		/**(htbPRMST)Prduct master Hash Table*/        private Hashtable<String,String[]> htbPRMST;		/**(htbKEYTBL) Hash table for key-fields (not in use)*/		private Hashtable<String,String> htbKEYTBL;	/**(htbINMST) Hash table for Indent Master details*/		private Hashtable<String,String[]> htbINMST;		/**(htbINTRN) Hash table for Indent Transaction details*/		private Hashtable<String,String[]> htbINTRN;		/**(htbCDTRN) Hash table for Code Transaction details*/		private Hashtable<String,String[]> htbCDTRN;		/**(htbDOMST) Hash table for D.O.master details*/		private Hashtable<String,String[]> htbDOMST;		/**(htbDOTRN) Hash table for D.O.transaction details*/		private Hashtable<String,String[]> htbDOTRN;		/**(strSTRSQL_1)SQL query string additional provision 1*/		private String strSTRSQL_1;		/**(strSTRSQL_2)SQL query string additional provision 2*/		private String strSTRSQL_2;        mr_hkdfh()        {           super(2);           try	       {				strSTRSQL_1 = "";				cl_dat.M_flgLCUPD_pbst = true;				//setLBLMOD();				vtrKEY01  = new Vector<String>();				vtrKEY02  = new Vector<String>();				vtrKEYTP  = new Vector<String>();				vtrVAL01  = new Vector<String>();				vtrVAL02  = new Vector<String>();				vtrVALTP  = new Vector<String>();				htbPRMST  = new Hashtable<String,String[]>();				htbKEYTBL = new Hashtable<String,String>();				htbINMST  = new Hashtable<String,String[]>();				htbINTRN  = new Hashtable<String,String[]>();				htbCDTRN  = new Hashtable<String,String[]>();				htbDOMST  = new Hashtable<String,String[]>();				htbDOTRN  = new Hashtable<String,String[]>();				setMatrix(15,8);				setVGAP(13);				add(new JLabel("Current"),      3,3,1,1,this,'L');				add(new JLabel("Date"),         4,2,1,1,this,'L');				add(new JLabel("Session"),      5,2,1,1,this,'L');				add(txtCURDT=new JTextField(),  4,3,1,1,this,'L');				add(txtCURSS=new JTextField(),  5,3,1,1,this,'L');				add(btnRUN1 =new JButton("RUN"),7,3,1,1,this,'L');				add(new JLabel("Previous"),    3,5,1,1,this,'L');				add(txtPRVDT=new JTextField(),   4,5,1,1,this,'L');				add(txtPRVSS=new JTextField(),   5,5,1,1,this,'L');				this.validate();				setCONFTB(strPTHWD);
				txtPRVDT.setEnabled(false);
				txtPRVSS.setEnabled(false);
//				setENBL1(false);//				addLSTNR();				exeINTVAR();				getPRVSSN();			}            catch(Exception L_EX)            {               setMSG(L_EX,"in Child.constructor");		}	        }        private void exeINTVAR()        {                strPRVDT = "";                strCURDT = "";                strPRVSS = "";                strCURSS = "";        }	/** Deleting Single Quotes(') from a specified string  (for Saving to Database)
	 */      private String delQuote(String LP_STRVL)        {        String L_STRVL = LP_STRVL;        String L_RETSTR="";        StringTokenizer L_STRTKN;        try          {            if(LP_STRVL==null)               return L_STRVL;            else if (LP_STRVL.length()==0)               return L_STRVL;            int L_STRLEN = LP_STRVL.length();            int L_QOTLCN = 0;            L_RETSTR = "";            L_STRTKN = new StringTokenizer(L_STRVL,"'");            while(L_STRTKN.hasMoreTokens())            {                 L_RETSTR +=  L_STRTKN.nextToken();            }                   }          catch(Exception ex)          {          }          //System.out.println("Original : "+L_STRVL);          //System.out.println("Modified : "+L_RETSTR);          return(L_RETSTR);        }
		/**  Picking up details for previous updated session
		 */        private void getPRVSSN()        {                try                {                M_strSQLQRY = "select cmt_ccsvl, cmt_chp01 from co_cdtrn where cmt_cgmtp||cmt_cgstp||cmt_codcd='D"+cl_dat.M_strCMPCD_pbst+"MRXXDFHDOR'";                M_rstRSSET = cl_dat.exeSQLQRY1(M_strSQLQRY);                if(M_rstRSSET != null && M_rstRSSET.next())                {                        strPRVDT = M_rstRSSET.getString("CMT_CCSVL").toString();                        strPRVSS = M_rstRSSET.getString("CMT_CHP01").toString();                        M_rstRSSET.close();                        getCURSSN();                }                txtPRVDT.setText(strPRVDT);                txtPRVSS.setText(strPRVSS);                txtCURDT.setText(strCURDT);                txtCURSS.setText(strCURSS);                }                catch(SQLException L_EX)                {                        System.out.println(L_EX+":"+M_strSQLQRY);                }        }
		/** Setting / displaying details for Cuurent Session, to be updated
		 */        private void setCURSSN()        {                try				{
                        strCURDT = txtCURDT.getText().trim();                        strCURSS = txtCURSS.getText().trim();                        M_strSQLQRY = "update co_cdtrn set cmt_ccsvl = '"+strCURDT+"', cmt_chp01 = '"+strCURSS+"'  where cmt_cgmtp||cmt_cgstp||cmt_codcd='D"+cl_dat.M_strCMPCD_pbst+"MRXXDFHDOR'";                        //System.out.println(M_strSQLQRY);                        cl_dat.exeSQLUPD(M_strSQLQRY,"");                        cl_dat.exeDBCMT("setCURSSN");                 }                catch(Exception L_EX)                {                        System.out.println(L_EX+":"+M_strSQLQRY);                }        }		/** Picking up details of current session, according to Previous Session 
		 */        private void getCURSSN()        {        try           {                if(strPRVSS.equals("99"))                {                        strCURSS = "01";                        M_calLOCAL.setTime(M_fmtLCDAT.parse(strPRVDT));                        M_calLOCAL.add(Calendar.DATE,+1);                        strCURDT = M_fmtLCDAT.format(M_calLOCAL.getTime());                        return;                }                strCURDT = strPRVDT;                strCURSS = "00"+String.valueOf(Integer.parseInt(strPRVSS)+1);                int L_STRLN = strCURSS.length();                strCURSS = strCURSS.substring(L_STRLN-2,L_STRLN);             }             catch (Exception L_EX) {}        }		/** Verifying availability of data file for updation
		 */        private boolean chkDTFILE()        {          boolean L_RETFL = true;          try          {                strCURDT = txtCURDT.getText().trim();                strCURSS = txtCURSS.getText().trim();                strFLSUFX = strCURDT.substring(0,2)+strCURDT.substring(3,5)+strCURSS;                String LM_DTRFL1 = "wd"+strFLSUFX+".jar";                filWDFILE = new File(strPTHWD+LM_DTRFL1);                String L_XJARFL = strEXEDIR+"mr_xjar.bat "+strFLSUFX;                //System.out.println(L_XJARFL);                if(!filWDFILE.exists())
				{					oppOPTNPN.showMessageDialog(this,"Data file "+strPTHWD+LM_DTRFL1+" does not exist","Error Message",JOptionPane.INFORMATION_MESSAGE);
					return false;
				}                L_RETFL = true;                try                {                        Runtime r = Runtime.getRuntime();                        Process p = null;                        p = r.exec(L_XJARFL);                        p.waitFor();                }                catch(Exception r_ex)                {                        //showEXMSG(r_ex,"chkDTFILE1","");                }           }           catch(Exception L_EX)           {                //showEXMSG(L_EX,"chkDTFILE","");           }           return L_RETFL;        }		/** Moving updated data file to temporary folder
		 */        private void movDTFILE()        {          try          {                String L_MOVEFL = strEXEDIR+"mr_mvzip.bat "+strFLSUFX;                Runtime r = Runtime.getRuntime();                Process p = null;                p = r.exec(L_MOVEFL);                p.waitFor();           }           catch(Exception L_EX)           {                //showEXMSG(L_EX,"movDTFILE","");           }        }	/** Action performed event
	 */	public void actionPerformed(ActionEvent L_AE)    {        super.actionPerformed(L_AE);        if(L_AE.getSource().equals(btnRUN1))        {
			strCURDT = txtCURDT.getText();			strCURSS = txtCURSS.getText();			strPRVDT = txtPRVDT.getText();			strPRVSS = txtPRVSS.getText();            //insREFTBL();
			if (!chkVLDSSN())				return;
            if(!chkDTFILE())
				return;            updDATAFL();            movDTFILE();            setCURSSN();
	            oppOPTNPN.showMessageDialog(this," Updation Completed ...","Data Transfer",JOptionPane.INFORMATION_MESSAGE);        }    }

		/** Validating the current session
		*/		private boolean chkVLDSSN()
		{
			boolean strLCHKFL = true;
			try
			{
				int intTMPCUR = Integer.parseInt(strCURSS);
				int intTMPPRV = Integer.parseInt(strPRVSS);
				System.out.println("Date Comparison "+M_fmtLCDAT.parse(strCURDT).compareTo(M_fmtLCDAT.parse(strPRVDT)));
				if(M_fmtLCDAT.parse(strCURDT).compareTo(M_fmtLCDAT.parse(strPRVDT))<0)
				{
					oppOPTNPN.showMessageDialog(this,"Data upto "+strPRVDT+" is already updated","Error Message",JOptionPane.INFORMATION_MESSAGE);
					strLCHKFL = false;
				}
				else if((M_fmtLCDAT.parse(strCURDT).compareTo(M_fmtLCDAT.parse(strPRVDT))>0) && (!strPRVSS.equals("99")))
				{
					oppOPTNPN.showMessageDialog(this,"99 session of "+strPRVDT+" is not updated","Error Message",JOptionPane.INFORMATION_MESSAGE);
					strLCHKFL = false;
				}
				else if((M_fmtLCDAT.parse(strCURDT).compareTo(M_fmtLCDAT.parse(strPRVDT))==0) && intTMPCUR < intTMPPRV)
				{
					oppOPTNPN.showMessageDialog(this,"Data upto session "+strPRVSS+" is already updated","Error Message",JOptionPane.INFORMATION_MESSAGE);
					strLCHKFL = false;
				}
				if((M_fmtLCDAT.parse(strCURDT).compareTo(M_fmtLCDAT.parse(strPRVDT))==0) && intTMPCUR == intTMPPRV)
				{
		            int intSELOPT = oppOPTNPN.showConfirmDialog(null," Session "+strPRVSS+" already updated .... Reupdate ?","Warning",JOptionPane.YES_NO_OPTION);
					if(intSELOPT != 0)
					{
						strLCHKFL = false;
					}
				}
				if(intTMPCUR-intTMPPRV>1)
				{
		            int intSELOPT = oppOPTNPN.showConfirmDialog(null," Previous session Updated : "+strPRVSS+" .... Continue ?","Warning",JOptionPane.YES_NO_OPTION);
					if(intSELOPT != 0)
					{
						strLCHKFL = false;
					}
				}
				if((M_fmtLCDAT.parse(strCURDT).compareTo(M_fmtLCDAT.parse(strPRVDT))==1) && (strPRVSS.equals("99")) && (!strCURSS.equals("01")))
				{
		            int intSELOPT = oppOPTNPN.showConfirmDialog(null," Previous session Updated : "+strPRVSS+" .... Continue ?","Warning",JOptionPane.YES_NO_OPTION);
					if(intSELOPT != 0)
					{
						strLCHKFL = false;
					}
				}
			}
			catch (Exception L_EX)
			{
			}		return(strLCHKFL);
		}
	
	
		/** Data file updation, Main Method
		 */        private void updDATAFL()        {                try                {                        crtPRMST();                        crtCDTRN();                        crtDOMST("DO"+strFLSUFX);                        crtINMST("IM"+strFLSUFX);                        crtINTRN("IT"+strFLSUFX);                        exeGC();                        if(strCURSS.equals("99"))                        {                                updDATAFL1("CC","01","MR_CRCLM","CC_INVNO"," !empty(CC_PRTYPE) and !empty(CC_DOCTYPE) and !empty(CC_CTTYPE) and !empty(CC_CTCODE) and !empty(CC_INVNO) and !empty(CC_GRADECD) ");                                updDATAFL1("CF","02","MR_PMCRF","CF_FDOCNO"," !empty(CF_PRTYPE) and !empty(CF_CRDTYPE) and !empty(CF_DOCTYPE) and !empty(CF_FDOCNO)");                                    //updDATAFL1("CM","03","MR_CDTRN","CMT_VALUE"," !empty(CMT_TYPE) and !empty(CMT_VALUE) ");                                updDATAFL1("PA","09","MR_PMADJ","PA_DOCNO","!empty(PA_PRTYPE) and !empty(PA_CRDTYPE) and !empty(PA_DOCTYPE) and !empty(PA_DOCNO) and !empty(PA_IVDOCTY) and !empty(PA_INVNO)");                                updDATAFL1("PM","10","MR_PMMST","PM_DOCNO","!empty(PM_PRTYPE) and !empty(PM_CRDTYPE) and !empty(PM_DOCTYPE) and !empty(PM_DOCNO)");                                updDATAFL1("PT","11","MR_PMTRN","PT_DOCNO","!empty(PT_PRTYPE) and !empty(PT_CRDTYPE) and !empty(PT_DOCTYPE) and !empty(PT_BNKCD) and !empty(PT_CHQNO)");                                    //updDATAFL1("GR","06","MR_GRMST","GR_GRADECD"," !empty(GR_PRDCD) and !empty(GR_PKGTP) ");                        }                        updDATAFL1("DT","12","MR_DOTRN","DOT_PRTYPE,DOT_DONO"," !empty(dot_prtype) and !empty(dot_dono) and !empty(dot_gradec)");                        updDATAFL1("DO","13","MR_DOTRN","DO_PRTYPE,DO_NO"," !empty(do_prtype) and !empty(do_no)");                        updDATAFL1("DL","05","MR_DODEL","DOD_PRTYPE,DOD_DONO,DOD_GRADEC,DOD_DSPDT"," !empty(dod_prtype) and !empty(dod_dono) and !empty(dod_gradec) and !empty(dod_dspdt)");                        updDATAFL1("IM","07","MR_INMST","IN_INDNO"," !empty(IN_PRTYPE) and !empty(IN_INDNO)");                        updDATAFL1("IT","08","MR_INTRN","INT_INDNO"," !empty(INT_PRTYPE) and !empty(INT_INDNO) and !empty(INT_GRADEC)");                        updDATAFL1("CT","04","CO_PTMST","CT_CODE","!empty(CT_TYPE) and !empty(CT_CODE)");                        M_strSQLQRY = "update mr_dotrn set dot_ladqt=0.000 where dot_ladqt is null";                        cl_dat.exeSQLUPD(M_strSQLQRY,"");                        cl_dat.exeDBCMT("updDATAFL");                         M_strSQLQRY = "update mr_intrn set int_ladqt=0.000 where int_ladqt is null";                        cl_dat.exeSQLUPD(M_strSQLQRY,"");                        cl_dat.exeDBCMT("updDATAFL");                 }                //catch(SQLException L_EX)                catch(Exception L_EX)                {                        System.out.println(L_EX+":"+M_strSQLQRY);                }        }		/** Data file updation sub-method
		 * @param LP_FLPRFX  Data file prefix (IM for Indent Master, IT for Indent Transaction etc.)
		 * @param LP_TRFNO   Data transfer serial number (predefined in MR_DTREF table) of the corresponding data file
		 * @param LP_CURFILE	Corresponding main data file getting updated on Server
		 * @param LP_ORDFL		Order (of columns) according to which data will be selected (picked-up) for updation
		 * @param LP_CHKFL		Filtering condition to be applied while selecting data for updation
		 * 
		 */        private void updDATAFL1(String LP_FLPRFX, String LP_TRFNO, String LP_CURFILE, String LP_ORDFL, String LP_CHKFL)        {                strCURFILE = LP_CURFILE;                                String LM_DTRFL2 = LP_FLPRFX+strFLSUFX+".DBF";                //System.out.println("Updating file : "+LM_DTRFL2);                File LM_TRFILE = new File(strPTHWD+LM_DTRFL2);                if(!LM_TRFILE.exists())                   {                        setMSG(LM_DTRFL2+" file not found",'E');                   }                else                   {                        setMSG("Updating "+LM_DTRFL2+" ...",'N');                   }                                String L_DATAFL = LP_FLPRFX + strFLSUFX;                try                {                        //System.out.println("File prefix : "+LP_FLPRFX);                        M_strSQLQRY = "select * from MR_DTREF where DT_TRFNO = '"+LP_TRFNO+"'";                        M_rstRSSET = cl_dat.exeSQLQRY1(M_strSQLQRY);                        if(M_rstRSSET == null || !M_rstRSSET.next())                        {                                System.out.println("Records not found in MR_DTREF");                                return;                        }                        setREFVTR();                        //crtKEYTBL();                        strSTRSQL_1 = "select * from "+L_DATAFL;                        rstL1RSLSET = exeBKPQRY(strSTRSQL_1);                        if(rstL1RSLSET == null || !rstL1RSLSET.next())                        {                                System.out.println("Records not found in "+L_DATAFL);                                return;                        }                        while(true)                        {                                dspFLDVAL();                                if(!rstL1RSLSET.next())                                        break;                        }                        rstL1RSLSET.close();                                        exeGC();                                        }                catch(Exception L_EX)                {                        System.out.println(L_EX+":"+M_strSQLQRY);                }                        }
		/** Garbage collection
		 */        private void exeGC()        {                Runtime r = Runtime.getRuntime();                r.gc();        }		/** Capturing details from control file (MR_DTREF) into vectors
		 * for reference, during data updation
		 */        private void setREFVTR()        {        try        {                vtrKEY01.clear();                vtrKEY02.clear();                vtrKEYTP.clear();                vtrVAL01.clear();                vtrVAL02.clear();                vtrVALTP.clear();                while(true)                {                        strKEYVL = getRSTVAL(M_rstRSSET,"DT_KEYVL","C");                        strFLD01 = getRSTVAL(M_rstRSSET,"DT_FLD01","C");                        strFLD02 = getRSTVAL(M_rstRSSET,"DT_FLD02","C");                        strFLDTP = getRSTVAL(M_rstRSSET,"DT_FLDTP","C");                                                if (!strKEYVL.toUpperCase().equals("X"))                        {                           vtrKEY01.add(strFLD01);                           vtrKEY02.add(strFLD02);                           vtrKEYTP.add(strFLDTP);                        }                        else                        {                           vtrVAL01.add(strFLD01);                           vtrVAL02.add(strFLD02);                           vtrVALTP.add(strFLDTP);                        }                        if (!M_rstRSSET.next())                                break;                }                M_rstRSSET.close();        }        catch(SQLException L_EX)        {                 //showEXMSG(L_EX,"setREFVTR","");        }     }		/** One time data capturing for specified codes from CO_CDTRN
		 * into the Hash Table
		 */		private void crtCDTRN()        {            try            {                htbCDTRN.clear();                M_strSQLQRY = "select * from co_cdtrn where cmt_cgmtp||cmt_cgstp in ('SYSMR00SAL', 'SYSMR00ZON', 'SYSMRXXSAL', 'SYSMRXXZON')";                M_rstRSSET = cl_dat.exeSQLQRY1(M_strSQLQRY);                if(M_rstRSSET == null || !M_rstRSSET.next())                {                      System.out.println("Records not found in CO_CDTRN");                      return;                }                while(true)                {                        strCGMTP = getRSTVAL1(M_rstRSSET,"CMT_CGMTP","C");                        strCGSTP = getRSTVAL1(M_rstRSSET,"CMT_CGSTP","C");                        strCODCD = getRSTVAL1(M_rstRSSET,"CMT_CODCD","C");                        String[] staCDTRN = new String[intCDTRN_TOT];                        staCDTRN[intAE_CMT_CODDS] = getRSTVAL1(M_rstRSSET,"CMT_CODDS","C");                        staCDTRN[intAE_CMT_SHRDS] = getRSTVAL1(M_rstRSSET,"CMT_SHRDS","C");                        staCDTRN[intAE_CMT_CHP01] = getRSTVAL1(M_rstRSSET,"CMT_CHP01","C");                        staCDTRN[intAE_CMT_CHP02] = getRSTVAL1(M_rstRSSET,"CMT_CHP02","C");                        staCDTRN[intAE_CMT_NMP01] = getRSTVAL1(M_rstRSSET,"CMT_NMP01","C");                        staCDTRN[intAE_CMT_NMP02] = getRSTVAL1(M_rstRSSET,"CMT_NMP02","C");                        staCDTRN[intAE_CMT_CCSVL] = getRSTVAL1(M_rstRSSET,"CMT_CCSVL","C");                        staCDTRN[intAE_CMT_NCSVL] = getRSTVAL1(M_rstRSSET,"CMT_NCSVL","C");                        htbCDTRN.put(strCGMTP+strCGSTP+strCODCD,staCDTRN);                        if (!M_rstRSSET.next())                                break;                }                M_rstRSSET.close();            }            catch(Exception L_EX)            {                    System.out.println("crtCDTRN : "+L_EX+" "+M_strSQLQRY);            }        }		/** Creating hash table with required details from Product Master
		 */        private void crtPRMST()        {            try            {                htbPRMST.clear();                M_strSQLQRY = "select * from co_prmst order by pr_prdds";                M_rstRSSET = cl_dat.exeSQLQRY1(M_strSQLQRY);                if(M_rstRSSET == null || !M_rstRSSET.next())                {                      System.out.println("Records not found in CO_PRMST");                      return;                }                while(true)                {                        strPRDDS = getRSTVAL1(M_rstRSSET,"PR_PRDDS","C");                        String[] staPRMST = new String[intPRMST_TOT];                        staPRMST[intAE_PR_PRDCD] = getRSTVAL1(M_rstRSSET,"PR_PRDCD","C");                        htbPRMST.put(strPRDDS,staPRMST);                        if (!M_rstRSSET.next())                                break;                }                M_rstRSSET.close();            }            catch(Exception L_EX)            {                    System.out.println("crtPRMST : "+L_EX+" "+M_strSQLQRY);            }        }		/** Creating hash table with required details from Indent Master 
		 */        private void crtINMST(String LP_DATAFL)        {            try            {                htbINMST.clear();                ResultSet L2_RSLSET;                M_strSQLQRY = "select * from "+LP_DATAFL;                L2_RSLSET = exeBKPQRY1(M_strSQLQRY);                if(L2_RSLSET == null || !L2_RSLSET.next())                {                      System.out.println("Records not found in "+LP_DATAFL);                      return;                }                while(true)                {                        strMKTTP = getRSTVAL1(L2_RSLSET,"IN_PRTYPE","C");                        strINDNO = getRSTVAL1(L2_RSLSET,"IN_INDNO","C");                        String[] staINMST = new String[intINMST_TOT];                        staINMST[intAE_IN_SALTP] = getRSTVAL1(L2_RSLSET,"IN_SALTYPE","C");                        staINMST[intAE_IN_ZONCD] = getRSTVAL1(L2_RSLSET,"IN_ZONE","C");                        staINMST[intAE_IN_CNSCD] = getRSTVAL1(L2_RSLSET,"IN_CONSIGN","C");                        staINMST[intAE_IN_DSRCD] = getRSTVAL1(L2_RSLSET,"IN_DISTRIB","C");                        htbINMST.put(strMKTTP+strINDNO,staINMST);                        if (!L2_RSLSET.next())                                break;                }                L2_RSLSET.close();            }            catch(Exception L_EX)            {                    System.out.println("Error in crtINMST : "+L_EX+":"+M_strSQLQRY);            }        }		/** Creating hash table with required details from DO Master
		 */        private void crtDOMST(String LP_DATAFL)        {            try            {                htbDOMST.clear();                ResultSet L2_RSLSET;                M_strSQLQRY = "select * from "+LP_DATAFL;                L2_RSLSET = exeBKPQRY1(M_strSQLQRY);                if(L2_RSLSET == null || !L2_RSLSET.next())                {                      System.out.println("Records not found in "+LP_DATAFL);                      return;                }                while(true)                {                        strMKTTP = getRSTVAL1(L2_RSLSET,"DO_PRTYPE","C");                        strDORNO = getRSTVAL1(L2_RSLSET,"DO_NO","C");                        String[] staDOMST = new String[intDOMST_TOT];                        staDOMST[intAE_DO_INDNO] = getRSTVAL1(L2_RSLSET,"DO_INDNO","C");                        htbDOMST.put(strMKTTP+strDORNO,staDOMST);                        if (!L2_RSLSET.next())                                break;                }                L2_RSLSET.close();            }            catch(Exception L_EX)            {                    System.out.println("Error in crtDOMST : "+L_EX+":"+M_strSQLQRY);            }        }		/** Creating hash table with required details from DO Transaction table
		 */        private void crtDOTRN(String LP_DATAFL)        {            try            {                htbDOTRN.clear();                ResultSet L2_RSLSET;                M_strSQLQRY = "select * from "+LP_DATAFL;                L2_RSLSET = exeBKPQRY1(M_strSQLQRY);                if(L2_RSLSET == null || !L2_RSLSET.next())                {                      System.out.println("Records not found in "+LP_DATAFL);                      return;                }                while(true)                {                        strMKTTP = getRSTVAL1(L2_RSLSET,"DOT_PRTYPE","C");                        strDORNO = getRSTVAL1(L2_RSLSET,"DOT_DONO","C");                        strPRDDS = getRSTVAL1(L2_RSLSET,"DOT_GRADEC","C");                        strPRDCD = getPRMST(strPRDDS);                        String[] staDOTRN = new String[intDOTRN_TOT];                        staDOTRN[intAE_DOT_PKGTP] = getRSTVAL1(L2_RSLSET,"DOT_PKGTYP","C");                        htbDOTRN.put(strMKTTP+strDORNO+strPRDCD,staDOTRN);                        if (!L2_RSLSET.next())                                break;                }                L2_RSLSET.close();            }            catch(Exception L_EX)            {                    System.out.println("Error in crtDOTRN : "+L_EX+":"+M_strSQLQRY);            }        }		/** Creating hash table with required details from MR_INTRN
		 */        private void crtINTRN(String LP_DATAFL)        {            try            {                htbINTRN.clear();                M_strSQLQRY = "select * from "+LP_DATAFL+" order by int_prtype,int_indno,int_gradec";                ResultSet L2_RSLSET = exeBKPQRY1(M_strSQLQRY);                if(L2_RSLSET == null || !L2_RSLSET.next())                {                      setMSG("Records not found in "+LP_DATAFL,'E');                      return;                }                while(true)                {                        strMKTTP = getRSTVAL1(L2_RSLSET,"INT_PRTYPE","C");                        strINDNO = getRSTVAL1(L2_RSLSET,"INT_INDNO","C");                        strPRDDS = getRSTVAL1(L2_RSLSET,"INT_GRADEC","C");                        strPKGTP = getRSTVAL1(L2_RSLSET,"INT_PKGTYP","C");                        strPRDCD = getPRMST(strPRDDS);                        if (strPRDCD.length() < 10)                        {                                if (!L2_RSLSET.next())                                        break;                                else                                        continue;                        }                        String[] staINTRN = new String[intINTRN_TOT];                        staINTRN[intAE_INT_CDCVL] = getRSTVAL1(L2_RSLSET,"INT_CDCNT","C");                        staINTRN[intAE_INT_DDCVL] = getRSTVAL1(L2_RSLSET,"INT_DDCNT","C");                        staINTRN[intAE_INT_TDCVL] = getRSTVAL1(L2_RSLSET,"INT_TDCNT","C");                        staINTRN[intAE_INT_TDCRF] = getRSTVAL1(L2_RSLSET,"INT_TDCONS","C");                        staINTRN[intAE_INT_EXCRT] = getRSTVAL1(L2_RSLSET,"INT_EXCDUT","C");                        htbINTRN.put(strMKTTP+strINDNO+strPRDCD+strPKGTP,staINTRN);                        if (!L2_RSLSET.next())                                break;                }                L2_RSLSET.close();            }            catch(Exception L_EX)            {                    System.out.println("Error in crtINTRN : "+L_EX+":"+M_strSQLQRY);            }        }        /** Hash Table of Key values of main table is created        *  <br> This is used to decide whether to Update / Insert record        *  <br> depending on Key Value availability in Hash Table        */        private void crtKEYTBL()        {            try            {                intKEYSIZE = vtrKEY02.size();                String L_NEWNM, L_KEYSTR, L_KEYTP;                String L_KPRFX = "", L_KSUFX = "";                L_KEYSTR = "";                for(int i=0 ; i<intKEYSIZE ; i++)                {                        L_KEYTP = vtrKEYTP.get(i).toString();                        if(L_KEYTP.equals("D"))                        {                              L_KPRFX = "char(";                              L_KSUFX = ")";                        }                        L_NEWNM = vtrKEY01.get(i).toString();                        L_KEYSTR += L_KPRFX+L_NEWNM+L_KSUFX;                        if(i<intKEYSIZE-1)                            L_KEYSTR += "||";                }                M_strSQLQRY = "select "+L_KEYSTR+" KEYSTR from "+strCURFILE;                M_rstRSSET = cl_dat.exeSQLQRY1(M_strSQLQRY);                if(M_rstRSSET == null || !M_rstRSSET.next())                {                         System.out.println("Records not found in MR_DTREF");                         return;                }                String L_KEYVL;                while(true)                {                                L_KEYVL = getRSTVAL(M_rstRSSET,"KEYSTR","C");                                htbKEYTBL.put(L_KEYVL,"1");                                //setMSG(strCURFILE+" : "+L_KEYVL,'N');                                if (!M_rstRSSET.next())                                        break;                }                M_rstRSSET.close();            }            catch(Exception L_EX)            {                    System.out.println(L_EX+":"+M_strSQLQRY);            }        }        /** Method for actual execution of updation / insertion query        */        private void dspFLDVAL()        {        String L_KEYSTR = "";        try        {                //oppOPTNPN.showMessageDialog(this,"Size of vtrKEY02 : "+vtrKEY02.size(),"Message",JOptionPane.INFORMATION_MESSAGE);                intKEYSIZE = vtrKEY02.size();                intVALSIZE = vtrVAL02.size();                String L_NEWNM, L_OLDNM, L_FLDVL, L_FLDVL1, L_FLDTP, L_FLDTP1;                strWHRSTR  = "";                strINSSTR1 = "";                strINSSTR2 = "";                strUPDSTR  = "";                L_KEYSTR   = "";                for(int i=0 ; i<intKEYSIZE ; i++)                {                        L_NEWNM = vtrKEY01.get(i).toString();                        L_OLDNM = vtrKEY02.get(i).toString();                        L_FLDTP = vtrKEYTP.get(i).toString();                        L_FLDTP1 = L_FLDTP;                        if (L_FLDTP.toUpperCase().equals("X"))                        {                                L_FLDVL = getFLDVL(L_OLDNM);                                L_FLDVL = L_FLDVL.toUpperCase().trim().equals("NULL") ? null : L_FLDVL;                                L_FLDTP1 = "C";                        }                        else                                L_FLDVL = getRSTVAL1(rstL1RSLSET,L_OLDNM,L_FLDTP1);                        L_FLDVL1 = L_FLDVL;                        if(L_FLDTP1.equals("D"))                                L_FLDVL1 = L_FLDVL.substring(0,6)+L_FLDVL.substring(8,10);                        setINSSTR(L_NEWNM,L_FLDVL,L_FLDTP1);                        //System.out.println("L_KEYSTR : "+L_KEYSTR + "    L_FLDVL : "+L_FLDVL);                        L_KEYSTR +=  L_FLDVL1;                                                if (i == (intKEYSIZE-1))                                strWHRSTR += setUPDSTR_L(L_NEWNM,L_FLDVL,L_FLDTP1,"W");                        else                                strWHRSTR += setUPDSTR(L_NEWNM,L_FLDVL,L_FLDTP1,"W");                }                setMSG(strCURFILE+" : "+L_KEYSTR,'N');                for(int i=0 ; i<intVALSIZE ; i++)                {                        L_NEWNM = vtrVAL01.get(i).toString();                        L_OLDNM = vtrVAL02.get(i).toString();                        L_FLDTP = vtrVALTP.get(i).toString();                        L_FLDTP1 = L_FLDTP;                        if (L_FLDTP.toUpperCase().equals("X"))                        {                                L_FLDVL = getFLDVL(L_OLDNM);                                if(L_FLDVL.toUpperCase().trim().equals("NULL"))                                        L_FLDVL = "null";                                L_FLDTP1 = "C";                        }                        else                                L_FLDVL = getRSTVAL1(rstL1RSLSET,L_OLDNM,L_FLDTP1);                        if (i == (intVALSIZE-1))                        {                                strUPDSTR += setUPDSTR_L(L_NEWNM,L_FLDVL,L_FLDTP1,"U");                                             setINSSTR_L(L_NEWNM,L_FLDVL,L_FLDTP1);                        }                        else                        {                                strUPDSTR += setUPDSTR(L_NEWNM,L_FLDVL,L_FLDTP1,"U");                                             setINSSTR(L_NEWNM,L_FLDVL,L_FLDTP1);                        }                }                strSTRSQL_1 = "insert into "+strCURFILE+" ("+strINSSTR1+") values ("+strINSSTR2+")";                strSTRSQL_2 = "update "+strCURFILE+" set "+strUPDSTR;                if (!strWHRSTR.equals(""))                        strSTRSQL_2+= " where "+ strWHRSTR;                String L0_STRSQL = "select count(*) from "+strCURFILE+" where "+strWHRSTR;                int L_RECCNT = getRECCNT(L0_STRSQL);                M_strSQLQRY = strSTRSQL_1;                if(L_RECCNT > 0)                        M_strSQLQRY = strSTRSQL_2;                cl_dat.M_stmSPDBA_pbst.executeUpdate(M_strSQLQRY);                cl_dat.exeDBCMT("dspFLDVAL");                }                catch (SQLException L_SE)                {                        System.out.println(""+L_SE);                }                //M_strSQLQRY = strSTRSQL_1;                //if(htbKEYTBL.containsKey(L_KEYSTR))                //   M_strSQLQRY = strSTRSQL_2;                //                cl_dat.exeSQLUPD(M_strSQLQRY,"setLCLUPD");                //if(cl_dat.M_flgLCUPD_pbst)                //{                //        cl_dat.exeDBCMT("dspFLDVAL");                //}                cl_dat.M_flgLCUPD_pbst = true;                //System.out.println(M_strSQLQRY);                //oppOPTNPN.showMessageDialog(this,"Next Record","Message",JOptionPane.INFORMATION_MESSAGE);        }		/** Picking up / arriving at field details exclusivelly 
		 * @param LP_FLDNM Input field Name A method with same name (condition) is defined for 
		 * <br> processing corresponding source code.		 */        private String getFLDVL(String LP_FLDNM)        {           String L_RETSTR = "";           String L_TMPSTR = "";           try           {                if(LP_FLDNM.equals("XX_TRNFL"))                {                        L_RETSTR = "0";                }                if(LP_FLDNM.equals("XX_LUPDT"))                {                          L_RETSTR = M_fmtDBDAT.format(M_fmtLCDAT.parse(cl_dat.M_strLOGDT_pbst));                          L_RETSTR = L_RETSTR.substring(1,11);                          //L_RETSTR = cl_dat.M_LOGDAT;                }                                else if(LP_FLDNM.equals("CC_PRDCD"))                {                        L_TMPSTR = getRSTVAL1(rstL1RSLSET,"CC_GRADECD","C");                        L_RETSTR = getPRMST(L_TMPSTR);                }                else if(LP_FLDNM.equals("IN_SBSCD"))                {                        L_RETSTR = "";                        strMKTTP = getRSTVAL1(rstL1RSLSET,"IN_PRTYPE","C");                        strINDNO = getRSTVAL1(rstL1RSLSET,"IN_INDNO","C");                        getINMST(strMKTTP+strINDNO);                        L_RETSTR = strSBSCD;                }                else if(LP_FLDNM.equals("IN_SALTP1"))                {                        L_RETSTR = "";                        strMKTTP = getRSTVAL1(rstL1RSLSET,"IN_PRTYPE","C");                        strINDNO = getRSTVAL1(rstL1RSLSET,"IN_INDNO","C");                        getINMST(strMKTTP+strINDNO);                        L_RETSTR = strSALTP1;                }                else if(LP_FLDNM.equals("IN_ZONCD1"))                {                        L_RETSTR = "";                        strMKTTP = getRSTVAL1(rstL1RSLSET,"IN_PRTYPE","C");                        strINDNO = getRSTVAL1(rstL1RSLSET,"IN_INDNO","C");                        getINMST(strMKTTP+strINDNO);                        L_RETSTR = strZONCD1;                }                else if(LP_FLDNM.equals("IN_BKGBY"))                {                        L_RETSTR = "MKT";                }                else if(LP_FLDNM.equals("IN_DSTCD"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_MOTCD"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_FILRF"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_PMTRF"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_INSRF"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_FORRF"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_TSHFL"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_REGBY"))                {                        L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_REGDT"))                {                          //L_RETSTR = cc_dattm.occ_dattm.setDBSDT(nvlSTRVL(cl_dat.M_LOGDAT,"null"));                          //L_RETSTR = L_RETSTR.substring(1,11);                          L_RETSTR = "null";                }                else if(LP_FLDNM.equals("IN_AUTBY"))                {                          L_RETSTR = "null";                }                else if(LP_FLDNM.equals("INT_SBSCD"))                {                        L_RETSTR = "";                        strMKTTP = getRSTVAL1(rstL1RSLSET,"INT_PRTYPE","C");                        strINDNO = getRSTVAL1(rstL1RSLSET,"INT_INDNO","C");                        getINMST(strMKTTP+strINDNO);                        L_RETSTR = strSBSCD;                        strLUSBY = getRSTVAL1(rstL1RSLSET,"INT_LUID","C");                        strLUPDT = getRSTVAL1(rstL1RSLSET,"INT_LUPD","D");                        strPRDDS = getRSTVAL1(rstL1RSLSET,"INT_GRADEC","C");                        strPKGTP = getRSTVAL1(rstL1RSLSET,"INT_PKGTYP","C");                        strPRDCD = getPRMST(strPRDDS);                        if(strPRDCD.length() < 10)                                return L_RETSTR;                        getINTRN(strMKTTP+strINDNO+strPRDCD+strPKGTP);                        updTXDOC();                }                else if(LP_FLDNM.equals("DOT_SBSCD"))                {                        L_RETSTR = "";                        strINDNO = getRSTVAL1(rstL1RSLSET,"DO_INDNO","C");                        getINMST(strMKTTP+strINDNO);                        L_RETSTR = strSBSCD;                }                else if(LP_FLDNM.equals("DOD_SBSCD"))                {                        L_RETSTR = "";                        strMKTTP = getRSTVAL1(rstL1RSLSET,"DOD_PRTYPE","C");                        strDORNO = getRSTVAL1(rstL1RSLSET,"DOD_DONO","C");                        getDOMST(strMKTTP+strDORNO);                        getINMST(strMKTTP+strINDNO);                        L_RETSTR = strSBSCD;                }                else if(LP_FLDNM.equals("INT_RESRF"))                {                        L_RETSTR = "";                }                else if(LP_FLDNM.equals("DOD_PKGTP"))                {                   try                   {                        L_RETSTR = getRSTVAL1(rstL1RSLSET,"DOD_PKGTP","C");                        if(L_TMPSTR != null && !L_TMPSTR.equals(""))                        {                                return L_RETSTR;                         }                        strMKTTP = getRSTVAL1(rstL1RSLSET,"DOD_PRTYPE","C");                        strDORNO = getRSTVAL1(rstL1RSLSET,"DOD_DONO","C");                        strPRDDS = getRSTVAL1(rstL1RSLSET,"DOD_GRADEC","C");                        strPRDCD = getPRMST(strPRDDS);                        getDOTRN(strMKTTP+strDORNO+strPRDCD);                        L_RETSTR = strPKGTP;                    }                    catch (Exception L_SE1)                    {                         //showEXMSG(L_SE1,"getFLDVL","");                    }                }                else if(LP_FLDNM.equals("INT_PRDCD"))                {                        L_TMPSTR = getRSTVAL1(rstL1RSLSET,"INT_GRADEC","C");                        L_RETSTR = getPRMST(L_TMPSTR);                }                else if(LP_FLDNM.equals("DOT_PRDCD"))                {                        L_TMPSTR = getRSTVAL1(rstL1RSLSET,"DOT_GRADEC","C");                        L_RETSTR = getPRMST(L_TMPSTR);                }                else if(LP_FLDNM.equals("CC_PKGTP"))                {                        L_RETSTR = "01";                }                else if(LP_FLDNM.equals("GR_PKGTP"))                {                        L_RETSTR = "01";                }                else if(LP_FLDNM.toUpperCase().equals("LA_LADDT"))                {                        L_TMPSTR = getRSTVAL(rstL1RSLSET,"LA_LADDT","D");                        if(L_TMPSTR.length() == 10)                                L_TMPSTR = L_TMPSTR.substring(6,10)+"-"+L_TMPSTR.substring(3,5)+"-"+L_TMPSTR.substring(0,2)+"-00.00.01";                        else                                L_TMPSTR = "null";                        L_RETSTR = L_TMPSTR;                }                else if(LP_FLDNM.equals("DO_AMNDNO"))                {                        L_RETSTR = getRSTVAL1(rstL1RSLSET,"DO_AMNDNO","C");                        strMKTTP = getRSTVAL1(rstL1RSLSET,"DO_PRTYPE","C");                        strTRNTP = "DO";                        strDOCNO = getRSTVAL1(rstL1RSLSET,"DO_NO","C");                        strREMDS = getRSTVAL1(rstL1RSLSET,"DO_SPLINST","C");                        if(strREMDS.equals(""))                           return L_RETSTR;                        getDOMST(strMKTTP+strDOCNO);                        getINMST(strMKTTP+strINDNO);                        strSTSFL = getRSTVAL1(rstL1RSLSET,"DO_STATUS","C");                        strLUSBY = getRSTVAL1(rstL1RSLSET,"DO_LUID","C");                        strLUPDT = getRSTVAL1(rstL1RSLSET,"DO_LUPD","D");                        strLUPDT = M_fmtDBDAT.format(M_fmtLCDAT.parse(strLUPDT));                        String L_J1    = "','";                        String R1_STRSQL  = "insert into MR_RMMST (RM_MKTTP,RM_TRNTP,RM_DOCNO,RM_REMDS,RM_STSFL,RM_TRNFL,RM_LUSBY,RM_LUPDT, RM_SBSCD) ";                               R1_STRSQL += " values ('"+strMKTTP+ L_J1 + strTRNTP + L_J1 + strDOCNO + L_J1 + delQuote(strREMDS)+ L_J1 +strSTSFL+ L_J1 +"0"+ L_J1 +strLUSBY+ "','" +strLUPDT+"','"+strSBSCD+"')";                        String R2_STRSQL  = "update  MR_RMMST set RM_REMDS = '"+delQuote(strREMDS)+"' , RM_LUPDT = '"+strLUPDT+"', RM_LUSBY = '"+strLUSBY+"', RM_SBSCD = '"+ strSBSCD + "'";                               R2_STRSQL += " where RM_MKTTP||RM_TRNTP||RM_DOCNO = '"+strMKTTP+strTRNTP+strDOCNO+"'";                        //System.out.println("R1_STRSQL:"+R1_STRSQL);                        //System.out.println("R2_STRSQL:"+R2_STRSQL);                        String R0_STRSQL = "select count(*) from MR_RMMST where RM_MKTTP||RM_TRNTP||RM_DOCNO = '"+strMKTTP+"DO"+strDOCNO+"'";                        //System.out.println("R0_STRSQL :"+R0_STRSQL);                        int L_RECCNT = getRECCNT(R0_STRSQL);                        String RR_STRSQL = R1_STRSQL;                        if(L_RECCNT > 0)                                RR_STRSQL = R2_STRSQL;                        //System.out.println(RR_STRSQL);                        cl_dat.exeSQLUPD(RR_STRSQL,"");                        cl_dat.exeDBCMT("getFLDVAL");                 }           }           catch (Exception L_EX)           {                 //showEXMSG(L_EX,"getFLDVL","");           }           //System.out.println("getFLDVL : "+LP_FLDNM+"/"+L_RETSTR);           //oppOPTNPN.showMessageDialog(this,"getFLDVL : "+LP_FLDNM+"/"+L_RETSTR,"Message",JOptionPane.INFORMATION_MESSAGE);           return L_RETSTR;        }        /** Method for returning values from Result Set
         * <br> with respective verifications against various data types
         * @param	LP_RSLSET		Result set name
         * @param	LP_FLDNM		Name of the field for which data is to be extracted
         * @param	LP_FLDTP		Data Type of the field
         */
		private String getRSTVAL(ResultSet LP_RSLSET, String LP_FLDNM, String LP_FLDTP) {            String L_RETVL = "";            try            {		if (LP_FLDTP.equals("C"))                {                        L_RETVL = delQuote(nvlSTRVL(LP_RSLSET.getString(LP_FLDNM).toString()," "));                }		else if (LP_FLDTP.equals("D"))                {                        L_RETVL = M_fmtLCDAT.format(LP_RSLSET.getDate(LP_FLDNM));                }		else if (LP_FLDTP.equals("T"))                {                        L_RETVL = M_fmtDBDTM.format(M_fmtLCDTM.parse(LP_RSLSET.getString(LP_FLDNM)));                }                //System.out.println(LP_FLDNM+" : "+L_RETVL);           }           catch (Exception L_EX)           {                 //showEXMSG(L_EX,"getRSTVAL","");           }        return L_RETVL;        } 			/** Method for exclusive updations of tax transactions
		 * through getFLDVL
		 */        private void updTXDOC()        {          try          {                String L_SYSCD, L_SBSTP, L_DOCTP, L_DOCNO, L_PRDCD, L_TRNTP, L_SBSCD, L_CCL01, L_CCL02, L_CCL03, L_CC1RF, L_CC2RF, L_CC3RF, L_EXCVL, L_EXCFL, L_TRNFL, L_STSFL, L_LUSBY, L_LUPDT, L_PRTTP, L_PRTCD, L_CODVL;                L_CCL01="0.00";                L_CCL02="0.00";                L_CCL03="0.00";                L_CC1RF="";                L_CC2RF="";                L_CC3RF="";                // Default field values setting                L_SYSCD = "MR";                L_SBSTP = strMKTTP;                L_DOCTP = "COR";                L_DOCNO = strINDNO;                L_PRDCD = strPRDCD;                L_TRNTP = "T";                  // Transaction level tax                L_SBSCD = strZONCD1+strSALTP1+"00";                String[] staCCLVL = new String[3];                String[] staCCLRF = new String[3];                staCCLVL[0] = strCDCVL;                staCCLVL[1] = strDDCVL;                staCCLVL[2] = strTDCVL;                staCCLRF[0] = "C"+nvlSTRVL(strCNSCD,"");                staCCLRF[1] = "D"+nvlSTRVL(strDSRCD,"");                staCCLRF[2] = "C"+nvlSTRVL(strTDCRF,"");                int L_CCLCT = 1;                for (int i=0; i<3 ; i++)                {                        if (Double.parseDouble(staCCLVL[i])>0)                        {                                if(L_CCLCT==1)                                {                                        L_CCL01 = staCCLVL[i];                                        L_CC1RF = staCCLRF[i];                                }                                else if(L_CCLCT==2)                                {                                        L_CCL02 = staCCLVL[i];                                        L_CC2RF = staCCLRF[i];                                }                                else if(L_CCLCT==3)                                {                                        L_CCL03 = staCCLVL[i];                                        L_CC3RF = staCCLRF[i];                                }                                L_CCLCT++;                         }                }                L_EXCVL = strEXCRT;                L_EXCFL = "P";                L_TRNFL = "0";                L_STSFL = "";                L_LUSBY = strLUSBY;                L_LUPDT = M_fmtDBDAT.format(M_fmtLCDAT.parse(strLUPDT));                                        String J1    = "','";                        String J2    = " , ";                        String R1_STRSQL  = "insert into CO_TXDOC (TX_SYSCD,    TX_SBSTP,  TX_DOCTP,  TX_DOCNO,  TX_PRDCD,  TX_SBSCD,  TX_TRNTP,  TX_EXCFL,  TX_TRNFL,  TX_STSFL,  TX_LUSBY,    TX_LUPDT)";                               R1_STRSQL +=           " values ('"+L_SYSCD+J1+  L_SBSTP+J1+L_DOCTP+J1+L_DOCNO+J1+L_PRDCD+J1+L_SBSCD+J1+L_TRNTP+J1+L_EXCFL+J1+L_TRNFL+J1+L_STSFL+J1+L_LUSBY+"','"+L_LUPDT+"')";                        String R2_STRSQL  = "update  CO_TXDOC set ";                        R2_STRSQL += " TX_SBSCD = '"+L_SBSCD+"',";                        R2_STRSQL += " TX_TRNTP = '"+L_TRNTP+"',";                        R2_STRSQL += " TX_EXCVL =  "+L_EXCVL+" ,";                        R2_STRSQL += " TX_EXCFL = '"+L_EXCFL+"',";                        R2_STRSQL += " TX_TRNFL = '"+L_TRNFL+"',";                        R2_STRSQL += " TX_STSFL = '"+L_STSFL+"',";                        R2_STRSQL += " TX_LUSBY = '"+L_LUSBY+"',";                        R2_STRSQL += " TX_LUPDT = '"+L_LUPDT+"'  where ";                        R2_STRSQL += " TX_SYSCD = '"+L_SYSCD+"' and ";                        R2_STRSQL += " TX_SBSTP = '"+L_SBSTP+"' and ";                        R2_STRSQL += " TX_DOCTP = '"+L_DOCTP+"' and ";                        R2_STRSQL += " TX_DOCNO = '"+L_DOCNO+"' and ";                        R2_STRSQL += " TX_PRDCD = '"+L_PRDCD+"'";                        String R0_STRSQL = "select count(*) from CO_TXDOC where ";                        R0_STRSQL += " TX_SYSCD = '"+L_SYSCD+"' and ";                        R0_STRSQL += " TX_SBSTP = '"+L_SBSTP+"' and ";                        R0_STRSQL += " TX_DOCTP = '"+L_DOCTP+"' and ";                        R0_STRSQL += " TX_DOCNO = '"+L_DOCNO+"' and ";                        R0_STRSQL += " TX_PRDCD = '"+L_PRDCD+"'";                        int L_RECCNT = getRECCNT(R0_STRSQL);                        String RR_STRSQL = R1_STRSQL;                        if(L_RECCNT > 0)                                RR_STRSQL = R2_STRSQL;                        //System.out.println(RR_STRSQL);                        cl_dat.exeSQLUPD(RR_STRSQL,"");                        cl_dat.exeDBCMT("updTXDOC");               }               catch (Exception L_EX) {}        }        /** In the beginning, Credit claim, Distributor discount, Excise duty were saved into CO_TXSPC        *   <br> Currently these details are recorded in CO_TXDOC, Howevere this method could be used as guideline for        *   <br> recording tax details in CO_TXSPC        */        private void updTXSPC()        {           try           {                String L_SYSCD, L_SBSTP, L_DOCTP, L_DOCNO, L_PRDCD, L_TRNTP, L_SBSCD, L_CODCD, L_CODDS, L_CODFL, L_PRCSQ, L_TRNFL, L_STSFL, L_LUSBY, L_LUPDT, L_PRTTP, L_PRTCD, L_CODVL;                // Default field values setting                L_SYSCD = "MR";                L_SBSTP = strMKTTP;                L_DOCTP = "COR";                L_DOCNO = strINDNO;                L_PRDCD = strPRDCD;                L_TRNTP = "T";                  // Transaction level tax                L_SBSCD = strZONCD1+strSALTP1+"00";                L_CODCD = "007";                // code for credit claim                L_CODDS = "Credit Discount";                L_CODFL = "A";                  // Amount                L_PRCSQ = "00";                L_TRNFL = "0";                L_STSFL = "";                L_LUSBY = strLUSBY;                L_LUPDT = M_fmtDBDAT.format(M_fmtLCDAT.parse(strLUPDT));                                // Credit discount for consignee                if (Double.parseDouble(strCDCVL)>0.00)                {                        L_PRTTP = "C";                  // Consignee                        L_PRTCD = strCNSCD;                        L_CODVL = strCDCVL;                        updTXSPC1(L_SYSCD, L_SBSTP, L_DOCTP, L_DOCNO, L_PRDCD, L_TRNTP, L_SBSCD, L_CODCD, L_CODDS, L_CODFL, L_PRCSQ, L_TRNFL, L_STSFL, L_LUSBY, L_LUPDT, L_PRTTP, L_PRTCD, L_CODVL);                }                // Credit discount for distributor                if (Double.parseDouble(strDDCVL)>0.00)                {                        L_PRTTP = "D";                  // Distributor                        L_PRTCD = strDSRCD;                        L_CODVL = strDDCVL;                        updTXSPC1(L_SYSCD, L_SBSTP, L_DOCTP, L_DOCNO, L_PRDCD, L_TRNTP, L_SBSCD, L_CODCD, L_CODDS, L_CODFL, L_PRCSQ, L_TRNFL, L_STSFL, L_LUSBY, L_LUPDT, L_PRTTP, L_PRTCD, L_CODVL);                }                // Credit discount for third party                if (Double.parseDouble(strTDCVL)>0.00)                {                        L_PRTTP = "C";                  // Third party                        L_PRTCD = strTDCRF;                        L_CODVL = strTDCVL;                        updTXSPC1(L_SYSCD, L_SBSTP, L_DOCTP, L_DOCNO, L_PRDCD, L_TRNTP, L_SBSCD, L_CODCD, L_CODDS, L_CODFL, L_PRCSQ, L_TRNFL, L_STSFL, L_LUSBY, L_LUPDT, L_PRTTP, L_PRTCD, L_CODVL);                }                L_PRDCD = "XXXXXXXXXX";                L_TRNTP = "M";                  // Master level Tax                L_CODCD = "010";                // code for Excise Duty                L_CODDS = "Excise Duty";                L_CODFL = "P";                  // Percentage                L_PRCSQ = "10";                // Credit discount for third party                if (Double.parseDouble(strEXCRT)>0.00)                {                        L_PRTTP = "X";                  // Third party                        L_PRTCD = "XXXXX";                        L_CODVL = strEXCRT;                        updTXSPC1(L_SYSCD, L_SBSTP, L_DOCTP, L_DOCNO, L_PRDCD, L_TRNTP, L_SBSCD, L_CODCD, L_CODDS, L_CODFL, L_PRCSQ, L_TRNFL, L_STSFL, L_LUSBY, L_LUPDT, L_PRTTP, L_PRTCD, L_CODVL);                }            }            catch (Exception L_EX) {}        }        /** In the beginning, Credit claim, Distributor discount, Excise duty were saved into CO_TXSPC        *   <br> Currently these details are recorded in CO_TXDOC, Howevere this method could be used as guideline for        *   <br> recording tax details in CO_TXSPC        */        private void updTXSPC1(String L_SYSCD, String L_SBSTP, String L_DOCTP, String L_DOCNO, String L_PRDCD, String L_TRNTP, String L_SBSCD, String L_CODCD, String L_CODDS, String L_CODFL, String L_PRCSQ, String L_TRNFL, String L_STSFL, String L_LUSBY, String L_LUPDT, String L_PRTTP, String L_PRTCD, String L_CODVL)        {                        String J1    = "','";                        String J2    = " , ";                        String R1_STRSQL  = "insert into CO_TXSPC (TXT_SYSCD, TXT_SBSTP, TXT_DOCTP, TXT_DOCNO, TXT_PRDCD, TXT_CODCD, TXT_PRTTP, TXT_PRTCD, TXT_SBSCD, TXT_TRNTP, TXT_CODDS,   TXT_CODVL, TXT_CODFL, TXT_PRCSQ, TXT_TRNFL, TXT_STSFL, TXT_LUSBY, TXT_LUPDT)";                               R1_STRSQL +=           " values ('"+strMKTTP+J1+ L_SBSTP+J1+L_DOCTP+J1+L_DOCNO+J1+L_PRDCD+J1+L_CODCD+J1+L_PRTTP+J1+L_PRTCD+J1+L_SBSCD+J1+L_TRNTP+J1+L_CODDS+"',"+L_CODVL+",'"+L_CODFL+J1+L_PRCSQ+J1+L_TRNFL+J1+L_STSFL+J1+L_LUSBY+"','"+L_LUPDT+"')";                        String R2_STRSQL  = "update  CO_TXSPC set ";                        R2_STRSQL += " TXT_SBSCD = '"+L_SBSCD+"',";                        R2_STRSQL += " TXT_TRNTP = '"+L_TRNTP+"',";                        R2_STRSQL += " TXT_CODDS = '"+L_CODDS+"',";                        R2_STRSQL += " TXT_CODVL =  "+L_CODVL+" ,";                        R2_STRSQL += " TXT_CODFL = '"+L_CODFL+"',";                        R2_STRSQL += " TXT_PRCSQ = '"+L_PRCSQ+"',";                        R2_STRSQL += " TXT_TRNFL = '"+L_TRNFL+"',";                        R2_STRSQL += " TXT_STSFL = '"+L_STSFL+"',";                        R2_STRSQL += " TXT_LUSBY = '"+L_LUSBY+"',";                        R2_STRSQL += " TXT_LUPDT = '"+L_LUPDT+"'  where ";                        R2_STRSQL += " TXT_SYSCD = '"+L_SYSCD+"' and ";                        R2_STRSQL += " TXT_SBSTP = '"+L_SBSTP+"' and ";                        R2_STRSQL += " TXT_DOCTP = '"+L_DOCTP+"' and ";                        R2_STRSQL += " TXT_DOCNO = '"+L_DOCNO+"' and ";                        R2_STRSQL += " TXT_PRDCD = '"+L_PRDCD+"' and ";                        R2_STRSQL += " TXT_CODCD = '"+L_CODCD+"' and ";                        R2_STRSQL += " TXT_PRTTP = '"+L_PRTTP+"' and ";                        R2_STRSQL += " TXT_PRTCD = '"+L_PRTCD+"'";                        String R0_STRSQL = "select count(*) from CO_TXSPC where ";                        R0_STRSQL += " TXT_SYSCD = '"+L_SYSCD+"' and ";                        R0_STRSQL += " TXT_SBSTP = '"+L_SBSTP+"' and ";                        R0_STRSQL += " TXT_DOCTP = '"+L_DOCTP+"' and ";                        R0_STRSQL += " TXT_DOCNO = '"+L_DOCNO+"' and ";                        R0_STRSQL += " TXT_PRDCD = '"+L_PRDCD+"' and ";                        R0_STRSQL += " TXT_CODCD = '"+L_CODCD+"' and ";                        R0_STRSQL += " TXT_PRTTP = '"+L_PRTTP+"' and ";                        R0_STRSQL += " TXT_PRTCD = '"+L_PRTCD+"'";                        int L_RECCNT = getRECCNT(R0_STRSQL);                        String RR_STRSQL = R1_STRSQL;                        if(L_RECCNT > 0)                                RR_STRSQL = R2_STRSQL;                        //System.out.println(RR_STRSQL);                        cl_dat.exeSQLUPD(RR_STRSQL,"");                        cl_dat.exeDBCMT("updTXSPC1");         }		/** Method to return prodct code for Specified Product Description
		 * @param	LP_PRMST_KEY	Product Description
		 */        private String getPRMST(String LP_PRMST_KEY)        {        String L_RETSTR = "";        try        {                if(!htbPRMST.containsKey(LP_PRMST_KEY))                        return L_RETSTR;                String[] staPRMST = (String[])htbPRMST.get(LP_PRMST_KEY);                L_RETSTR = staPRMST[intAE_PR_PRDCD];        }        catch (Exception L_EX){}        return L_RETSTR;        }		/** Picking up Indent Master related details from Hash Table
		 * <B> for Specified Indent Master key
		 * @param LP_INMST_KEY	Indent master key
		 */        private void getINMST(String LP_INMST_KEY)        {        try        {               String[] staINMST = (String[])htbINMST.get(LP_INMST_KEY);                strSALTP = staINMST[intAE_IN_SALTP];                strZONCD = staINMST[intAE_IN_ZONCD];                strCNSCD = staINMST[intAE_IN_CNSCD];                strDSRCD = staINMST[intAE_IN_DSRCD];                strSALTP1 = getCDTRN("SYSMRXXSAL"+strSALTP,"CMT_CCSVL");                strZONCD1 = getCDTRN("SYSMRXXZON"+strZONCD,"CMT_CCSVL");                strSBSCD = strZONCD1+strSALTP1+"00";        }        catch (Exception L_EX){}        }		/** Picking up D.O. Master related details from Hash Table
		 * <B> for Specified D.O. Master key
		 * @param LP_DOMST_KEY	D.O. master key
		 */        private void getDOMST(String LP_DOMST_KEY)        {        try        {                String[] staDOMST = (String[])htbDOMST.get(LP_DOMST_KEY);                strINDNO = staDOMST[intAE_DO_INDNO];        }        catch (Exception L_EX){}        }		/** Picking up D.O.Transaction related details from Hash Table
		 * <B> for Specified D.O.Transaction key
		 * @param LP_DOTRN_KEY	D.O.Transaction key
		 */        private void getDOTRN(String LP_DOTRN_KEY)        {        try        {                String[] staDOTRN = (String[])htbDOTRN.get(LP_DOTRN_KEY);                strPKGTP = staDOTRN[intAE_DOT_PKGTP];        }        catch (Exception L_EX){}        }		/** Picking up Specified Codes Transaction related details from Hash Table
		 * <B> for Specified Code Transaction key
		 * @param LP_CDTRN_KEY	Code Transaction key
		 * @param LP_FLDNM		Field name for which, details have to be picked up
		 */        private String getCDTRN(String LP_CDTRN_KEY, String LP_FLDNM)        {        String L_RETSTR = "";        try        {                String[] staCDTRN = (String[])htbCDTRN.get(LP_CDTRN_KEY);                if (LP_FLDNM.equals("CMT_CODDS"))                        L_RETSTR = staCDTRN[intAE_CMT_CODDS];                else if (LP_FLDNM.equals("CMT_SHRDS"))                        L_RETSTR = staCDTRN[intAE_CMT_SHRDS];                else if (LP_FLDNM.equals("CMT_CHP01"))                        L_RETSTR = staCDTRN[intAE_CMT_CHP01];                else if (LP_FLDNM.equals("CMT_CHP02"))                        L_RETSTR = staCDTRN[intAE_CMT_CHP02];                else if (LP_FLDNM.equals("CMT_NMP01"))                        L_RETSTR = staCDTRN[intAE_CMT_NMP01];                else if (LP_FLDNM.equals("CMT_NMP02"))                        L_RETSTR = staCDTRN[intAE_CMT_NMP02];                else if (LP_FLDNM.equals("CMT_NCSVL"))                        L_RETSTR = staCDTRN[intAE_CMT_NCSVL];                else if (LP_FLDNM.equals("CMT_CCSVL"))                        L_RETSTR = staCDTRN[intAE_CMT_CCSVL];        }        catch (Exception L_EX){}        return L_RETSTR;        }		/** Picking up Indent Transaction related details from Hash Table
		 * <B> for Specified Indent Transaction key
		 * @param LP_INTRN_KEY	Indent Transaction key
		 */        private void getINTRN(String LP_INTRN_KEY)        {        try        {               String[] staINTRN = (String[])htbINTRN.get(LP_INTRN_KEY);                strCDCVL = staINTRN[intAE_INT_CDCVL];                strDDCVL = staINTRN[intAE_INT_DDCVL];                strTDCVL = staINTRN[intAE_INT_TDCVL];                strTDCRF = staINTRN[intAE_INT_TDCRF];                strEXCRT = staINTRN[intAE_INT_EXCRT];        }        catch (Exception L_EX){}        }        /** Procedure to pickup resultset values from VFP Resultset
         * @param	Resultset Name
         * @param	Field name
         * @param	Dtata type of the field        */        private String getRSTVAL1(ResultSet LP_RSLSET, String LP_FLDNM, String LP_FLDTP)        {            //System.out.println("parameters in getRSTVAL1  : "+LP_FLDNM+"   "+LP_FLDTP);            String L_RETVL = "";            try            {                if (LP_FLDTP.equals("C")||LP_FLDTP.equals("N"))                {                        L_RETVL = delQuote(nvlSTRVL(LP_RSLSET.getString(LP_FLDNM).toString(),""));                }		else if (LP_FLDTP.equals("D"))                {                        //System.out.println("parameters for Date Field  : "+LP_FLDNM+"   "+LP_FLDTP);                        L_RETVL = M_fmtLCDAT.format(LP_RSLSET.getDate(LP_FLDNM));                        //System.out.println("Value of L_RETVL  : "+L_RETVL);                        if(L_RETVL.length()==10)                        {                        if(L_RETVL.substring(6,10).equals("1899"))                                L_RETVL="";                        }                }                else if (LP_FLDTP.equals("T"))                {                        L_RETVL = M_fmtDBDTM.format(M_fmtLCDTM.parse(LP_RSLSET.getString(LP_FLDNM)));                }            }            catch (Exception L_EX)            {                 //showEXMSG(L_EX,"getRSTVAL1","");            }        //setMSG(LP_FLDNM+" : "+L_RETVL,'N');        //System.out.println(LP_FLDNM+" : "+L_RETVL);        return L_RETVL;        } 	//***************************************************************************		/** Inserting data into the Control Table (MR_DTREF)
		 */
		
		private void insREFTBL()        {                insREFTBL1("01","1","CC_MKTTP" ,"CC_PRTYPE","C");                insREFTBL1("01","2","CC_DOCTP" ,"CC_DOCTYPE","C");                insREFTBL1("01","3","CC_PRTTP" ,"CC_CTTYPE","C");                insREFTBL1("01","4","CC_PRTCD" ,"CC_CTCODE","C");                insREFTBL1("01","5","CC_INVNO" ,"CC_INVNO","C");                insREFTBL1("01","6","CC_PRDCD" ,"CC_PRDCD","X");                insREFTBL1("01","7","CC_PKGTP" ,"CC_PKGTP","X");                insREFTBL1("01","x","CC_CRNNO" ,"CC_CRNNO","C");                insREFTBL1("01","x","CC_CRNDT" ,"CC_CRNDT","D");                insREFTBL1("01","x","CC_ZONCD" ,"CC_ZONE","C");                insREFTBL1("01","x","CC_INDNO" ,"CC_INDNO","C");                insREFTBL1("01","x","CC_PRDCT" ,"CC_PRODCD","C");                insREFTBL1("01","x","CC_PRDDS" ,"CC_GRADECD","C");                insREFTBL1("01","x","CC_DSRCD" ,"CC_DISTREF","C");                insREFTBL1("01","x","CC_INVDT" ,"CC_INVDT","D");                insREFTBL1("01","x","CC_INVQT" ,"CC_INVQTY","N");                insREFTBL1("01","x","CC_DDCVL" ,"CC_DCNT","N");                insREFTBL1("01","x","CC_CRNVL" ,"CC_CRAMT","N");                insREFTBL1("01","x","CC_PRTTP1","CC_TRCTTYP","C");                insREFTBL1("01","x","CC_PRTCD1","CC_TRCTCOD","C");                insREFTBL1("01","x","CC_DDCVL1","CC_TRDCNT","N");                insREFTBL1("01","x","CC_CRNVL1","CC_TRCRAMT","N");                insREFTBL1("01","x","CC_AUTVL" ,"CC_AUTHAMT","N");                insREFTBL1("01","x","CC_FCMVL" ,"CC_FCAMT","N");                insREFTBL1("01","x","CC_DOCNO" ,"CC_PMDOC","C");                insREFTBL1("01","x","CC_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("01","x","CC_STSFL" ,"CC_STATUS","C");                insREFTBL1("01","x","CC_LUSBY" ,"CC_LUID","C");                insREFTBL1("01","x","CC_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("02","1","CF_MKTTP" ,"CF_PRTYPE","C");                insREFTBL1("02","2","CF_CRDTP" ,"CF_CRDTYPE","C");                insREFTBL1("02","3","CF_DOCTP" ,"CF_DOCTYPE","C");                insREFTBL1("02","4","CF_DOCFR" ,"CF_FDOCNO","C");                insREFTBL1("02","x","CF_DOCTO" ,"CF_TDOCNO","C");                insREFTBL1("02","x","CF_CRFDT" ,"CF_DATE","D");                insREFTBL1("02","x","CF_CRFVL" ,"CF_AMOUNT","N");                insREFTBL1("02","x","CF_LUSBY" ,"CF_LUID","C");                insREFTBL1("02","x","CF_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("03","1","CMT_CGMTP" ,"CMT_TYPE","C");                insREFTBL1("03","2","CMT_CODCD" ,"CMT_VALUE","C");                insREFTBL1("03","x","CMT_CODDS" ,"CMT_DESC","C");                insREFTBL1("03","x","CMT_SHRDS" ,"CMT_SHDESC","C");                insREFTBL1("03","x","CMT_CHP01" ,"CMT_CHPAR1","C");                insREFTBL1("03","x","CMT_CHP02" ,"CMT_CHPAR2","C");                insREFTBL1("03","x","CMT_RPTSQ" ,"CMT_RPTORD","C");                insREFTBL1("03","x","CMT_NMP01" ,"CMT_F_NPAR","N");                insREFTBL1("03","x","CMT_NMP02" ,"CMT_T_NPAR","N");                insREFTBL1("03","x","CMT_MODFL" ,"CMT_MODSTA","C");                insREFTBL1("03","x","CMT_LUSBY" ,"CMT_LUID","C");                insREFTBL1("03","x","CMT_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("04","1","PT_PRTTP" ,"CT_TYPE","C");                insREFTBL1("04","2","PT_PRTCD" ,"CT_CODE","C");                insREFTBL1("04","x","PT_PRTNM" ,"CT_NAME","C");                insREFTBL1("04","x","PT_SHRNM" ,"CT_SHNAME","C");                insREFTBL1("04","x","PT_GRPCD" ,"CT_GROUP","C");                insREFTBL1("04","x","PT_ADR01" ,"CT_ADDR1","C");                insREFTBL1("04","x","PT_ADR02" ,"CT_ADDR2","C");                insREFTBL1("04","x","PT_ADR03" ,"CT_ADDR3","C");                insREFTBL1("04","x","PT_ADR04" ,"CT_ADDR4","C");                insREFTBL1("04","x","PT_CTYNM" ,"CT_CITY","C");                insREFTBL1("04","x","PT_PINCD" ,"CT_PINCODE","C");                insREFTBL1("04","x","PT_STACD" ,"CT_STATCD","C");                insREFTBL1("04","x","PT_CNTCD" ,"CT_CNTRYCD","C");                insREFTBL1("04","x","PT_CONNM" ,"CT_CONTACT","C");                insREFTBL1("04","x","PT_TEL01" ,"CT_TEL_NO1","C");                insREFTBL1("04","x","PT_TEL02" ,"CT_TEL_NO2","C");                insREFTBL1("04","x","PT_FAXNO" ,"CT_FAX","C");                insREFTBL1("04","x","PT_EMLRF" ,"CT_EMAILID","C");                insREFTBL1("04","x","PT_INFFL" ,"CT_IORF","C");                insREFTBL1("04","x","PT_STXNO" ,"CT_ST_NO","C");                insREFTBL1("04","x","PT_STXDT" ,"CT_ST_WEF","D");                insREFTBL1("04","x","PT_CLSCD" ,"CT_CLASS","C");                insREFTBL1("04","x","PT_SCRCD" ,"CT_SCORE","C");                insREFTBL1("04","x","PT_CSTNO" ,"CT_CST_NO","C");                insREFTBL1("04","x","PT_CSTDT" ,"CT_CST_WEF","D");                insREFTBL1("04","x","PT_ECCNO" ,"CT_ECC","C");                insREFTBL1("04","x","PT_ITPNO" ,"CT_ITPANNO","C");                insREFTBL1("04","x","PT_EXCNO" ,"CT_EXCNO","C");                insREFTBL1("04","x","PT_RNGDS" ,"CT_RANGE","C");                insREFTBL1("04","x","PT_DIVDS" ,"CT_DIVISIO","C");                insREFTBL1("04","x","PT_CLLDS" ,"CT_CLLECTR","C");                insREFTBL1("04","x","PT_ZONCD" ,"CT_ZONE","C");                insREFTBL1("04","x","PT_YOPCR" ,"CT_YROPCR","N");                insREFTBL1("04","x","PT_YOPDB" ,"CT_YROPDB","N");                insREFTBL1("04","x","PT_SALVL" ,"CT_SALAMT","N");                insREFTBL1("04","x","PT_DSRCD" ,"CT_DISTREF","C");                insREFTBL1("04","x","PT_EVLDT" ,"CT_REGDT","D");                insREFTBL1("04","x","PT_TRNCD" ,"CT_TRANREF","C");                insREFTBL1("04","x","PT_STSFL" ,"CT_OBTAG","C");                insREFTBL1("04","x","PT_TSTFL" ,"CT_TSTTAG","C");                insREFTBL1("04","x","PT_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("04","x","PT_LUSBY" ,"CT_LUID","C");                insREFTBL1("04","x","PT_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("05","1","DOD_MKTTP" ,"DOD_PRTYPE","C");                insREFTBL1("05","2","DOD_DORNO" ,"DOD_DONO","C");                insREFTBL1("05","3","DOD_PRDCD" ,"DOD_PRDCD","C");                insREFTBL1("05","4","DOD_SRLNO" ,"DOD_SRLNO","C");                insREFTBL1("05","x","DOD_DSPDT" ,"DOD_DSPDT","D");                insREFTBL1("05","x","DOD_PKGTP" ,"DOD_PKGTP","X");              //insREFTBL1("05","x","DOD_LADNO" ,"DOD_LADNO","C");              //insREFTBL1("05","x","DOD_LADDT" ,"DOD_LADDT","D");              //insREFTBL1("05","x","DOD_LADQT" ,"DOD_LAQTY","N");                insREFTBL1("05","x","DOD_DORQT" ,"DOD_QTY","N");                insREFTBL1("05","x","DOD_STSFL" ,"DOD_STATUS","C");                insREFTBL1("05","x","DOD_DELTP" ,"DOD_DELTYP","C");                insREFTBL1("05","x","DOD_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("05","x","DOD_LUSBY" ,"DOD_LUID","C");                insREFTBL1("05","x","DOD_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("05","x","DOD_SBSCD" ,"DOD_SBSCD","X");                insREFTBL1("06","1","GR_PRDCD" ,"GR_PRDCD","C");                insREFTBL1("06","2","GR_PKGTP" ,"GR_PKGTP","X");                insREFTBL1("06","x","GR_PRDRT" ,"GR_RATE","N");                insREFTBL1("06","x","GR_PRDDS" ,"GR_GRADECD","C");                insREFTBL1("06","x","GR_UOMCD" ,"GR_UOM","C");                insREFTBL1("06","x","GR_QLTFL" ,"GR_QLTYTAG","C");                insREFTBL1("06","x","GR_OBSFL" ,"GR_OBSTAG","C");                insREFTBL1("06","x","GR_PKGWT" ,"GR_PKGWT","N");                insREFTBL1("06","x","GR_STKQT" ,"GR_STKQTY","N");                insREFTBL1("06","x","GR_BKGQT" ,"GR_BKGQT","N");                insREFTBL1("06","x","GR_CLSQT" ,"GR_CSTQT","N");                insREFTBL1("06","x","GR_UCLQT" ,"GR_USTQT","N");                insREFTBL1("06","x","GR_RESQT" ,"GR_RSTQT","N");                insREFTBL1("06","x","GR_TBGQT" ,"GR_TBGQT","N");                insREFTBL1("06","x","GR_MBGQT" ,"GR_MBGQT","N");                insREFTBL1("06","x","GR_YBGQT" ,"GR_YBGQT","N");                insREFTBL1("06","x","GR_MINQT" ,"GR_MINQT","N");                insREFTBL1("06","x","GR_TPRQT" ,"GR_TPRQT","N");                insREFTBL1("06","x","GR_TMRQT" ,"GR_TMRQT","N");                insREFTBL1("06","x","GR_LDONO" ,"GR_PRVDONO","C");                insREFTBL1("06","x","GR_LDODT" ,"GR_PRVDODT","D");                insREFTBL1("06","x","GR_LDORT" ,"GR_PRVDORT","N");                insREFTBL1("06","x","GR_LIVNO" ,"GR_PRVINVN","C");                insREFTBL1("06","x","GR_LIVDT" ,"GR_PRVINVD","D");                insREFTBL1("06","x","GR_LIVRT" ,"GR_PRVINVR","N");                insREFTBL1("06","x","GR_LINNO" ,"GR_PRINDNO","C");                insREFTBL1("06","x","GR_LINDT" ,"GR_PRINDDT","D");                insREFTBL1("06","x","GR_LINRT" ,"GR_PRINDRT","N");                insREFTBL1("06","x","GR_EXCRT" ,"GR_EXCDUTY","N");                insREFTBL1("06","x","GR_LUSBY" ,"GR_LUID","C");                insREFTBL1("06","x","GR_LUPDT" ,"XX_LUPDT","X");                //insREFTBL1("06","x","GR_AVGRT" ,"GR_AVGRT","N");                //insREFTBL1("06","x","GR_AVGDT" ,"GR_AVGDT","D");                //insREFTBL1("06","x","GR_AVGBY" ,"GR_AVGBY","C");                insREFTBL1("06","x","GR_SLRQT" ,"GR_SLRQT","N");                insREFTBL1("07","1","IN_MKTTP" ,"IN_PRTYPE","C");                insREFTBL1("07","2","IN_INDNO" ,"IN_INDNO","C");                insREFTBL1("07","x","IN_INDDT" ,"IN_INDDT","D");                insREFTBL1("07","x","IN_DORNO" ,"IN_DONO","C");                insREFTBL1("07","x","IN_AMDNO" ,"IN_AMNDNO","C");                insREFTBL1("07","x","IN_AMDDT" ,"IN_AMNDDT","D");                insREFTBL1("07","x","IN_BKGDT" ,"IN_BOOKDT","D");                //insREFTBL1("07","x","IN_SALTP" ,"IN_SALTYPE","X");                insREFTBL1("07","x","IN_SALTP" ,"IN_SALTP1","X");                insREFTBL1("07","x","IN_DTPCD" ,"IN_DTPCD","C");                insREFTBL1("07","x","IN_DTPDS" ,"IN_DTPDS","C");                insREFTBL1("07","x","IN_PORNO" ,"IN_PONO","C");                insREFTBL1("07","x","IN_PORDT" ,"IN_PODATE","D");                //insREFTBL1("07","x","IN_ZONCD" ,"IN_ZONE","C");                insREFTBL1("07","x","IN_ZONCD" ,"IN_ZONCD1","X");                insREFTBL1("07","x","IN_PSHFL" ,"IN_PARTSH","C");                insREFTBL1("07","x","IN_CNSCD" ,"IN_CONSIGN","C");                insREFTBL1("07","x","IN_BYRCD" ,"IN_BUYER","C");                insREFTBL1("07","x","IN_CURCD" ,"IN_CURRENC","C");                insREFTBL1("07","x","IN_ECHRT" ,"IN_EXCHRAT","N");                insREFTBL1("07","x","IN_DSRCD" ,"IN_DISTRIB","C");                insREFTBL1("07","x","IN_FAXNO" ,"IN_FAXNO","C");                insREFTBL1("07","x","IN_FAXLC" ,"IN_FAXPLAC","C");                insREFTBL1("07","x","IN_APTVL" ,"IN_PMTACCT","N");                insREFTBL1("07","x","IN_CPTVL" ,"IN_PMTCUST","N");                insREFTBL1("07","x","IN_PMTCD" ,"IN_PMTTYPE","C");                insREFTBL1("07","x","IN_STXCD" ,"IN_STXCD","C");                insREFTBL1("07","x","IN_STXRT" ,"IN_STXRT","N");                insREFTBL1("07","x","IN_OCTCD" ,"IN_OCTCD","C");                insREFTBL1("07","x","IN_OCTRT" ,"IN_OCTRT","N");                insREFTBL1("07","x","IN_SVCCD" ,"IN_SVCCD","C");                insREFTBL1("07","x","IN_SVCRT" ,"IN_SVCRT","N");                insREFTBL1("07","x","IN_STSFL" ,"IN_STATUS","C");                insREFTBL1("07","x","IN_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("07","x","IN_LUSBY" ,"IN_LUID","C");                insREFTBL1("07","x","IN_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("07","x","IN_SBSCD" ,"IN_SBSCD","X");                insREFTBL1("07","x","IN_BKGBY" ,"IN_BKGBY","X");                insREFTBL1("07","x","IN_DSTCD" ,"IN_DSTCD","X");                insREFTBL1("07","x","IN_MOTCD" ,"IN_MOTCD","X");                insREFTBL1("07","x","IN_FILRF" ,"IN_FILRF","X");                insREFTBL1("07","x","IN_PMTRF" ,"IN_PMTRF","X");                insREFTBL1("07","x","IN_INSRF" ,"IN_INSRF","X");                insREFTBL1("07","x","IN_FORRF" ,"IN_FORRF","X");                insREFTBL1("07","x","IN_TSHFL" ,"IN_TSHFL","X");                insREFTBL1("07","x","IN_REGBY" ,"IN_REGBY","X");                insREFTBL1("07","x","IN_REGDT" ,"IN_REGDT","X");                insREFTBL1("07","x","IN_AUTBY" ,"IN_AUTBY","X");                insREFTBL1("08","1","INT_MKTTP" ,"INT_PRTYPE","C");                insREFTBL1("08","2","INT_INDNO" ,"INT_INDNO","C");                insREFTBL1("08","3","INT_PRDCD" ,"INT_PRDCD","X");                insREFTBL1("08","x","INT_PKGTP" ,"INT_PKGTYP","C");                insREFTBL1("08","x","INT_PRDDS" ,"INT_GRADEC","C");                insREFTBL1("08","x","INT_AMDNO" ,"INT_AMNDNO","C");                insREFTBL1("08","x","INT_INDPK" ,"INT_PKGS","N");                insREFTBL1("08","x","INT_PKGWT" ,"INT_PKGWT","N");                insREFTBL1("08","x","INT_REQQT" ,"INT_INDQTY","N");                insREFTBL1("08","x","INT_STDUM" ,"INT_SUOM","C");                insREFTBL1("08","x","INT_ORDUM" ,"INT_OUOM","C");                insREFTBL1("08","x","INT_EUSCD" ,"INT_EUSCD","C");                insREFTBL1("08","x","INT_CNVFT" ,"INT_CNVFAC","N");                insREFTBL1("08","x","INT_INDQT" ,"INT_AUTHQT","N");                insREFTBL1("08","x","INT_BASRT" ,"INT_BASRAT","N");                insREFTBL1("08","x","INT_RTPVL" ,"INT_RATEPE","N");                insREFTBL1("08","x","INT_STSFL" ,"INT_STATUS","C");                insREFTBL1("08","x","INT_AUTBY" ,"INT_AUTHBY","C");                insREFTBL1("08","x","INT_DORQT" ,"INT_DOQTY","N");            //  insREFTBL1("08","x","INT_LADQT" ,"INT_LADQTY","N");            //  insREFTBL1("08","x","INT_INVQT" ,"INT_INVQTY","N");                insREFTBL1("08","x","INT_FCMQT" ,"INT_FCQTY","N");                insREFTBL1("08","x","INT_EXCRT" ,"INT_EXCDUT","N");                insREFTBL1("08","x","INT_CDCVL" ,"INT_CDCNT","N");                insREFTBL1("08","x","INT_DDCVL" ,"INT_DDCNT","N");                insREFTBL1("08","x","INT_TDCVL" ,"INT_TDCNT","N");                insREFTBL1("08","x","INT_TDCRF" ,"INT_TDCONS","C");                insREFTBL1("08","x","INT_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("08","x","INT_LUSBY" ,"INT_LUID","C");                insREFTBL1("08","x","INT_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("08","x","INT_SBSCD" ,"INT_SBSCD","X");                insREFTBL1("08","x","INT_RESRF" ,"INT_RESRF","X");                                                 insREFTBL1("09","1","PA_MKTTP" ,"PA_PRTYPE","C");                insREFTBL1("09","2","PA_CRDTP" ,"PA_CRDTYPE","C");                insREFTBL1("09","3","PA_DOCTP" ,"PA_DOCTYPE","C");                insREFTBL1("09","4","PA_DOCNO" ,"PA_DOCNO","C");                insREFTBL1("09","5","PA_INVTP" ,"PA_IVDOCTY","C");                insREFTBL1("09","6","PA_INVNO" ,"PA_INVNO","C");                insREFTBL1("09","x","PA_DORNO" ,"PA_DONO","C");                insREFTBL1("09","x","PA_INVVL" ,"PA_INVAMT","N");                insREFTBL1("09","x","PA_ADJVL" ,"PA_ADJAMT","N");                insREFTBL1("09","x","PA_FCMVL" ,"PA_FCAMT","N");                insREFTBL1("09","x","PA_STSFL" ,"PA_STATUS","C");                insREFTBL1("09","x","PA_LUSBY" ,"PA_LUID","C");                insREFTBL1("09","x","PA_LUPDT" ,"PA_LUPD","D");                insREFTBL1("09","x","PA_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("09","x","PA_BYRCD" ,"PA_CTCODE","C");                insREFTBL1("09","x","PA_DSRCD" ,"PA_DISTREF","C");                insREFTBL1("10","1","PM_MKTTP" ,"PM_PRTYPE","C");                insREFTBL1("10","2","PM_CRDTP" ,"PM_CRDTYPE","C");                insREFTBL1("10","3","PM_DOCTP" ,"PM_DOCTYPE","C");                insREFTBL1("10","4","PM_DOCNO" ,"PM_DOCNO","C");                insREFTBL1("10","x","PM_DOCDT" ,"PM_DOCDT","D");                insREFTBL1("10","x","PM_DOCVL" ,"PM_DOCAMT","N");                insREFTBL1("10","x","PM_ADJVL" ,"PM_ADJAMT","N");                insREFTBL1("10","x","PM_FCMVL" ,"PM_FCAMT","N");                insREFTBL1("10","x","PM_FCMRF" ,"PM_FCREF","C");                insREFTBL1("10","x","PM_PRTTP" ,"PM_CTTYPE","C");                insREFTBL1("10","x","PM_PRTCD" ,"PM_CTCODE","C");                insREFTBL1("10","x","PM_DSRCD" ,"PM_DISTREF","C");                insREFTBL1("10","x","PM_ZONCD" ,"PM_ZONE","C");                insREFTBL1("10","x","PM_PMTTP" ,"PM_PMTTYPE","C");                insREFTBL1("10","x","PM_IN_VL" ,"PM_INAMT","N");                insREFTBL1("10","x","PM_OUTVL" ,"PM_OUTAMT","N");                insREFTBL1("10","x","PM_OUTRF" ,"PM_OUTREF","C");                insREFTBL1("10","x","PM_DUEDT" ,"PM_PMDUEDT","D");                insREFTBL1("10","x","PM_STSFL" ,"PM_STATUS","C");                insREFTBL1("10","x","PM_DOCRF" ,"PM_REFDOC","C");                insREFTBL1("10","x","PM_ACCRF" ,"PM_ACCREF","C");                insREFTBL1("10","x","PM_ACCDT" ,"PM_ACCRDT","D");                insREFTBL1("10","x","PM_SALTP" ,"PM_SALTYPE","C");                insREFTBL1("10","x","PM_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("10","x","PM_LUSBY" ,"PM_LUID","C");                insREFTBL1("10","x","PM_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("11","1","PT_MKTTP" ,"PT_PRTYPE","C");                insREFTBL1("11","2","PT_CRDTP" ,"PT_CRDTYPE","C");                insREFTBL1("11","3","PT_DOCTP" ,"PT_DOCTYPE","C");                insREFTBL1("11","4","PT_BNKCD" ,"PT_BNKCD","C");                insREFTBL1("11","5","PT_CHQNO" ,"PT_CHQNO","C");                insREFTBL1("11","x","PT_DOCNO" ,"PT_DOCNO","C");                insREFTBL1("11","x","PT_CHQDT" ,"PT_CHQDT","D");                insREFTBL1("11","x","PT_PMTTP" ,"PT_PTYPE","C");                insREFTBL1("11","x","PT_PMTBY" ,"PT_PMTBY","C");                insREFTBL1("11","x","PT_CHQVL" ,"PT_CHQAMT","N");                insREFTBL1("11","x","PT_STSFL" ,"PT_STATUS","C");                insREFTBL1("11","x","PT_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("11","x","PT_LUSBY" ,"PT_LUID","C");                insREFTBL1("11","x","PT_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("12","1","DOT_MKTTP" ,"DOT_PRTYPE","C");                insREFTBL1("12","2","DOT_DORNO" ,"DOT_DONO","C");                insREFTBL1("12","3","DOT_PRDCD" ,"DOT_PRDCD","X");                insREFTBL1("12","x","DOT_PKGTP" ,"DOT_PKGTYP","C");                insREFTBL1("12","x","DOT_PRDDS" ,"DOT_GRADEC","C");                insREFTBL1("12","x","DOT_DORPK" ,"DOT_PKGS","N");                insREFTBL1("12","x","DOT_PKGWT" ,"DOT_PKGWT","N");                insREFTBL1("12","x","DOT_DORQT" ,"DOT_QTY","N");                insREFTBL1("12","x","DOT_ORDUM" ,"DOT_OUOM","C");                insREFTBL1("12","x","DOT_LOTRF" ,"DOT_LOTREF","C");            //  insREFTBL1("12","x","DOT_LADQT" ,"DOT_LADQTY","N");            //  insREFTBL1("12","x","DOT_INVQT" ,"DOT_INVQTY","N");                insREFTBL1("12","x","DOT_FCMQT" ,"DOT_FCQTY","N");                insREFTBL1("12","x","DOT_DELTP" ,"DOT_DELTYP","C");                insREFTBL1("12","x","DOT_TRNFL" ,"XX_TRNFL","X");                insREFTBL1("12","x","DOT_STSFL" ,"DOT_STATUS","C");                insREFTBL1("12","x","DOT_LUSBY" ,"DOT_LUID","C");                insREFTBL1("12","x","DOT_LUPDT" ,"XX_LUPDT","X");                insREFTBL1("13","1","DOT_MKTTP" ,"DO_PRTYPE","C");                insREFTBL1("13","2","DOT_DORNO" ,"DO_NO","C");                insREFTBL1("13","x","DOT_DORDT" ,"DO_DATE","D");                insREFTBL1("13","x","DOT_AMDNO" ,"DO_AMNDNO","X");                insREFTBL1("13","x","DOT_AMDDT" ,"DO_AMNDDT","D");                insREFTBL1("13","x","DOT_INDNO" ,"DO_INDNO","C");                insREFTBL1("13","x","DOT_TRPCD" ,"DO_TRANSPT","C");                insREFTBL1("13","x","DOT_TMOCD" ,"DO_TRANSMO","C");                insREFTBL1("13","x","DOT_DLCCD" ,"DO_DESPFRO","C");                insREFTBL1("13","x","DOT_FRTRT" ,"DO_FRTRT","N");                insREFTBL1("13","x","DOT_LRYNO" ,"DO_LORRYNO","C");                insREFTBL1("13","x","DOT_AUTBY" ,"DO_AUTHBY","C");                insREFTBL1("13","x","DOT_AUTDT" ,"DO_AUTHDT","D");                insREFTBL1("13","x","DOT_SBSCD" ,"DOT_SBSCD","X");        }	/** Sub-method for inserting data into control table (MR_DTREF)
	 */   public void insREFTBL1(String LP_TRFNO, String LP_KEYVL, String LP_FLD01, String LP_FLD02, String LP_FLDTP)   {        strINSSTR1 = "";        strINSSTR2 = "";	try {        setINSSTR("DT_TRFNO",LP_TRFNO,"C");        setINSSTR("DT_KEYVL",LP_KEYVL,"C");        setINSSTR("DT_FLD01",LP_FLD01,"C");        setINSSTR("DT_FLD02",LP_FLD02,"C");        setINSSTR_L("DT_FLDTP",LP_FLDTP,"C");        M_strSQLQRY = "insert into MR_DTREF ("+strINSSTR1+") values ("+strINSSTR2+")";        //System.out.println(M_strSQLQRY);        setMSG(LP_FLD01+"/"+LP_FLD02,'N');        cl_dat.exeSQLUPD(M_strSQLQRY,"");        cl_dat.exeDBCMT("insREFTBL1");	}	catch (Exception L_EX) {                //showEXMSG(L_EX,"exeREFTBL1","");        }   }/** Generating string for Insertion Query
 * @param	LP_FLDNM	Field name to be inserted
 * @param	LP_FLDVL	Content / value of the field to be inserted
 * @param	LP_FLDTP	Type of the field to be inserted
 */private void setINSSTR(String LP_FLDNM, String LP_FLDVL, String LP_FLDTP) {try {        //System.out.println("LP_FLDNM / LP_FLDVL / LP_FLDTP :"+LP_FLDNM+"/"+LP_FLDVL+"/"+LP_FLDTP);        strINSSTR1 += LP_FLDNM + ",";	if (LP_FLDTP.equals("C"))        {                if (LP_FLDVL.toUpperCase().equals("NULL"))                        strINSSTR2 += "null,";                else                        strINSSTR2 += "'"+nvlSTRVL(LP_FLDVL,"")+"',";                            }	else if (LP_FLDTP.equals("N")) {                    strINSSTR2 += nvlSTRVL(LP_FLDVL,"0") + ",";                        }	else if (LP_FLDTP.equals("D"))           {                //System.out.println("LP_FLDNM / LP_FLDVL / LP_FLDTP (for Date) :"+LP_FLDNM+"/"+LP_FLDVL+"/"+LP_FLDTP);                String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtDBDAT.format(M_fmtLCDAT.parse(LP_FLDVL));                //System.out.println("L_CHKDT : "+L_CHKDT+"  "+L_CHKDT.length());                if(L_CHKDT.length() >= 10)                        strINSSTR2 +=  "'"+L_CHKDT+"',";                else                        strINSSTR2 += " null ,";           }	else if (LP_FLDTP.equals("T"))           {                String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtLCDTM.format(M_fmtLCDAT.parse(LP_FLDVL));                if(L_CHKDT.length() > 10)                        strINSSTR2 +=  "'"+L_CHKDT+"',";                else                        strINSSTR2 += " null ,";           }        }        catch (Exception L_EX) {                //showEXMSG(L_EX,"setINSSTR/"+LP_FLDNM,"");        }        //System.out.println("strINSSTR1 : "+strINSSTR1);        //System.out.println("strINSSTR2 : "+strINSSTR2);}/** Generating last part of the string for Insertion Query
 * @param	LP_FLDNM	Field name to be inserted
 * @param	LP_FLDVL	Content / value of the field to be inserted
 * @param	LP_FLDTP	Type of the field to be inserted
 */private void setINSSTR_L(String LP_FLDNM, String LP_FLDVL, String LP_FLDTP) {try    {        strINSSTR1 += LP_FLDNM ;	if (LP_FLDTP.equals("C"))        {                if (LP_FLDVL.toUpperCase().equals("NULL"))                        strINSSTR2 += "null";                else                        strINSSTR2 += "'"+nvlSTRVL(LP_FLDVL,"")+"'";        }	else if (LP_FLDTP.equals("N")) {            strINSSTR2 += nvlSTRVL(LP_FLDVL,"0") ;                }	else if (LP_FLDTP.equals("D"))           {                String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtDBDAT.format(M_fmtLCDAT.parse(LP_FLDVL));                if(L_CHKDT.length() > 10)                        strINSSTR2 +=  "'"+L_CHKDT+"'";                else                        strINSSTR2 += " null ";                strINSSTR2 += L_CHKDT;           }	else if (LP_FLDTP.equals("T")) {                String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtDBDAT.format(M_fmtLCDAT.parse(LP_FLDVL));                if(L_CHKDT.length() > 10)                        strINSSTR2 +=  "'"+L_CHKDT+"'";                else                        strINSSTR2 += " null ";                        }    //System.out.println("strINSSTR1 : "+strINSSTR1);    //System.out.println("strINSSTR2 : "+strINSSTR2);    }    catch (Exception L_EX)    {                //showEXMSG(L_EX,"setINSSTR/"+LP_FLDNM,"");    }}	
/** Generating string for Updation Query
 * @param	LP_FLDNM	Field name to be inserted
 * @param	LP_FLDVL	Content / value of the field to be inserted
 * @param	LP_FLDTP	Type of the field to be inserted
 * @param	LP_UPDTP	Type of updation,  For where condition / for Upsdation string
 */private String setUPDSTR(String LP_FLDNM, String LP_FLDVL, String LP_FLDTP, String LP_UPDTP){      String L_JOINCHR = " , ";      String L_RETSTR = "";      try      {        if (LP_UPDTP.toUpperCase().equals("W"))               L_JOINCHR = " and ";	if (LP_FLDTP.equals("C"))        {                                if (LP_FLDVL.toUpperCase().equals("NULL"))                        L_RETSTR += LP_FLDNM + " = null" + L_JOINCHR;                else                        L_RETSTR += LP_FLDNM + " = '" + nvlSTRVL(LP_FLDVL,"") + "'" + L_JOINCHR;        } 	else if (LP_FLDTP.equals("N"))        {                L_RETSTR += LP_FLDNM + " = " + nvlSTRVL(LP_FLDVL,"0")  + L_JOINCHR;        } 	else if (LP_FLDTP.equals("D"))        {                String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtDBDAT.format(M_fmtLCDAT.parse(LP_FLDVL));                if(L_CHKDT.length() >= 10)                        L_RETSTR += LP_FLDNM + " = '" + L_CHKDT + "'"+  L_JOINCHR;                else                        L_RETSTR += LP_FLDNM + " = null " + L_JOINCHR;        } 	else if (LP_FLDTP.equals("T"))        {                String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtLCDTM.format(M_fmtLCDAT.parse(LP_FLDVL));                if(L_CHKDT.length() > 10)                        L_RETSTR += LP_FLDNM + " = '" + L_CHKDT + "'"+  L_JOINCHR;                else                        L_RETSTR += LP_FLDNM + " = null " + L_JOINCHR;        }       }       catch (Exception L_EX)      {                //showEXMSG(L_EX,"exeUPDSTR","");      }       return L_RETSTR;}        public int getRECCNT(String LP_SQLSTR){		int L_RETVAL = -1;		try{                        M_rstRSSET = cl_dat.exeSQLQRY1(LP_SQLSTR);                        if(M_rstRSSET.next())                          L_RETVAL = M_rstRSSET.getInt(1);                        M_rstRSSET.close();	    }catch (Exception L_EX){			System.out.println("getRECCNT: "+L_EX);					        L_RETVAL = -1;	       }		return L_RETVAL;	}/** Executing query on foxpro table
 * @param	LP_SQLVAL	Query to be executed
 */public ResultSet exeBKPQRY(String LP_SQLVAL){        M_rstRSSET = null;	try{                if(conSPBKA != null)                        M_rstRSSET = stmSPBKQ.executeQuery(LP_SQLVAL);		}catch(Exception L_SE){		   System.out.println(" Sql Exception "+ L_SE.toString());		}                return M_rstRSSET;	}/** Executing query on foxpro table, additional provision
 * @param	LP_SQLVAL	Query to be executed
 */public ResultSet exeBKPQRY1(String LP_SQLVAL){        M_rstRSSET = null;	try{                if(conSPBKA != null)                        M_rstRSSET = stmSPBKQ1.executeQuery(LP_SQLVAL);		}catch(Exception L_SE){		   System.out.println(" Sql Exception "+ L_SE.toString());		}                return M_rstRSSET;	}/** Establishing connection to Foxpro Table
 * @param	LP_PTHWD	Path for foxpro table
 */   public Connection setCONFTB(String LP_PTHWD)   {		String L_URLSTR ="";                L_URLSTR = "jdbc:odbc:Visual FoxPro Tables;SourceDB = " + LP_PTHWD;		try                {			Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");                        conSPBKA = DriverManager.getConnection(L_URLSTR,"","");                        stmSTBKA = chkCONSTM1(conSPBKA);                        stmSPBKQ = chkCONSTM1(conSPBKA);                        stmSPBKQ1 = chkCONSTM1(conSPBKA);                }                catch(ClassNotFoundException L_CNFE)                {			System.out.println("Error in setCONFTB : "+L_CNFE.toString());                }                catch(SQLException L_SQLE)                {                        System.out.println(LP_PTHWD+": Database not found"+L_SQLE.toString());                }                return conSPBKA;   }/** Verifying connection and creating statement for Foxpro Table
 * @param	LP_CONVAL	Connection Object
 */        public Statement chkCONSTM1(Connection LP_CONVAL)        {                Statement L_stmSPXXA = null;		try                {			if (LP_CONVAL != null)                        {                           LP_CONVAL.setAutoCommit(false);                           L_stmSPXXA = LP_CONVAL.createStatement();			}		}                catch(Exception L_EX){}                return L_stmSPXXA;             	}/** Generating last part of string for Updation Query
 * @param	LP_FLDNM	Field name to be inserted
 * @param	LP_FLDVL	Content / value of the field to be inserted
 * @param	LP_FLDTP	Type of the field to be inserted
 * @param	LP_UPDTP	Type of updation,  For where condition / for Upsdation string
 */private String setUPDSTR_L(String LP_FLDNM, String LP_FLDVL, String LP_FLDTP, String LP_UPDTP){	String L_RETSTR = "";	try	{		if (LP_FLDTP.equals("C"))		{		                			if (LP_FLDVL.toUpperCase().equals("NULL"))				L_RETSTR += LP_FLDNM + " = null";			else				L_RETSTR += LP_FLDNM + " = '" + nvlSTRVL(LP_FLDVL,"") + "' ";		}		else if (LP_FLDTP.equals("N"))		{			L_RETSTR += LP_FLDNM + " = " + nvlSTRVL(LP_FLDVL,"0") +" ";		}		else if (LP_FLDTP.equals("D"))		{			String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtDBDAT.format(M_fmtLCDAT.parse(LP_FLDVL));			if(L_CHKDT.length() >= 10)				L_RETSTR += LP_FLDNM + " = '" + L_CHKDT + "'";			else				L_RETSTR += LP_FLDNM + " = null " ;		}		else if (LP_FLDTP.equals("T"))		{			String L_CHKDT = LP_FLDVL.equals("") ? "null" : M_fmtLCDTM.format(LP_FLDVL);			if(L_CHKDT.length() > 10)				L_RETSTR += LP_FLDNM + " = '" + L_CHKDT + "'";			else				L_RETSTR += LP_FLDNM + " = null " ;		}	}	catch (Exception L_EX)	{	//showEXMSG(L_EX,"setUPDSTR_L","");	}// System.out.println("strUPDSTR : "+strUPDSTR);return L_RETSTR;}}