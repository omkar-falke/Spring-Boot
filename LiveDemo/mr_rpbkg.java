/*
System Name   : Marketing Management System
Program Name  : Grade Wise Booking status
Author        : AAP

Modificaitons 
Modified By    : 
Modified Date  : 
Modified det.  : 
Version        : v2.0.0
*/

import java.io.IOException;import java.io.File;import java.io.FileOutputStream;
import java.io.DataOutputStream;
import javax.swing.*;
import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.JComboBox;
import java.awt.event.FocusEvent;import java.awt.event.ActionEvent;import java.awt.event.KeyEvent;
import java.util.Enumeration;import java.util.StringTokenizer;import java.util.Vector;
import java.util.Hashtable;import java.util.Calendar;import java.util.Arrays;
import java.awt.Color; import java.sql.ResultSet;
import java.text.SimpleDateFormat;

/**<BODY><P><FONT size=4><STRONG>Program Description :</STRONG></FONT>  </P><P><FONT color=purple><STRONG>Program Details :</STRONG></FONT></P><TABLE border=1 cellPadding=1 cellSpacing=1 style="HEIGHT: 89px; WIDTH: 767px" width="75%" borderColorDark=darkslateblue borderColorLight=white>    <TR>    <TD>System Name</TD>    <TD>Marketing Management System </TD></TR>  <TR>    <TD>Program Name</TD>    <TD>    Grade&nbsp;Wise&nbsp;Booking Status Report.</TD></TR>  <TR>    <TD>Program Desc</TD>    <TD>                                                                         Gives&nbsp;summary report of Grade                  and Package type wise       Booking&nbsp; for the day or the month. </TD></TR>  <TR>    <TD>Basis Document</TD>    <TD>      123 report generated by      Mr. PDP      </TD></TR>  <TR>    <TD>Executable path</TD>    <TD>f:\exec\splerp2\mr_rpgrd.class</TD></TR>  <TR>    <TD>Source path</TD>    <TD>g:\splerp2\mr_rpgrd.java</TD></TR>  <TR>    <TD>Author </TD>    <TD>AAP </TD></TR>  <TR>    <TD>Date</TD>    <TD>30/04/2004&nbsp; </TD></TR>  <TR>    <TD>Version </TD>    <TD>2.0.0</TD></TR>  <TR>    <TD><STRONG>Revision : 1 </STRONG></TD>    <TD>&nbsp;&nbsp;        </TD></TR>  <TR>    <TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       By</TD>    <TD>&nbsp;</TD></TR>  <TR>    <TD>      <P align=left>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       Date</P>       </TD>    <TD>      <P align=left>&nbsp;</P>  </TD></TR>  <TR>    <TD>      <P align=left>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Version</P>         </TD>    <TD>&nbsp;</TD></TR></TABLE><P><FONT color=purple><STRONG>   </STRONG></FONT>&nbsp;</P><P><FONT color=purple><STRONG>Tables Used : </STRONG></FONT></P><TABLE border=1 cellPadding=1 cellSpacing=1 style="LEFT: 11px; TOP:  373px; WIDTH: 100%" width="100%" background="" borderColorDark=white borderColorLight=darkslateblue borderColor=black>    <TR>    <TD>      <P align=center>Table Name</P></TD>    <TD>      <P align=center> Columns</P></TD>    <TD>      <P align=center>Add</P></TD>    <TD>      <P align=center>Mod</P></TD>    <TD>      <P align=center>Del</P></TD>    <TD>      <P align=center>Enq</P></TD></TR>  <TR>    <TD>MR_INMST</TD>    <TD>&nbsp;IN_INDDT,IN_ZONCD,IN_MKTTP,IN_SALTP</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR>  <TR>    <TD>MR_INTRN</TD>    <TD>&nbsp;INT_INDNO,INT_PRDDS,INT_PKGWT,INT_INDQT</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR>  <TR>    <TD>CO_CDTRN</TD>    <TD>CMT_CGSTP = 'MR00ZON',       'MR00SAL','MRXXRGN','FGXXPKG','COXXPGR'</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>&nbsp;</TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR>  <TR>    <TD>CO_PRMST</TD>    <TD>&nbsp; PR_PRDCD,PR_PRDDS </TD>    <TD>      <P align=center>&nbsp;</P></TD>    <TD>      <P align=center>&nbsp;</P></TD>    <TD>      <P align=center>&nbsp;</P></TD>    <TD>      <P align=center><FONT face="LotusWP Icon">/</FONT></P></TD></TR></TABLE><P>&nbsp;</P><P><FONT color=purple><STRONG>Report is Available in following Catagories : </STRONG></FONT></P><UL>  <LI>PS - Prime&nbsp;  <LI>  PS - Non Prime   <LI> SPS - All catagories   <LI>Articles of PS</LI></UL><UL>  <LI>For the day</LI>  <LI>For the month</LI></UL><UL>  <LI>For all regions</LI>  <LI>For all zones in a region</LI>  <LI>For a specific zone</LI></UL><P>This Report makes use of HTML format. Methods in cl_rbase are overridden for the same</P><P>Product catagory wise seggregation is done dynamically using 'COXXPGR' series in CO_CDTRN.</P></BODY> */
class mr_rpbkg extends cl_rbase
{
	/**	Flag to indicate that, data is being written in table format in HTML */
	private boolean flgTBLDT;/** Rediobutton for report on booking for the date specifed in M_txtTODAT */
	private JRadioButton rdbDAILY;/** Rediobutton for report on booking for the Month of date specifed in M_txtTODAT */
	private JRadioButton rdbMONTH;/** Rediobutton for report on Specific region */
	private JRadioButton rdbRGNSP;/** Rediobutton for report on All Regions */
	private JRadioButton rdbRGNAL;/** Rediobutton for report on Specific Zone */
	private JRadioButton rdbZONSP;/** Rediobutton for report on All Zones in a region*/
	private JRadioButton rdbZONAL;/** Rediobutton for report of Prime PS grades */
	private JRadioButton rdbPSPRM;/** Rediobutton for report of Non - Prime PS grades */
//	private JRadioButton rdbPSNPR;/** Rediobutton for report of all SPS grades */
	private JRadioButton rdbSPSAL;/** Combo for Specific Region Selection */
	private JRadioButton rdbPSALL;/** Combo for Specific Region Selection */
	private JRadioButton rdbGRDSP;/** Combo for Specific Region Selection */
	private JRadioButton rdbCNSSP;/** Combo for Specific Region Selection */
	private JTextField txtGRDSP;/** Combo for Specific Region Selection */
	private JTextField txtCNSSP;/** Combo for Specific Region Selection */
	private cl_Combo cmbRGNDS;/** Combo for Specific Zone Selection */
	private cl_Combo cmbZONDS;/** To wirte report to a file */
	private DataOutputStream dosREPORT;/**	Global string for default text color in HTML */
	private String strTXCLR="<font Color=black>";/**Global string for page break in HTML	 */
	private String strPGBRK="<P CLASS = \"breakhere\"></PRE>";/** String array for report column headers */
	private String strGRDSP;/** String array for report column headers */
	private String strCNSSP;/** String array for report column headers */
	private String[] staHEADR;/**	Hash table for Package type details<br>KEY : CMT_CODCD<br>VALUE : CMT_NCSVL */
	private Hashtable<String,String> hstPKGTP;/**	Hash table for Sale Type details<br>KEY : INT_PRDDS|INT_PKGWT<br>VALUE : Vector in format IN_SALTP|INT_INDQT*/
	private Hashtable<String,String> hstSALDT;/**	Hash table for sale type short names. Used in text format only<br>KEY : INT_PRDDS|INT_PKGWT<br>VALUE : Vector in format IN_SALTP|INT_INDQT*/
	private Hashtable<String,String> hstSALNM;/**	Hash table for Region details<br>KEY : INT_PRDDS|INT_PKGWT<br>VALUE : Vector in format IN_SALTP|INT_INDQT*/
	private Hashtable<String,String> hstRGNDT;/**	Hash table for Region short names. Used in Text format only<br>KEY : INT_PRDDS|INT_PKGWT<br>VALUE : Vector in format IN_SALTP|INT_INDQT*/
	private Hashtable<String,String> hstRGNNM;/**	Hash table for Zone details<br>KEY : INT_PRDDS|INT_PKGWT<br>VALUE : Vector in format IN_SALTP|INT_INDQT*/
	private Hashtable<String,String> hstZONDT;/**	Hash table for Booking details<br>KEY : INT_PRDDS|INT_PKGWT<br>VALUE : Vector in format IN_SALTP|INT_INDQT*/
	private Hashtable<String,Object> hstBKGDT;/** Panel for report data table*/
	private JPanel pnlREPORT;/** Table for report data */
	private cl_JTable tblREPORT;/** Panel for Specific Zone Selection */
	private JPanel pnlZONSL;/** Vector for PS - PRIME catagory Descriptions*/
	private Vector vtrPSDSC;/** Vector for PS - PRIME catagory wise product codes in object arrays */
	private Vector vtrPSPRM;/** Vector for SPS catagory Descriptions*/
	private Vector vtrHIDSC;/** Vector for PS - PRIME catagory wise product codes in object arrays */
	private Vector vtrHIPS;/** Vector for SPS catagory Descriptions*/
	private Vector vtrSPDSC;/** Vector for SPS catagory wise product codes in object arrays */
	private Vector vtrSPPS;/** Vector for PS - NONPRIME catagory Descriptions*/
	private Vector vtrNPDSC;/** Vector for PS - NONPRIME catagory wise product codes in object arrays */
	private Vector vtrNPPS;/** Vector for Product catagory Descriptions*/
	private Vector vtrPGRDS;/** Vector for Product catagory Codes(first 4 digits only) */
	private Vector<String> vtrPGRCD;/** Vector for Subheaders to be displayed in report (Second line of headings) */
	private Vector<Integer> vtrSUBCT;
	/**
	 * Constructs the form
	 * 
	 * Constructs the form
	 * 
	 * <p>Retrieves details of package types and stores in hspPKGTP
	 * <p>Retrieves details of Product Catgories('COXXPGR') and stores in vtrPGRDS (Description) and vtrPGRCD (First 4 digits of code)
	 * <p>Retrieves product code and description from CO_PRMST, serggregates Product catagory wise using vtrPGRCD and stores in respective vectors in the form of set of object array for each subtype
	 */
	@SuppressWarnings("unchecked") mr_rpbkg()
	{
		super(2);
		try
		{
			this.setCursor(cl_dat.M_curWTSTS_pbst);
		//RETRIEVING PAKAGE TYPE, ZONE, SALE TYPE DETAILS FROM CO_CDTRN and PUTTING IN RESPCTIVE HASHTABLES
			M_rstRSSET=cl_dat.exeSQLQRY0("Select * from CO_CDTRN where CMT_CGMTP='SYS' and (CMT_CGSTP='FGXXPKG' or CMT_CGSTP='MR00ZON' or CMT_CGSTP='MRXXRGN' or CMT_CGSTP='MR00SAL') ");
			if(M_rstRSSET!=null)
			{
				hstPKGTP=new Hashtable<String,String>(10,0.2f);hstRGNDT=new Hashtable<String,String>(10,0.2f);
				hstRGNNM=new Hashtable<String,String>(10,0.2f);hstSALNM=new Hashtable<String,String>(10,0.2f);
				hstZONDT=new Hashtable<String,String>(10,0.2f);hstSALDT=new Hashtable<String,String>(10,0.2f);
				while(M_rstRSSET.next())
				{
					if(M_rstRSSET.getString("CMT_CGSTP").equals("FGXXPKG"))
						hstPKGTP.put(M_rstRSSET.getString("CMT_CODCD"),M_rstRSSET.getString("CMT_NCSVL"));
					else if(M_rstRSSET.getString("CMT_CGSTP").equals("MRXXRGN"))
					{
						hstRGNDT.put(M_rstRSSET.getString("CMT_CODCD"),M_rstRSSET.getString("CMT_CODDS"));
						hstRGNNM.put(M_rstRSSET.getString("CMT_CODDS"),M_rstRSSET.getString("CMT_SHRDS"));
					}
					else if(M_rstRSSET.getString("CMT_CGSTP").equals("MR00ZON"))
					{
						hstZONDT.put(M_rstRSSET.getString("CMT_CODCD"),M_rstRSSET.getString("CMT_CHP02")+"|"+M_rstRSSET.getString("CMT_CODDS") );
					}
					else if(M_rstRSSET.getString("CMT_CGSTP").equals("MR00SAL"))
					{
						hstSALDT.put(M_rstRSSET.getString("CMT_CODCD"),M_rstRSSET.getString("CMT_CODDS") );
						hstSALNM.put(M_rstRSSET.getString("CMT_CODDS"),M_rstRSSET.getString("CMT_SHRDS") );
					}
				}
				M_rstRSSET.close();
			}
		//RETRIEVING DETAILS OF PRODUCT CODE GROUPING AND PUTTING IN RESP VECTORS
			M_rstRSSET=cl_dat.exeSQLQRY0("Select SUBSTRING(CMT_CODCD,1,4) CMT_CODCD,CMT_CODDS from CO_CDTRN where CMT_CGMTP='MST' and CMT_CGSTP='COXXPGR' order by CMT_CODCD");
			if(M_rstRSSET!=null)
			{
				vtrPGRDS=new Vector<String>(10,2);vtrPGRCD=new Vector<String>(10,2);
				while(M_rstRSSET.next())
				{
					vtrPGRDS.addElement(M_rstRSSET.getString("CMT_CODDS"));
					vtrPGRCD.addElement(M_rstRSSET.getString("CMT_CODCD"));
				}
			}
		//RETRIEVING PRODUCT CODE DETAILS FROM CO_PRMST AND RETRIVING ALL POSSIBLE COMBINATIONS OF GRADE AND PKGTP
			M_rstRSSET=cl_dat.exeSQLQRY0("Select * from CO_PRMST order by PR_PRDCD");
			if(M_rstRSSET!=null)
			{
				vtrPSDSC=new Vector(20,5);vtrPSPRM=new Vector(10,5);vtrNPDSC=new Vector(20,5);
				vtrNPPS=new Vector(10,5);vtrSPDSC=new Vector(20,5);vtrSPPS=new Vector(10,5);
				vtrHIDSC=new Vector(20,5);vtrHIPS=new Vector(10,5);
				Vector L_vtrTEMP=null;//Vector for list of PRDCD|PKGWT
				Enumeration L_enmPKGWT=null;//Enumeration for all PKGWT
				String L_strPGRCD=null;//Substring of first 4 digits of PRDCD
				while(M_rstRSSET.next())
				{
					L_enmPKGWT=hstPKGTP.elements();
					L_strPGRCD=M_rstRSSET.getString("PR_PRDCD").substring(0,4);
					for(int i=0;i<vtrPGRCD.size();i++)//SCAN TOTAL LIST OF PRODUCT CATAGORIES
					{
						if(L_strPGRCD.equals(vtrPGRCD.elementAt(i)))//FIND MATCHING PRODUCT CATAGORY
						{
							if(M_rstRSSET.getString("PR_PRDCD").substring(0,2).equals("51"))//GRADE IS OF PS
							{
								if(M_rstRSSET.getString("PR_PRDCD").substring(2,4).equals("11"))
								{
									if(!M_rstRSSET.getString("PR_PRDCD").substring(6,7).equals("1"))//PRIME GRADE OF GPPS
									{
										if(vtrPSDSC.contains(vtrPGRDS.elementAt(i)))//PRODUCT CATAGORY ALREADY ADDED, THEN MODIFY EXISTING VECTOR, OTHERWISE, USE NEW
											L_vtrTEMP=(Vector)vtrPSPRM.elementAt(vtrPSDSC.indexOf(vtrPGRDS.elementAt(i)));
										else
											L_vtrTEMP=new Vector(10,2);
										while(L_enmPKGWT.hasMoreElements())//MAKE COMBINATION WITH ALL PKGWT AND OUT IN THE VECTOR
											L_vtrTEMP.addElement(M_rstRSSET.getString("PR_PRDDS")+"|"+L_enmPKGWT.nextElement().toString());
										if(vtrPSDSC.contains(vtrPGRDS.elementAt(i)))//IF CATAGORY ALREADY EXISTS, REPLACE THE VECTOR OR ADD IT AND MAKE ENTRY TO DESRIPTION VECTOR
											vtrPSPRM.setElementAt(L_vtrTEMP,vtrPSDSC.indexOf(vtrPGRDS.elementAt(i)));
										else
										{
											vtrPSPRM.addElement(L_vtrTEMP);
											vtrPSDSC.addElement(vtrPGRDS.elementAt(i));
										}
									}
									else//GPPS NON - PRIME
									{
										if(vtrPSDSC.contains("Non Prime "+vtrPGRDS.elementAt(i)))//PRODUCT CATAGORY ALREADY ADDED, THEN MODIFY EXISTING VECTOR, OTHERWISE, USE NEW
											L_vtrTEMP=(Vector)vtrPSPRM.elementAt(vtrPSDSC.indexOf("Non Prime "+vtrPGRDS.elementAt(i)));
										else
											L_vtrTEMP=new Vector(10,2);
										while(L_enmPKGWT.hasMoreElements())//MAKE COMBINATION WITH ALL PKGWT AND OUT IN THE VECTOR
											L_vtrTEMP.addElement(M_rstRSSET.getString("PR_PRDDS")+"|"+L_enmPKGWT.nextElement().toString());
										if(vtrPSDSC.contains("Non Prime "+vtrPGRDS.elementAt(i)))//IF CATAGORY ALREADY EXISTS, REPLACE THE VECTOR OR ADD IT AND MAKE ENTRY TO DESRIPTION VECTOR
											vtrPSPRM.setElementAt(L_vtrTEMP,vtrPSDSC.indexOf("Non Prime "+vtrPGRDS.elementAt(i)));
										else
										{
											vtrPSPRM.addElement(L_vtrTEMP);
											vtrPSDSC.addElement("Non Prime "+vtrPGRDS.elementAt(i));
										}
									}
								}
								if(M_rstRSSET.getString("PR_PRDCD").substring(2,4).equals("12"))//HIPS
								{
									if(!M_rstRSSET.getString("PR_PRDCD").substring(6,7).equals("1"))//PRIME GRADE OF HIPS
									{
										if(vtrHIDSC.contains(vtrPGRDS.elementAt(i)))//PRODUCT CATAGORY ALREADY ADDED, THEN MODIFY EXISTING VECTOR, OTHERWISE, USE NEW
											L_vtrTEMP=(Vector)vtrHIPS.elementAt(vtrHIDSC.indexOf(vtrPGRDS.elementAt(i)));
										else
											L_vtrTEMP=new Vector(10,2);
										while(L_enmPKGWT.hasMoreElements())//MAKE COMBINATION WITH ALL PKGWT AND OUT IN THE VECTOR
											L_vtrTEMP.addElement(M_rstRSSET.getString("PR_PRDDS")+"|"+L_enmPKGWT.nextElement().toString());
										if(vtrHIDSC.contains(vtrPGRDS.elementAt(i)))//IF CATAGORY ALREADY EXISTS, REPLACE THE VECTOR OR ADD IT AND MAKE ENTRY TO DESRIPTION VECTOR
											vtrHIPS.setElementAt(L_vtrTEMP,vtrHIDSC.indexOf(vtrPGRDS.elementAt(i)));
										else
										{
											vtrHIPS.addElement(L_vtrTEMP);
											vtrHIDSC.addElement(vtrPGRDS.elementAt(i));
										}
									}
									else//HIPS NON - PRIME
									{
										if(vtrHIDSC.contains("Non Prime "+vtrPGRDS.elementAt(i)))//PRODUCT CATAGORY ALREADY ADDED, THEN MODIFY EXISTING VECTOR, OTHERWISE, USE NEW
											L_vtrTEMP=(Vector)vtrHIPS.elementAt(vtrHIDSC.indexOf("Non Prime "+vtrPGRDS.elementAt(i)));
										else
											L_vtrTEMP=new Vector(10,2);
										while(L_enmPKGWT.hasMoreElements())//MAKE COMBINATION WITH ALL PKGWT AND OUT IN THE VECTOR
											L_vtrTEMP.addElement(M_rstRSSET.getString("PR_PRDDS")+"|"+L_enmPKGWT.nextElement().toString());
										if(vtrHIDSC.contains("Non Prime "+vtrPGRDS.elementAt(i)))//IF CATAGORY ALREADY EXISTS, REPLACE THE VECTOR OR ADD IT AND MAKE ENTRY TO DESRIPTION VECTOR
											vtrHIPS.setElementAt(L_vtrTEMP,vtrHIDSC.indexOf("Non Prime "+vtrPGRDS.elementAt(i)));
										else
										{
											vtrHIPS.addElement(L_vtrTEMP);
											vtrHIDSC.addElement("Non Prime "+vtrPGRDS.elementAt(i));
										}
									}
								}
								else
								{
									if(vtrNPDSC.contains(vtrPGRDS.elementAt(i)))//PRODUCT CATAGORY ALREADY ADDED, THEN MODIFY EXISTING VECTOR, OTHERWISE, USE NEW
										L_vtrTEMP=(Vector)vtrNPPS.elementAt(vtrNPDSC.indexOf(vtrPGRDS.elementAt(i)));
									else
										L_vtrTEMP=new Vector(10,2);
									while(L_enmPKGWT.hasMoreElements())//MAKE COMBINATION WITH ALL PKGWT AND OUT IN THE VECTOR
										L_vtrTEMP.addElement(M_rstRSSET.getString("PR_PRDDS")+"|"+L_enmPKGWT.nextElement().toString());
									if(vtrNPDSC.contains(vtrPGRDS.elementAt(i)))//IF CATAGORY ALREADY EXISTS, REPLACE THE VECTOR OR ADD IT AND MAKE ENTRY TO DESRIPTION VECTOR
										vtrNPPS.setElementAt(L_vtrTEMP,vtrNPDSC.indexOf(vtrPGRDS.elementAt(i)));
									else
									{
										vtrNPPS.addElement(L_vtrTEMP);
										vtrNPDSC.addElement(vtrPGRDS.elementAt(i));
									}
								}
							}
							if(M_rstRSSET.getString("PR_PRDCD").substring(0,2).equals("52"))
							{
								if(vtrSPDSC.contains(vtrPGRDS.elementAt(i)))//PRODUCT CATAGORY ALREADY ADDED, THEN MODIFY EXISTING VECTOR, OTHERWISE, USE NEW
									L_vtrTEMP=(Vector)vtrSPPS.elementAt(vtrSPDSC.indexOf(vtrPGRDS.elementAt(i)));
								else
									L_vtrTEMP=new Vector(10,2);
								while(L_enmPKGWT.hasMoreElements())//MAKE COMBINATION WITH ALL PKGWT AND OUT IN THE VECTOR
									L_vtrTEMP.addElement(M_rstRSSET.getString("PR_PRDDS")+"|"+L_enmPKGWT.nextElement().toString());
								if(vtrSPDSC.contains(vtrPGRDS.elementAt(i)))//IF CATAGORY ALREADY EXISTS, REPLACE THE VECTOR OR ADD IT AND MAKE ENTRY TO DESRIPTION VECTOR
									vtrSPPS.setElementAt(L_vtrTEMP,vtrSPDSC.indexOf(vtrPGRDS.elementAt(i)));
								else
								{
									vtrSPPS.addElement(L_vtrTEMP);
									vtrSPDSC.addElement(vtrPGRDS.elementAt(i));
								}
							}
						}
					}
				}
				M_rstRSSET.close();
				L_vtrTEMP=null;
			//CONVERTING ALL VECTORS IN vtrPSPRM to OBJECT ARRAYS if any element is added
				for(int i=0;i<vtrPSPRM.size();i++)
				{
					L_vtrTEMP=(Vector)vtrPSPRM.elementAt(i);
					vtrPSPRM.removeElementAt(i);
					if(L_vtrTEMP.size()>0)
						vtrPSPRM.insertElementAt(L_vtrTEMP.toArray(),i);
					else
						vtrPSDSC.removeElementAt(i);
				}
			//CONVERTING ALL VECTORS IN vtrPSPRM to OBJECT ARRAYS if any element is added
				for(int i=0;i<vtrHIPS.size();i++)
				{
					L_vtrTEMP=(Vector)vtrHIPS.elementAt(i);
					vtrHIPS.removeElementAt(i);
					if(L_vtrTEMP.size()>0)
						vtrHIPS.insertElementAt(L_vtrTEMP.toArray(),i);
					else
						vtrHIDSC.removeElementAt(i);
				}
			//CONVERTING ALL VECTORS IN vtrSPPS to OBJECT ARRAYS if any element is added
				for(int i=0;i<vtrSPPS.size();i++)
				{
					L_vtrTEMP=(Vector)vtrSPPS.elementAt(i);
					vtrSPPS.removeElementAt(i);
					if(L_vtrTEMP.size()>0)
						vtrSPPS.insertElementAt(L_vtrTEMP.toArray(),i);
					else
						vtrSPDSC.removeElementAt(i);
				}
			//CONVERTING ALL VECTORS IN vtrNPPS to OBJECT ARRAYS if any element is added
				for(int i=0;i<vtrNPPS.size();i++)
				{
					L_vtrTEMP=(Vector)vtrNPPS.elementAt(i);
					if(L_vtrTEMP.size()>0)
						vtrNPPS.setElementAt(L_vtrTEMP.toArray(),i);
					else
					{
						vtrNPDSC.removeElementAt(i);
						vtrNPPS.removeElement(L_vtrTEMP);
					}
				}
				
			}
			setMatrix(20,8);
			M_txtFMDAT.setVisible(false);M_vtrSCCOMP.removeElement(M_txtFMDAT);
			M_lblFMDAT.setVisible(false);M_vtrSCCOMP.removeElement(M_lblFMDAT);
			M_pnlRPFMT.setVisible (true);M_rdbHTML.setSelected(true);
			
			add(rdbDAILY = new JRadioButton("For the Day"),2,1,1,2,this,'L');
			add(rdbMONTH = new JRadioButton("For the Month"),2,3,1,2,this,'L');
			ButtonGroup L_btgTEMP=new ButtonGroup();
			L_btgTEMP.add(rdbDAILY);L_btgTEMP.add(rdbMONTH);
			
			JPanel pnlRGNSL = new JPanel(null);
			add(rdbRGNAL = new JRadioButton("All"),1,1,1,1,pnlRGNSL,'L');
			add(rdbRGNSP = new JRadioButton("Specific"),1,2,1,0.90,pnlRGNSL,'L');
			L_btgTEMP=new ButtonGroup();
			L_btgTEMP.add(rdbRGNAL);L_btgTEMP.add(rdbRGNSP);
			pnlRGNSL.setBorder(BorderFactory.createTitledBorder("Region"));
			add(pnlRGNSL,3,1,2,2,this,'L');
			add(cmbRGNDS = new cl_Combo(),4,3,1,2,this,'L');
			cmbRGNDS.addActionListener(this);
			
			pnlZONSL = new JPanel(null);
			add(rdbZONAL = new JRadioButton("All"),1,1,1,1,pnlZONSL,'L');
			add(rdbZONSP = new JRadioButton("Specific"),1,2,1,0.90,pnlZONSL,'L');
			L_btgTEMP=new ButtonGroup();
			L_btgTEMP.add(rdbZONAL);L_btgTEMP.add(rdbZONSP);
			pnlZONSL.setBorder(BorderFactory.createTitledBorder("Zone"));
			add(pnlZONSL,3,5,2,2,this,'L');
			add(cmbZONDS = new cl_Combo(),4,7,1,1,this,'L');
			cmbZONDS.addActionListener(this);
			
			JPanel pnlPSCAT=new JPanel(null);
			add(rdbPSPRM=new JRadioButton("PS - All"),1,1,1,1,pnlPSCAT,'L');
//			add(rdbPSNPR=new JRadioButton("PS - NonPrime"),1,2,1,1.5,pnlPSCAT,'L');
			add(rdbSPSAL=new JRadioButton("Spciality PS"),1,2,1,1.2,pnlPSCAT,'L');
			add(rdbPSALL=new JRadioButton("All"),1,3,1,0.8,pnlPSCAT,'R');
			add(rdbGRDSP=new JRadioButton("For the Grade"),1,4,1,1.5,pnlPSCAT,'L');
			add(txtGRDSP=new JTextField(),1,6,1,1.5,pnlPSCAT,'R');
			txtGRDSP.setVisible(false);
			L_btgTEMP=new ButtonGroup();//L_btgTEMP.add(rdbPSNPR);
			L_btgTEMP.add(rdbPSPRM);L_btgTEMP.add(rdbSPSAL);
			L_btgTEMP.add(rdbGRDSP);L_btgTEMP.add(rdbPSALL);
			pnlPSCAT.setBorder(BorderFactory.createTitledBorder("Product Type"));
			add(pnlPSCAT,5,1,2,6.05,this,'L');
			
			JPanel pnlCNSSP=new JPanel(null);
			pnlCNSSP.setBorder(BorderFactory.createTitledBorder("Consignee"));
			add(rdbCNSSP=new JRadioButton("For the Consignee"),1,1,1,1.5,pnlCNSSP,'L');
			add(txtCNSSP=new JTextField(),1,5,1,3.5,pnlCNSSP,'R');
			txtCNSSP.setVisible(false);
			add(pnlCNSSP,7,1,2,6.05,this,'L');
			
		//PUTTING REGION DATA IN cmbRGNDS
			Enumeration L_enmRGNCD=hstRGNDT.keys();
			Enumeration L_enmRGNDS=hstRGNDT.elements();
			cmbRGNDS.addItem("Select","");
			while(L_enmRGNCD.hasMoreElements())
				cmbRGNDS.addItem(L_enmRGNDS.nextElement(),L_enmRGNCD.nextElement());
			cmbRGNDS.setVisible(false);cmbZONDS.setVisible(false);rdbDAILY.setSelected(true);
			pnlZONSL.setVisible(false);rdbRGNAL.setSelected(true);rdbZONAL.setSelected(true);
			rdbPSPRM.setSelected(true);
			txtGRDSP.setInputVerifier(new INPVF());txtCNSSP.setInputVerifier(new INPVF());
			cl_dat.M_btnUNDO_pbst.setVerifyInputWhenFocusTarget(false);
			cl_dat.M_btnEXIT_pbst.setVerifyInputWhenFocusTarget(false);
			setMatrix(20,6);
			clrCOMP();
			setENBL(false);
		}catch(Exception e)
		{setMSG(e,"Child.Constructor");}
		finally
		{this.setCursor(cl_dat.M_curDFSTS_pbst);}
	}
	/**<b>TASKS</B><BR>
	 * Focus nevigation, component state setting and cmbZONDS & cmbRGNDS population
	 */
	public void actionPerformed(ActionEvent L_AE)
	{
		try
		{
			this.setCursor(cl_dat.M_curWTSTS_pbst);
			super.actionPerformed(L_AE);
			if(M_objSOURC == rdbCNSSP)
			{
				if(rdbCNSSP.isSelected())
					txtCNSSP.setVisible(true);
				else
					txtCNSSP.setVisible(false);
			}
			else if(M_objSOURC == rdbGRDSP)
				txtGRDSP.setVisible(true);
			else if(M_objSOURC == rdbPSPRM || M_objSOURC == rdbSPSAL || M_objSOURC == rdbPSALL)
				txtGRDSP.setVisible(false);
			else if(M_objSOURC == rdbRGNAL)
			{
				cmbRGNDS.setVisible(false);
				cmbZONDS.setVisible(false);
				pnlZONSL.setVisible(false);
				cl_dat.M_btnSAVE_pbst.requestFocus();
			}
			else if(M_objSOURC == rdbRGNSP)
			{
				cmbRGNDS.setVisible(true);
				if(rdbZONSP.isSelected())
					cmbZONDS.setVisible(true);
				pnlZONSL.setVisible(true);
				cmbRGNDS.requestFocus();
			}
			else if(M_objSOURC == rdbZONAL)
			{
				cmbZONDS.setVisible(false);
				cl_dat.M_btnSAVE_pbst.requestFocus();
			}
			else if(M_objSOURC == rdbZONSP)
			{
				cmbZONDS.removeAllItems();
				Enumeration L_enmZONDT = hstZONDT.keys();
				String L_strKEY=null;
				StringTokenizer L_stkKEY=null;
				while(L_enmZONDT.hasMoreElements())
				{
					L_strKEY=(String)L_enmZONDT.nextElement();
					L_stkKEY=new StringTokenizer((String)hstZONDT.get(L_strKEY),"|");
					if(L_stkKEY.nextToken().equals(cmbRGNDS.getITMCD()))
					   cmbZONDS.addItem(L_stkKEY.nextToken(),L_strKEY);
				}
				cmbZONDS.setVisible(true);
				pnlZONSL.setVisible(true);
				cmbZONDS.requestFocus();
			}
			else if(M_objSOURC == cmbRGNDS)
			{
				cmbZONDS.removeAllItems();
				Enumeration L_enmZONDT = hstZONDT.keys();
				String L_strKEY=null;
				StringTokenizer L_stkKEY=null;
				while(L_enmZONDT.hasMoreElements())
				{
					L_strKEY=(String)L_enmZONDT.nextElement();
					L_stkKEY=new StringTokenizer((String)hstZONDT.get(L_strKEY),"|");
					if(L_stkKEY.nextToken().equals(cmbRGNDS.getITMCD()))
					   cmbZONDS.addItem(L_stkKEY.nextToken(),L_strKEY);
				}
				rdbZONAL.requestFocus();
			}
			else if(M_objSOURC == cmbZONDS)
				cl_dat.M_btnSAVE_pbst.requestFocus();
		}catch(Exception e)
		{setMSG(e,"Child.actionPerformed");}
		finally
		{this.setCursor(cl_dat.M_curDFSTS_pbst);}
	}
	/**Focus transfer on Enter	 */
	public void keyPressed(KeyEvent L_KE)
	{
		super.keyPressed(L_KE);
		if(M_objSOURC == txtGRDSP && L_KE.getKeyCode() == L_KE.VK_F1)
		{
			M_strHLPFLD="txtGRDSP";
			cl_hlp("Select distinct PR_prdds from co_PRMST order by PR_PRDDS",1,1,new String[] {"Grade"},1 ,"CT");
		}
		else if(M_objSOURC == txtCNSSP && L_KE.getKeyCode() == L_KE.VK_F1)
		{
			M_strHLPFLD="txtCNSSP";
			cl_hlp("Select distinct PT_PRTNM from co_PTMST where PT_PRTTP='C' and PT_GRPCD is not null order by PT_PRTNM",1,1,new String[] {"Group Description"},1 ,"CT");
		}
		if(L_KE.getKeyCode()==L_KE.VK_ENTER)
			((JComponent)M_objSOURC).transferFocus();
	}
	public void exeHLPOK()
	{
		try
		{
			cl_dat.M_flgHELPFL_pbst = false;
			super.exeHLPOK();
			cl_dat.M_wndHLP_pbst=null;
			StringTokenizer L_STRTKN=new StringTokenizer(cl_dat.M_strHELP_pbst,"|");
			if(M_strHLPFLD.equals("txtGRDSP"))
				txtGRDSP.setText(L_STRTKN.nextToken());
			else if(M_strHLPFLD.equals("txtCNSSP"))
				txtCNSSP.setText(L_STRTKN.nextToken());
		}
		catch(Exception e)
		{setMSG(e,"Chile.exeHLPOK");}
	}
	boolean vldDATA()
	{
		if(rdbRGNSP.isSelected() && cmbRGNDS.getSelectedIndex() == 0)
		{
			setMSG("Please select Region ..",'E');
			cmbRGNDS.requestFocus();
			return false;
		}
		if(cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPPRN_pbst)
		   && M_rdbTEXT.isSelected()
		   && M_cmbDESTN.getSelectedIndex() == 0)
		{
			setMSG("Please select Printer ..",'E');
			M_cmbDESTN.requestFocus();
			return false;
		}
		if(cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPEML_pbst)
		   && M_cmbDESTN.getItemCount() == 0)
		{
			setMSG("Please Enter Receipents ..",'E');
			M_cmbDESTN.requestFocus();
			return false;
		}
		if(txtCNSSP.isVisible() && txtCNSSP.getText().length()==0)
		{
			setMSG("Please Enter Consignee Group ..",'E');
			txtCNSSP.requestFocus();
			return false;
		}
		if(txtGRDSP.isVisible() && txtGRDSP.getText().length()==0)
		{
			setMSG("Please Enter Grade ..",'E');
			txtGRDSP.requestFocus();
			return false;
		}
	return true;
	}
	/** 
	 * Retrieve data from database and put in tblREPORT after Formatting
	 * 
	 * Retrieve data from database and put in tblREPORT after Formatting
	 * 
	 * <p>For the Day  : Booking upto report date is considered<br>
	 * For the Month : Booking in Report Month is considered<br>
	 * 	 
	 */
	@SuppressWarnings("unchecked") void exePRINT()
	{
		this.getParent().getParent().setCursor(cl_dat.M_curWTSTS_pbst);
		try
		{
			if(!vldDATA())
				return;
			M_intLINNO=1;M_intPAGNO=1;
			String L_strRPDAT=null;
		//CONSTRUCTING INDDT FILTER AS PER REPORT FOR THE DAY OR MONTH SELECTION
			setMSG("Fetching Report Data ..",'N');
			if(rdbDAILY.isSelected())
				L_strRPDAT=" = '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' ";
			else
			{
				M_calLOCAL.setTime(M_fmtLCDAT.parse(M_txtTODAT.getText()));
				M_calLOCAL.set(Calendar.DATE,1);
				L_strRPDAT=" between '";
				L_strRPDAT += M_fmtDBDAT.format(M_calLOCAL.getTime()) +"' and '"+M_fmtDBDAT.format(M_fmtLCDAT.parse(M_txtTODAT.getText()))+"' ";
			}
			if(rdbGRDSP.isSelected())
				L_strRPDAT+= " and INT_PRDCD = '"+strGRDSP+"' ";
			if(rdbCNSSP.isSelected())
				L_strRPDAT+= " and IN_CNSCD in (select pt_prtcd from CO_PTMST where PT_GRPCD='"+strCNSSP+"' and PT_PRTTP='C' ) ";
			M_strSQLQRY="select CMT_CHP02 IN_RGNCD,CMT_CODDS,INT_PRDDS,IN_ZONCD,INT_PKGWT,(isnull(int_indqt,0)-isnull(int_fcmqt,0)) INT_INDQT, "
					+" IN_MKTTP,IN_SALTP "
					+" from VW_INTRN, CO_CDTRN "
					+" where  int_cmpcd = '"+cl_dat.M_strCMPCD_pbst+"' and int_mkttp='01' and  IN_BKGDT "+L_strRPDAT
					+" and in_stsfl<>'X' and int_stsfl<>'X' and (isnull(int_indqt,0)-isnull(int_fcmqt,0))>0 "
					+" and CMT_CGSTP='MR00ZON' and CMT_CODCD = IN_ZONCD  and INT_SBSCD1 in "+M_strSBSLS
					+" order by int_prdds";
			System.out.println(M_strSQLQRY);
			M_rstRSSET=cl_dat.exeSQLQRY0(M_strSQLQRY);
			setMSG("Formatting Report Data, Please wait ..",'N');
			hstBKGDT=new Hashtable(30,0.3f);
			Vector L_vtrHEADR=new Vector(30,10),//VECTOR FOR REPORT COLUMN HEADER
				L_vtrSALTP=new Vector(5,1),//VECTOR FOR REPORT COLUMN SUBHEADER (2nd line of tablee titles)
				L_vtrTEMP=null;//VECTOR OF DATA
			String L_strHEADR=null,L_strTEMP=null;
			while(M_rstRSSET.next())
			{
				if(chkSPCOL(M_rstRSSET.getString("IN_ZONCD")))//CHECK WHETHER CURRENT ROW IS IN SELECTION CRITERIA OR NOT
				{
					L_strHEADR=null;
				//CONSTRUCTING RGN/ZON/SALTP string AS PER SELECTION
					if(rdbRGNAL.isSelected())
						L_strHEADR= hstRGNDT.get(M_rstRSSET.getString("IN_RGNCD"))+"|"+hstSALDT.get(M_rstRSSET.getString("IN_SALTP"));
					else if(rdbZONSP.isSelected() && M_rstRSSET.getString("IN_ZONCD").equals(cmbZONDS.getITMCD()))
						L_strHEADR=(String)hstSALDT.get(M_rstRSSET.getString("IN_SALTP"));
					else if((!rdbZONSP.isSelected()) && rdbRGNSP.isSelected() && M_rstRSSET.getString("IN_RGNCD").equals(cmbRGNDS.getITMCD()))
						L_strHEADR=M_rstRSSET.getString("CMT_CODDS")+"|"+hstSALDT.get(M_rstRSSET.getString("IN_SALTP"));
					if(L_strHEADR != null)
					{//ADD THE DESCTIPTION IN HEADER LIST
						if(!L_vtrHEADR.contains(L_strHEADR))
							L_vtrHEADR.addElement(L_strHEADR);
						if(!L_vtrSALTP.contains(hstSALDT.get(M_rstRSSET.getString("IN_SALTP"))))
						   L_vtrSALTP.addElement(hstSALDT.get(M_rstRSSET.getString("IN_SALTP")));
					}
					L_strTEMP="";
					L_strTEMP=L_strHEADR+"|"+nvlSTRVL(M_rstRSSET.getString("INT_INDQT")," ");
				//IF CATAGORY ALREADY PRESENT IN THE HASH TABLE, USE EXISTING VECTOR
					if(!hstBKGDT.containsKey(M_rstRSSET.getString("INT_PRDDS")+"|"+M_rstRSSET.getString("INT_PKGWT")))
						L_vtrTEMP=new Vector(1,1);
					else//ELSE CONSTRUCT NEW
						L_vtrTEMP=(Vector)hstBKGDT.get(M_rstRSSET.getString("INT_PRDDS")+"|"+M_rstRSSET.getString("INT_PKGWT"));
					L_vtrTEMP.addElement(L_strTEMP);
					hstBKGDT.put(M_rstRSSET.getString("INT_PRDDS")+"|"+M_rstRSSET.getString("INT_PKGWT"),L_vtrTEMP);
				}
			}
		//CONSTRUCTING REPORT TABLE TITLES
			Object [] L_obaHEADR=L_vtrHEADR.toArray();
			Arrays.sort(L_obaHEADR);
			Object [] L_obaSALTP=L_vtrSALTP.toArray();
			if(rdbZONSP.isSelected())
				L_obaSALTP=new Object[0];
			Arrays.sort(L_obaSALTP);
			staHEADR=new String[L_obaHEADR.length+3+L_obaSALTP.length ]  ;
			staHEADR[0]="FL";staHEADR[1]="Grade";staHEADR[2]="Pkg.Wt.";
			for(int i=3;i<staHEADR.length-L_obaSALTP.length;i++)
				staHEADR[i]=(String)L_obaHEADR[i-3];
			for(int i=3+L_obaHEADR.length;i<staHEADR.length;i++)
				staHEADR[i]=(String)L_obaSALTP[i-3-L_obaHEADR.length];
			String[] L_staHEADR=new String[staHEADR.length+1];
			for(int i=0;i<staHEADR.length;i++)
				L_staHEADR[i]=staHEADR[i];
			L_staHEADR[L_staHEADR.length-1]="TOTAL";
		//COLUMN SIZE ARRAY	
			int[] L_staCOLSZ=new int[L_staHEADR.length];
			L_staCOLSZ[0]=20;
			for(int i=1;i<L_staCOLSZ.length;i++)
				L_staCOLSZ[i]=70;
			if(pnlREPORT!=null)
				pnlREPORT.removeAll();
			if(pnlREPORT==null)
				pnlREPORT=new JPanel(null);
			if(L_staHEADR.length==4)
			{
				setMSG("No Data Found ..",'E');
				return;
			}
			
			tblREPORT = crtTBLPNL1(pnlREPORT,L_staHEADR,500,1,1,11,6,L_staCOLSZ,new int[]{0});		
//			add(pnlREPORT,6,1,12,6,this,'L');
//			pnlREPORT.setVisible(false);
			updateUI();
			int L_intROWID=0,L_intTEMP=0;
			float[] L_flaTOTAL=new float[staHEADR.length-3];
			float[] L_flaGRTOT=new float[staHEADR.length-3];
			boolean L_flgDATA=false;

//DISPLAY PS DATA IN THE JTABLE
			
			if(rdbPSPRM.isSelected() || rdbGRDSP.isSelected() || rdbPSALL.isSelected())
			{
				for(int i=0;i<vtrPSPRM.size();i++)
				{//DISPLAY GPPS PRIME AND NONTRIME GRADE DETAILS
					L_intTEMP=L_intROWID++;
					if(((Object[])vtrPSPRM.elementAt(i)).length>0)
						L_intROWID=setTBLDATA(L_intROWID,(Object[])vtrPSPRM.elementAt(i));
					if(L_intROWID==L_intTEMP+1)//IF NO DATA ADDED, SET ROW POINTER TO ORIGINAL
						L_intROWID-=2;
					else //ELSE DISPLAY HEADING AT THE TOP & CALCULATE GRAND TOTAL
					{
						L_flgDATA=true;
						tblREPORT.setRowColor(L_intTEMP,Color.blue);
						tblREPORT.setValueAt(vtrPSDSC.elementAt(i),L_intTEMP,1);
						for(int j=0;j<L_flaTOTAL.length;j++)
							L_flaTOTAL[j]+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(L_intROWID-1,j+3).toString(),"0.0"));
					}
					L_intROWID++;
				}
				if(L_flgDATA)
				{//DISPALY GPPS TOTAL IF DATA IS FOUND, ELSE OMITE
					tblREPORT.setRowColor(L_intROWID,Color.blue);
					tblREPORT.setValueAt("GPPS TOTAL",L_intROWID,1);
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						tblREPORT.setValueAt(setNumberFormat(L_flaTOTAL[j],3),L_intROWID,j+3);
						L_flaGRTOT[j]+=L_flaTOTAL[j];
					}
					L_intROWID+=2;
					L_flgDATA=false;
					L_flaTOTAL=new float[staHEADR.length-3];
				}
				for(int i=0;i<vtrHIPS.size();i++)
				{//DISPLAY HIPS PRIME AND NON PIRME GRADES
					L_intTEMP=L_intROWID++;
					if(((Object[])vtrHIPS.elementAt(i)).length>0)
						L_intROWID=setTBLDATA(L_intROWID,(Object[])vtrHIPS.elementAt(i));
					if(L_intROWID==L_intTEMP+1)//IF NO DATA ADDED, SET ROW POINTER TO ORIGINAL
						L_intROWID-=2;
					else //ELSE DISPLAY HEADING AT THE TOP & CALCULATE GRAND TOTAL
					{
						L_flgDATA=true;
						tblREPORT.setRowColor(L_intTEMP,Color.blue);
						tblREPORT.setValueAt(vtrHIDSC.elementAt(i),L_intTEMP,1);
						for(int j=0;j<L_flaTOTAL.length;j++)
							L_flaTOTAL[j]+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(L_intROWID-1,j+3).toString(),"0.0"));
					}
					L_intROWID++;
				}
				if(L_flgDATA)
				{//DISPLAY HIPS TOTAL IF DATA FOUND ELSE, OMITE
					tblREPORT.setRowColor(L_intROWID,Color.blue);
					tblREPORT.setValueAt("HIPS TOTAL",L_intROWID,1);
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						tblREPORT.setValueAt(setNumberFormat(L_flaTOTAL[j],3),L_intROWID,j+3);
						L_flaGRTOT[j]+=L_flaTOTAL[j];
					}
					L_intROWID+=2;
					L_flgDATA=false;
					L_flaTOTAL=new float[staHEADR.length-3];
				}
				for(int i=0;i<vtrNPPS.size();i++)
				{//DISPLAY OFF GRADE PS (Like PSFS, SCRAP ETC.)
					L_intTEMP=L_intROWID++;
					if(vtrNPPS.elementAt(i) instanceof Vector)
						vtrNPPS.setElementAt(((Vector)vtrNPPS.elementAt(i)).toArray(),i);
					if(((Object[])vtrNPPS.elementAt(i)).length>0)
						L_intROWID=setTBLDATA(L_intROWID,(Object[])vtrNPPS.elementAt(i));
					if(L_intROWID==L_intTEMP+1)//IF NO DATA ADDED, SET ROW POINTER TO ORIGINAL
						L_intROWID-=2;
					else//ELSE DISPLAY HEADING AT THE TOP & CALCULATE GRAND TOTAL
					{
						L_flgDATA=true;
						tblREPORT.setRowColor(L_intTEMP,Color.blue);
						tblREPORT.setValueAt(vtrNPDSC.elementAt(i),L_intTEMP,1);
						for(int j=0;j<L_flaTOTAL.length;j++)
							L_flaTOTAL[j]+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(L_intROWID-1,j+3).toString(),"0.0"));
					}
					L_intROWID++;
				}
				if(L_flgDATA)
				{//DISPLAY OFF GRADE TOTAL IF DATA FOUND ELSE OMITE
					tblREPORT.setRowColor(L_intROWID,Color.blue);
					tblREPORT.setValueAt("OTHERS TOTAL",L_intROWID,1);
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						tblREPORT.setValueAt(setNumberFormat(L_flaTOTAL[j],3),L_intROWID,j+3);
						L_flaGRTOT[j]+=L_flaTOTAL[j];
					}
					L_intROWID+=2;
					L_flgDATA=false;
					L_flaTOTAL=new float[staHEADR.length-3];
				}
				if(rdbPSALL.isSelected())
				{
					tblREPORT.setRowColor(L_intROWID,Color.magenta);
					tblREPORT.setValueAt("PS TOTAL",L_intROWID,1);
					for(int j=0;j<L_flaTOTAL.length;j++)
						tblREPORT.setValueAt(setNumberFormat(L_flaGRTOT[j],3),L_intROWID,j+3);
					L_intROWID+=2;
				}
			}
/*			if(rdbPSNPR.isSelected()  || rdbGRDSP.isSelected() || rdbPSALL.isSelected())
			{
//DISPLAY GPPS - NON PRIME DATA
				for(int i=0;i<vtrNPPS.size();i++)
				{
					L_intTEMP=L_intROWID++;
					
					if(vtrNPPS.elementAt(i) instanceof Vector)
						vtrNPPS.setElementAt(((Vector)vtrNPPS.elementAt(i)).toArray(),i);
					if(((Object[])vtrNPPS.elementAt(i)).length>0)
						L_intROWID=setTBLDATA(L_intROWID,(Object[])vtrNPPS.elementAt(i));
					if(L_intROWID==L_intTEMP+1)//IF NO DATA ADDED, SET ROW POINTER TO ORIGINAL
						L_intROWID-=2;
					else//ELSE DISPLAY HEADING AT THE TOP & CALCULATE GRAND TOTAL
					{
						tblREPORT.setRowColor(L_intTEMP,Color.blue);
						tblREPORT.setValueAt(vtrNPDSC.elementAt(i),L_intTEMP,1);
						for(int j=0;j<L_flaTOTAL.length;j++)
							L_flaTOTAL[j]+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(L_intROWID-1,j+3).toString(),"0.0"));
					}
					L_intROWID++;
				}
				L_flaGRTOT=L_flaTOTAL;
			}
*/			if(rdbSPSAL.isSelected() || rdbGRDSP.isSelected() || rdbPSALL.isSelected())
			{

				for(int i=0;i<vtrSPPS.size();i++)
				{//DISPLAY SPS DATA
					L_intTEMP=L_intROWID++;
					if(((Object[])vtrSPPS.elementAt(i)).length>0)
						L_intROWID=setTBLDATA(L_intROWID,(Object[])vtrSPPS.elementAt(i));
					if(L_intROWID==L_intTEMP+1)//IF NO DATA ADDED, SET ROW POINTER TO ORIGINAL
						L_intROWID-=2;
					else//ELSE DISPLAY HEADING AT THE TOP & CALCULATE GRAND TOTAL
					{
						L_flgDATA=true;
						tblREPORT.setRowColor(L_intTEMP,Color.blue);
						tblREPORT.setValueAt(vtrSPDSC.elementAt(i),L_intTEMP,1);
						for(int j=0;j<L_flaTOTAL.length;j++)
							L_flaTOTAL[j]+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(L_intROWID-1,j+3).toString(),"0.0"));
					}
					L_intROWID++;
				}
				if(L_flgDATA)
				{//DISPLAY OFF GRADE TOTAL IF DATA FOUND ELSE OMITE
					tblREPORT.setRowColor(L_intROWID,Color.blue);
					tblREPORT.setValueAt("SPS TOTAL",L_intROWID,1);
					for(int j=0;j<L_flaTOTAL.length;j++)
					{
						tblREPORT.setValueAt(setNumberFormat(L_flaTOTAL[j],3),L_intROWID,j+3);
						L_flaGRTOT[j]+=L_flaTOTAL[j];
					}
					L_intROWID+=2;
					L_flgDATA=false;
					L_flaTOTAL=new float[staHEADR.length-3];
				}
			}
		//DISPLAY GRAND TOTAL
			tblREPORT.setRowColor(L_intROWID,Color.red);
			tblREPORT.setValueAt("Grand TOTAL",L_intROWID,1);
			for(int j=0;j<L_flaGRTOT.length;j++)
				tblREPORT.setValueAt(setNumberFormat(L_flaGRTOT[j],3),L_intROWID,j+3);
//CALCULATE SALE TYPE WISE & OVERALL TOTALS FOR GRADES
			float L_fltTOTAL1=0.0f;
			for(int i=0;i<tblREPORT.getRowCount();i++)
			{
				if(rdbZONSP.isSelected())
				{
					for(int j=3;j<staHEADR.length;j++)
						L_fltTOTAL1+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,j).toString(),"0.0"));
					tblREPORT.setValueAt(setNumberFormat(L_fltTOTAL1,3),i,tblREPORT.getColumnCount()-1);
					L_fltTOTAL1=0.0f;
					continue;
				}
				for(int j=3+L_obaHEADR.length;j<staHEADR.length;j++)
				{
					L_fltTOTAL1=0.0f;
					for(int k=3;k<L_obaHEADR.length+3;k++)
					{
						L_fltTOTAL1+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,k).toString(),"0.0"));
						StringTokenizer L_stkTEMP=new StringTokenizer(staHEADR[k],"|");
						while(L_stkTEMP.hasMoreTokens()) 
							L_strTEMP=L_stkTEMP.nextToken();
						if(L_strTEMP.equals(staHEADR[j]))
							tblREPORT.setValueAt(setNumberFormat(Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,j).toString(),"0.0"))+Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,k).toString(),"0.0")),3),i,j);
					}
					if(Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,j).toString(),"0.0"))==0.0f)
						tblREPORT.setValueAt("",i,j);
					if(L_fltTOTAL1>0.0f)
						tblREPORT.setValueAt(setNumberFormat(L_fltTOTAL1,3),i,tblREPORT.getColumnCount()-1);
				}
			}
		//WRITE TO FILE
			exePRNRPT();
			if(cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPSCN_pbst) || (M_rdbHTML.isSelected() && cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPPRN_pbst)))
			{//DISPLAY HTML REPORT IN BROWSER
					Runtime r = Runtime.getRuntime();
					Process p = null;
					if(M_rdbTEXT.isSelected())
						p  = r.exec("c:\\windows\\wordpad.exe "+ cl_dat.M_strREPSTR_pbst+"mr_rpbkg.doc"); 
					else
						p  = r.exec("c:\\program files\\internet explorer\\iexplore.exe "+cl_dat.M_strREPSTR_pbst+"mr_rpbkg.htm");
			}
		//PRINT TO PRINTER IN PRINT OPTION IN TEXT FORMAT
			else if(M_rdbTEXT.isSelected() && cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPPRN_pbst))
				doPRINT(cl_dat.M_strREPSTR_pbst+"mr_rpbkg.doc");
			else if(cl_dat.M_cmbOPTN_pbst.getSelectedItem().equals(cl_dat.M_OPEML_pbst))
			//E_MAIL THE RESPECTIVE FILE TO RECEIPENTS, ONE BY ONE
				for(int i=0;i<M_cmbDESTN.getItemCount();i++)
					((cl_eml)Class.forName("cl_eml").newInstance()).sendfile(M_cmbDESTN.getItemAt(i).toString(),cl_dat.M_strREPSTR_pbst+"mr_rpbkg."+(M_rdbTEXT.isSelected() ? "doc" : "htm"),"Grade wise stock status on "+M_txtTODAT.getText(),"");
			setMSG("Report Completed ..",'N');
		}catch(Exception e)
		{
			setMSG(e,"exePRINT");
			setMSG("Error in Report Generation ..",'E');
		}
		finally{this.getParent().getParent().setCursor(cl_dat.M_curDFSTS_pbst);}
	}
	/** Method to check whther zone code sent as aurgument fits in criteria selected by the user	 */
	private boolean chkSPCOL(String P_strZONCD)
	{
		if(rdbRGNAL.isSelected())
		   return true;
		if(rdbZONSP.isSelected())
			if(P_strZONCD.equals(cmbZONDS.getITMCD()))
				return true;
		if(rdbRGNSP.isSelected())
			for(int i=0;i<cmbZONDS.getItemCount();i++)
				if(cmbZONDS.getITMCDAt(i).equals(P_strZONCD))
					return true;
		return false;
	}
	
	/**
	 * Method to put data in tblREPORT
	 * 
	 * Method to put data in tblREPORT
	 * 
	 * <p>Formats the data and displays in tblREPORT. Calculates Totals side by side and displays at the end
	 * 
	 * @param P_intROWID Row no. from which data is to be displayed in tblREPORT
	 * @param P_obaPSCAT Object array giving details of the Product catagory to be displayed. Should be one of obaGPPS,obaHIP,obaGPNP,obaHINP,obaSPGP,obaSPHI
	 * @return Last row updated in tblREPORT. -1 if error occurres
	 */
	private int setTBLDATA(int P_intROWID,Object[] P_obaPSCAT)
	{
		try
		{
			boolean L_flgTOTAL=false;
			float[] L_flaTOTAL=new float[staHEADR.length-3];
			for(int i=0; i<P_obaPSCAT.length;i++)
			{
				String L_strTEMP=null;
				StringTokenizer L_stkTEMP=null;
				Vector L_vtrTEMP=null;
				if(hstBKGDT.containsKey(P_obaPSCAT[i]) )
				{
					L_flgTOTAL=true;
					L_vtrTEMP=(Vector)hstBKGDT.get(P_obaPSCAT[i]);
					L_stkTEMP=new StringTokenizer((String)P_obaPSCAT[i],"|");
					tblREPORT.setValueAt(L_stkTEMP.nextToken(),P_intROWID,1);
					tblREPORT.setValueAt(L_stkTEMP.nextToken(),P_intROWID,2);
					for(int j=0;j<L_vtrTEMP.size();j++)
					{
						L_stkTEMP=new StringTokenizer((String)L_vtrTEMP.elementAt(j),"|");
						L_strTEMP=L_stkTEMP.nextToken();
						if(!rdbZONSP.isSelected())
							L_strTEMP+="|"+L_stkTEMP.nextToken();
						int k=0;
						for(k=0;k<staHEADR.length;k++)
							if(staHEADR[k].equals(L_strTEMP))
								break;
						tblREPORT.setValueAt(setNumberFormat(Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(P_intROWID,k).toString(),"0.0"))+Float.parseFloat(L_stkTEMP.nextToken()),3),P_intROWID,k);
					}	
					for(int j=0;j<L_flaTOTAL.length;j++)
						L_flaTOTAL[j]+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(P_intROWID,j+3).toString(),"0.0"));
					P_intROWID++;
				}
			}
			if(!L_flgTOTAL)
				return P_intROWID;
			tblREPORT.setRowColor(P_intROWID,Color.blue);
			tblREPORT.setValueAt("TOTAL",P_intROWID,1);
			for(int j=0;j<L_flaTOTAL.length;j++)
			{
				if(L_flaTOTAL[j]<0.0f)
					tblREPORT.setCellColor(P_intROWID,j+3,Color.red);
				tblREPORT.setValueAt(setNumberFormat(L_flaTOTAL[j],3),P_intROWID,j+3);
			}
			P_intROWID++;
			return P_intROWID;
		}catch(Exception e)
		{setMSG(e,"setTBLDATA");
		return -1;}
	}
	/**Method to write report to file, text or html	 */
	private void exePRNRPT() throws Exception
	{
		File filREPORT=null;
		vtrSUBCT=new Vector<Integer>(5,2);
		if(M_rdbHTML.isSelected())
			filREPORT=new File(cl_dat.M_strREPSTR_pbst+"mr_rpbkg.htm");
		else
			filREPORT=new File(cl_dat.M_strREPSTR_pbst+"mr_rpbkg.doc");
		FileOutputStream filOUT=new FileOutputStream(filREPORT);
		dosREPORT=new DataOutputStream(filOUT);
		String L_strTEMP1=null,L_strTEMP2=null;
		int L_intCOLCT=1;
		L_strTEMP1=new StringTokenizer(staHEADR[3],"|").nextToken();
		for(int i=4;i<staHEADR.length;i++)
		{
			if(L_strTEMP1.equals(new StringTokenizer(staHEADR[i],"|").nextToken()))
				L_intCOLCT++;
			else
			{
				vtrSUBCT.addElement(new Integer((L_intCOLCT==1 ? 1 : L_intCOLCT)));
				L_intCOLCT=1;
				L_strTEMP1=new StringTokenizer(staHEADR[i],"|").nextToken();
			}
		}
			vtrSUBCT.addElement(new Integer(L_intCOLCT));
		String L_strREPNM="Grade wise Booking status for the ";//+(rdbDAILY.isSelected() ? "Day" : "Month");
		if(rdbDAILY.isSelected())
			L_strREPNM+="Day "+M_txtTODAT.getText();
		else
		{
			SimpleDateFormat L_fmtMONTH=new SimpleDateFormat("MMM ''yy");
			L_strREPNM+=" Month Of "+L_fmtMONTH.format(M_fmtLCDAT.parse(M_txtTODAT.getText()));
		}
		String L_strREPTP="For ";
		if(rdbPSPRM.isSelected())
			L_strREPTP+="Polystyrene ";
		else if(rdbSPSAL.isSelected())
			L_strREPTP+="Sp. Polystyrene ";
//			else if(rdbPSNPR.isSelected())
//				L_strREPTP+="Polystyrene - NonPrime ";
		else if(rdbPSALL.isSelected())
			L_strREPTP+="Polystyrene & Sp. Polystyrene ";
		else if(rdbGRDSP.isSelected())
			L_strREPTP+=txtGRDSP.getText()+" ";
		if(rdbZONSP.isSelected())
		{
			if(cmbZONDS.getSelectedItem().toString().equalsIgnoreCase("OVERALL"))
				L_strREPTP+="in the "+cmbZONDS.getSelectedItem()+" " +cmbRGNDS.getSelectedItem()+" Zone";
			else
				L_strREPTP+="in the "+cmbZONDS.getSelectedItem()+" Zone";
		}
		else if(rdbRGNSP.isSelected())
			L_strREPTP+="in the "+cmbRGNDS.getSelectedItem()+" Region";
		else
			L_strREPTP+="in all Regions";
		if(M_rdbHTML.isSelected())
		{
			dosREPORT.writeBytes("<HTML><HEAD><STYLE TYPE=\"text/css\"> P.breakhere {page-break-before: always}</STYLE></HEAD>");
			dosREPORT.writeBytes("<BODY bgColor=ghostwhite><P><HR><TABLE border=0 cellPadding=0 cellSpacing=0  width=\"100%\"> <TR><TD><IMG src=\"file://f:\\exec\\splerp2\\spllogo_old.gif\" style=\"HEIGHT: 68px; LEFT: 0px; TOP: 0px; WIDTH: 68px\"></TD><TD><P align=left><STRONG><FONT face=Arial size=5>SUPREME PETROCHEM LIMITED</FONT></STRONG></P><STRONG><FONT face=Arial size=4><p align=left> "+L_strREPNM+"</font><STRONG><FONT face=Arial size=3><p align=left> "+L_strREPTP+"</font> </TD><TD><p><FONT face=Arial size=2>Date : "+cl_dat.M_txtCLKDT_pbst.getText()+"</p><p><FONT face=Arial size=2>Page No. : 1</P><TD> </TR></TABLE><HR><FONT face=\"Comic Sans MS\">");
		}
		else
		{
			prnFMTCHR(dosREPORT,M_strNOCPI17);prnFMTCHR(dosREPORT,M_strCPI10);prnFMTCHR(dosREPORT,M_strBOLD);
			dosREPORT.writeBytes(padSTRING('R',"SUPREME PETROCHEM LIMITED",80));
			crtNWLIN(dosREPORT);
			prnFMTCHR(dosREPORT,M_strNOBOLD);
			dosREPORT.writeBytes(padSTRING('R',L_strREPNM,80));
			dosREPORT.writeBytes(padSTRING('R',"DATE : "+cl_dat.M_txtCLKDT_pbst.getText(),30));
			crtNWLIN(dosREPORT);
			dosREPORT.writeBytes(padSTRING('R',L_strREPTP,80));
			dosREPORT.writeBytes(padSTRING('R',"PAGE : 1",30));
			crtNWLIN(dosREPORT);
			crtHRLIN(dosREPORT,"-",130);
			crtNWLIN(dosREPORT);
			prnFMTCHR(dosREPORT,M_strCPI17);
		}
		if(rdbCNSSP.isSelected())
		{
			prnFMTCHR(dosREPORT,M_strBOLD);
			dosREPORT.writeBytes(padSTRING('R',"Booked By : "+txtCNSSP.getText(),80));
			prnFMTCHR(dosREPORT,M_strNOBOLD);
			crtNWLIN(dosREPORT);
				
		}
		prnHEADR(vtrSUBCT);
		for(int i=0;i<tblREPORT.getRowCount();i++)
		{
			crtNWLIN(dosREPORT);
			setTXCLR(dosREPORT,tblREPORT.getCellColor(i,1));
			if(tblREPORT.getValueAt(i,1).toString().length()==0 && tblREPORT.getValueAt(i,2).toString().length()==0
			   && tblREPORT.getValueAt(i+1,1).toString().length()==0 &&tblREPORT.getValueAt(i+1,2).toString().length()==0)
				break;
			dosREPORT.writeBytes(padSTRING('R',nvlSTRVL(tblREPORT.getValueAt(i,1).toString(),"-"),M_rdbTEXT.isSelected()? 12: 20));
			dosREPORT.writeBytes(padSTRING('C',nvlSTRVL(tblREPORT.getValueAt(i,2).toString(),"-"),M_rdbTEXT.isSelected()? 12: 20));
			int L_intVTRID=0;
			for(int j=3;j<staHEADR.length;j++)
			{
				dosREPORT.writeBytes(padSTRING('L',nvlSTRVL(tblREPORT.getValueAt(i,j).toString(),"-"),12));
				if(j<staHEADR.length-1)
				{
					if((!new StringTokenizer(staHEADR[j],"|").nextToken().equals(new StringTokenizer(staHEADR[j+1],"|").nextToken())) )
					{
						L_intCOLCT=Integer.parseInt(vtrSUBCT.elementAt(L_intVTRID).toString());
						if(Integer.parseInt(vtrSUBCT.elementAt(L_intVTRID++).toString())>1)
						{
							float L_fltTOTAL1=0.0f;
							for(int k=0;k<L_intCOLCT;k++)
								L_fltTOTAL1+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,j-k).toString(),"0.0"));
							dosREPORT.writeBytes(padSTRING('L',(L_fltTOTAL1>0.0f ? setNumberFormat(L_fltTOTAL1,3) : "-"),12));
						}
					}
				}
				else if(Integer.parseInt(vtrSUBCT.elementAt(L_intVTRID).toString())>1)
				{
					L_intCOLCT=Integer.parseInt(vtrSUBCT.elementAt(L_intVTRID).toString());
					float L_fltTOTAL1=0.0f;
					for(int k=0;k<L_intCOLCT-1;k++)
						L_fltTOTAL1+=Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,j-k).toString(),"0.0"));
					dosREPORT.writeBytes(padSTRING('L',(L_fltTOTAL1>0.0f ? setNumberFormat(L_fltTOTAL1,3) : "-"),12));
				}
			}
			dosREPORT.writeBytes(padSTRING('L',(Float.parseFloat(nvlSTRVL(tblREPORT.getValueAt(i,tblREPORT.getColumnCount()-1).toString(),"0.0"))>0 ? tblREPORT.getValueAt(i,tblREPORT.getColumnCount()-1).toString() : "-"),12));
		}
		dosREPORT.flush();
		dosREPORT.close();
	}
	/**Method to print header of report 	 */
	private void prnHEADR(Vector<Integer> P_vtrSUBCT) throws Exception
	{
		crtTBL(dosREPORT,true);
		setTXCLR(dosREPORT,Color.red);
		if(M_rdbTEXT.isSelected())
			prnFMTCHR(dosREPORT,M_strCPI17);
		dosREPORT.writeBytes(padSTRING('R',"GRADE",12));
		dosREPORT.writeBytes(padSTRING('C',"PKG.Wt.",12));
		int L_intHDRCT=3;
		for(int i=0;i<P_vtrSUBCT.size();i++)
		{
			String L_strTEMP=(Integer.parseInt(P_vtrSUBCT.elementAt(i).toString())>1 ? Integer.toString(Integer.parseInt(P_vtrSUBCT.elementAt(i).toString())+1) : Integer.toString(Integer.parseInt(P_vtrSUBCT.elementAt(i).toString())));
			if(new StringTokenizer(staHEADR[L_intHDRCT],"|").countTokens()>1 || rdbZONSP.isSelected())
			{
				if(M_rdbHTML.isSelected())
				{
					dosREPORT.writeBytes("<td colspan = "+L_strTEMP+" align = center><font color=red>"+new StringTokenizer(staHEADR[L_intHDRCT],"|").nextToken().toUpperCase()+"</td>");
					L_intHDRCT+=Integer.parseInt(P_vtrSUBCT.elementAt(i).toString());
				}
				else
				{
					dosREPORT.writeBytes(padSTRING('R',hstRGNNM.get(new StringTokenizer(staHEADR[L_intHDRCT],"|").nextToken()).toString(),Integer.parseInt(L_strTEMP)*12));
					L_intHDRCT+=Integer.parseInt(P_vtrSUBCT.elementAt(i).toString());
				}
			}
		}
		if(M_rdbHTML.isSelected())
			dosREPORT.writeBytes("<td colspan = "+String.valueOf(tblREPORT.getColumnCount()-L_intHDRCT)+" align = center><font color=red>TOTAL</td>");
		else
			dosREPORT.writeBytes(padSTRING('R',"TOTAL",(tblREPORT.getColumnCount()-L_intHDRCT)*12));
		crtNWLIN(dosREPORT);
		if(!rdbZONSP.isSelected())
		{
			dosREPORT.writeBytes(padSTRING('R',"-",12));
			dosREPORT.writeBytes(padSTRING('R',"-",12));
			StringTokenizer L_stkTEMP=null;
			int L_intVTRID=0;
			for(int i=3;i<staHEADR.length;i++)
			{
				L_stkTEMP=new StringTokenizer(staHEADR[i],"|");
				String L_strTEMP=L_stkTEMP.nextToken();
				if(L_stkTEMP.hasMoreTokens())
				{
					if(M_rdbHTML.isSelected())
						dosREPORT.writeBytes(padSTRING('L',L_stkTEMP.nextToken(),12));
					else
						dosREPORT.writeBytes(padSTRING('L',hstSALNM.get(L_stkTEMP.nextToken()).toString(),12));
				}
				else 
					dosREPORT.writeBytes(padSTRING('L',hstSALNM.get(L_strTEMP).toString(),12));
				if(i<staHEADR.length-1)
				{
					if((!L_strTEMP.equals(new StringTokenizer(staHEADR[i+1],"|").nextToken())) && Integer.parseInt(P_vtrSUBCT.elementAt(L_intVTRID++).toString())>1)
						dosREPORT.writeBytes(padSTRING('L',"TOTAL",12));
				}
				else if(Integer.parseInt(P_vtrSUBCT.elementAt(L_intVTRID++).toString())>1)
					dosREPORT.writeBytes(padSTRING('L',"TOTAL",12));
			}
			dosREPORT.writeBytes(padSTRING('L',"TOTAL",12));
		}
		if(M_rdbTEXT.isSelected())
		{
			crtNWLIN(dosREPORT);
			crtHRLIN(dosREPORT,"-",200);
		}
	}
	/**Method to print footer of report	 */
	private void prnRPFTR() throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			endTABLE(dosREPORT);
			dosREPORT.writeBytes(strPGBRK);
		}
		else 
			prnFMTCHR(dosREPORT,M_strEJT);
		crtNWLIN(dosREPORT);
		prnHEADR(vtrSUBCT);
		crtNWLIN(dosREPORT);
		
	}
	
	void clrCOMP()
	{
		super.clrCOMP();
		try
		{
			M_calLOCAL.setTime(M_fmtLCDAT.parse(cl_dat.M_strLOGDT_pbst));
			M_calLOCAL.add(Calendar.DATE,-1);
			M_txtTODAT.setText(M_fmtLCDAT.format(M_calLOCAL.getTime()));
		}catch(Exception e)
		{setMSG(e,"Child.clrCOMP");}
	}
	protected  void prnFMTCHR(DataOutputStream L_DOUT,String L_FMTSTR){
		try{
			if(L_FMTSTR.equals(M_strCPI10))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT Size = 6>");
				else
				{
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("P");
				}
			}
			if(L_FMTSTR.equals(M_strCPI12))
			{
				intCOLCT=90;
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT  Size = 5>");
				else
				{
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("M");
				}
			}
			if(L_FMTSTR.equals(M_strCPI17))
			{
				intCOLCT=145;
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT Size = 4>");
				else
					L_DOUT.writeChar(15);
			}
			if(L_FMTSTR.equals(M_strNOCPI17))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("</FONT>");
				else
					L_DOUT.writeChar(18);
			}
			if(L_FMTSTR.equals(M_strBOLD))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<STRONG>");
				else
				{
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("G");
				}
			}
			if(L_FMTSTR.equals(M_strNOBOLD))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("</STRONG>");
				else
				{
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("H");
				}
			}
			if(L_FMTSTR.equals(M_strENH))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("<FONT Size = 5><STRONG>");
				else
				{
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("W1");
				}
			}
			if(L_FMTSTR.equals(M_strNOENH))
			{
				if(M_rdbHTML.isSelected())
					L_DOUT.writeBytes("</STRONG></FONT >");
				else
				{
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("W0");
					L_DOUT.writeChar(27);
					L_DOUT.writeBytes("F");
				}
			}
			if(L_FMTSTR.equals(M_strEJT))
			{
				if(M_rdbHTML.isSelected())
				{
					
				}
				else
					L_DOUT.writeChar(12);
			}
		}catch(IOException L_EX){
			setMSG(L_EX,"prnFMTCHR");
		}
	}
	
	private void crtTBL(DataOutputStream L_DOUT,boolean P_flgBORDR) throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			if(P_flgBORDR)
				L_DOUT.writeBytes("<p><TABLE border=1 borderColor=white borderColorDark=white borderColorLight=gray cellPadding=0 cellSpacing=0  width=\"100%\" align=center>");
			else
				L_DOUT.writeBytes("<p><TABLE border=0 borderColor=ghostwhite borderColorDark=ghostwhite borderColorLight=gostwhite cellPadding=0 cellSpacing=0 width=\"100%\"  align=center>");
			flgTBLDT=true;
		}
	}
	
	void crtNWLIN(DataOutputStream L_DOUT) throws Exception
	{
		if(M_rdbTEXT.isSelected())
		   L_DOUT.writeBytes("\n");
		else
		{
			if(flgTBLDT)
				L_DOUT.writeBytes("</TD></TR><TR>");
			else
				L_DOUT.writeBytes("</P><P>");
		}
		M_intLINNO++;
		if(M_intLINNO>23)
		{
			M_intLINNO=1;
			prnRPFTR();
		}
	}
	
	private void endTABLE(DataOutputStream L_DOUT) throws Exception
	{
		if(M_rdbHTML.isSelected())
			L_DOUT.writeBytes("</TR></TABLE></P>");
		flgTBLDT=false;
	}
	
	protected  String padSTRING(char P_chrPADTP,String P_strSTRVL,int P_intPADLN)
	{
		String P_strTRNVL = "";
		try
		{
			String L_STRSP = " ";
			P_strSTRVL = P_strSTRVL.trim();
			int L_STRLN = P_strSTRVL.length();
			if(P_intPADLN <= L_STRLN)
			{
				P_strSTRVL = P_strSTRVL.substring(0,P_intPADLN).trim();
				L_STRLN = P_strSTRVL.length();
				P_strTRNVL = P_strSTRVL;
			}
			if(M_rdbHTML.isSelected())
			{
				if(P_chrPADTP=='C')
					P_strTRNVL="<p Align = center>"+strTXCLR+P_strSTRVL+"</font>"+"</P>";
				else if(P_chrPADTP=='R')
					P_strTRNVL="<p Align = left>"+strTXCLR+P_strSTRVL+"</font>"+"</P>";
				else if(P_chrPADTP=='L')
					P_strTRNVL="<p Align = right>"+strTXCLR+P_strSTRVL+"</font>"+"</P>";
				if(flgTBLDT)
					P_strTRNVL="<td>"+strTXCLR+P_strTRNVL+"</font>"+"</td>";
				return P_strTRNVL;
			}
			int L_STRDF = P_intPADLN - L_STRLN;
			StringBuffer L_STRBUF;
			switch(P_chrPADTP)
			{
				case 'C':
						L_STRDF = L_STRDF / 2;
						L_STRBUF = new StringBuffer(L_STRDF);
						for(int j = 0;j < L_STRBUF.capacity();j++)
							L_STRBUF.insert(j,' ');
						P_strTRNVL =  L_STRBUF+P_strSTRVL+L_STRBUF ;
					break;
				case 'R':
					L_STRBUF = new StringBuffer(L_STRDF);
					for(int j = 0;j < L_STRBUF.capacity();j++)
						L_STRBUF.insert(j,' ');
					P_strTRNVL =  P_strSTRVL+L_STRBUF ;
					break;
				case 'L':
					L_STRBUF = new StringBuffer(L_STRDF);
					for(int j = 0;j < L_STRBUF.capacity();j++)
						L_STRBUF.insert(j,' ');
					P_strTRNVL =  L_STRBUF+P_strSTRVL ;
					break;
			}
		}catch(Exception L_EX){
			setMSG(L_EX,"padSTRING");
		}
		return P_strTRNVL;
	}
	/**Method to set Text color in HTML file<br>Has no effect in text format	 */
	void setTXCLR(DataOutputStream L_DOUT,Color P_clrCOLOR) throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			if(P_clrCOLOR.equals(Color.red))
				strTXCLR="<font Color=red>";
			else if(P_clrCOLOR.equals(Color.black))
				strTXCLR="<font Color=black>";
			else if(P_clrCOLOR.equals(Color.blue))
				strTXCLR="<font Color=blue>";
			else if(P_clrCOLOR.equals(Color.magenta))
				strTXCLR="<font Color=purple>";
			else if(P_clrCOLOR.equals(Color.green))
				strTXCLR="<font Color=green>";
		}
		else if(M_rdbTEXT.isSelected())
		{
			if(P_clrCOLOR.equals(Color.red))
				prnFMTCHR(L_DOUT,M_strBOLD);
			else if(P_clrCOLOR.equals(Color.black))
				prnFMTCHR(L_DOUT,M_strNOBOLD);
			else if(P_clrCOLOR.equals(Color.blue))
				prnFMTCHR(L_DOUT,M_strBOLD);
			else if(P_clrCOLOR.equals(Color.magenta))
				prnFMTCHR(L_DOUT,M_strBOLD);
			else if(P_clrCOLOR.equals(Color.green))
				prnFMTCHR(L_DOUT,M_strBOLD);
		}
	}
	
	void crtHRLIN(DataOutputStream L_DOUT,String P_strLNCHR,int P_intCHRCT) throws Exception
	{
		if(M_rdbHTML.isSelected())
		{
			if(!flgTBLDT)
				L_DOUT.writeBytes("<HR>");
		}
		else
			for(int i=0;i<P_intCHRCT;i++)
				L_DOUT.writeBytes(P_strLNCHR);
		crtNWLIN(L_DOUT);
	}
	/** Class for input verification	 */
	private class INPVF extends InputVerifier
	{
		/**
		 * Method to verify data entered by user
		 * 
		 * Method to verify data entered by user
		 * 
		 * <P>txtCNSSP : Validate consignee group description from CO_PTMST, if valid, copy group code to strCNSSP otherwise, retain focus</p>
		 * <p>txtGRDSP : Validate grade description from CO_PRMST, if valid, copy grade code to strGRDSP otherwise, retain focus</p>
		 */
		public boolean verify(JComponent input)
		{
			try
			{
				if(input instanceof JTextField)
					if(((JTextField)input).getText().length()==0)
					   return true;
				if(input == txtCNSSP)
				{
					txtCNSSP.setText(txtCNSSP.getText().toUpperCase());
					ResultSet L_rstRSSET=cl_dat.exeSQLQRY0("Select * from CO_PTMST where PT_PRTTP='C' and PT_PRTNM='"+txtCNSSP.getText()+"'");
					if(L_rstRSSET==null)
					{
						setMSG("Invalid Conginee Group",'E');
						return false;
					}	
					if(!L_rstRSSET.next())
					{
						setMSG("Invalid Conginee Group",'E');
						return false;
					}
					strCNSSP=L_rstRSSET.getString("PT_GRPCD");
				}
				if(input == txtGRDSP)
				{
					txtGRDSP.setText(txtGRDSP.getText().toUpperCase());
					ResultSet L_rstRSSET=cl_dat.exeSQLQRY0("Select * from CO_PRMST where PR_PRDDS='"+txtGRDSP.getText()+"'");
					if(L_rstRSSET==null)
					{
						setMSG("Invalid Grade",'E');
						return false;
					}	
					if(!L_rstRSSET.next())
					{
						setMSG("Invalid Grade",'E');
						return false;
					}
					strGRDSP=L_rstRSSET.getString("PR_PRDCD");
				}
			}catch(Exception e)
			{
				setMSG(e,"Child.INPVF");
				setMSG("Invalid Data ..",'E');
				return false;
			}
			return true;
		}
	}
}